// Generated by the protocol buffer compiler.  DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// source: astarteplatform/msghub/property.proto
// Protobuf C++ Version: 5.29.0

#ifndef astarteplatform_2fmsghub_2fproperty_2eproto_2epb_2eh
#define astarteplatform_2fmsghub_2fproperty_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>
#include <utility>

#include "google/protobuf/runtime_version.h"
#if PROTOBUF_VERSION != 5029000
#error "Protobuf C++ gencode is built with an incompatible version of"
#error "Protobuf C++ headers/runtime. See"
#error "https://protobuf.dev/support/cross-version-runtime-guarantee/#cpp"
#endif
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_tctable_decl.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/message.h"
#include "google/protobuf/message_lite.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/unknown_field_set.h"
#include "astarteplatform/msghub/astarte_data.pb.h"
#include "astarteplatform/msghub/interface.pb.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_astarteplatform_2fmsghub_2fproperty_2eproto

namespace google {
namespace protobuf {
namespace internal {
template <typename T>
::absl::string_view GetAnyMessageName();
}  // namespace internal
}  // namespace protobuf
}  // namespace google

// Internal implementation detail -- do not use these members.
struct TableStruct_astarteplatform_2fmsghub_2fproperty_2eproto {
  static const ::uint32_t offsets[];
};
extern const ::google::protobuf::internal::DescriptorTable
    descriptor_table_astarteplatform_2fmsghub_2fproperty_2eproto;
namespace astarteplatform {
namespace msghub {
class Property;
struct PropertyDefaultTypeInternal;
extern PropertyDefaultTypeInternal _Property_default_instance_;
class PropertyData;
struct PropertyDataDefaultTypeInternal;
extern PropertyDataDefaultTypeInternal _PropertyData_default_instance_;
class PropertyFilter;
struct PropertyFilterDefaultTypeInternal;
extern PropertyFilterDefaultTypeInternal _PropertyFilter_default_instance_;
class PropertyIdentifier;
struct PropertyIdentifierDefaultTypeInternal;
extern PropertyIdentifierDefaultTypeInternal _PropertyIdentifier_default_instance_;
class StoredProperties;
struct StoredPropertiesDefaultTypeInternal;
extern StoredPropertiesDefaultTypeInternal _StoredProperties_default_instance_;
}  // namespace msghub
}  // namespace astarteplatform
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google

namespace astarteplatform {
namespace msghub {

// ===================================================================


// -------------------------------------------------------------------

class PropertyIdentifier final
    : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:astarteplatform.msghub.PropertyIdentifier) */ {
 public:
  inline PropertyIdentifier() : PropertyIdentifier(nullptr) {}
  ~PropertyIdentifier() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(PropertyIdentifier* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(PropertyIdentifier));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR PropertyIdentifier(
      ::google::protobuf::internal::ConstantInitialized);

  inline PropertyIdentifier(const PropertyIdentifier& from) : PropertyIdentifier(nullptr, from) {}
  inline PropertyIdentifier(PropertyIdentifier&& from) noexcept
      : PropertyIdentifier(nullptr, std::move(from)) {}
  inline PropertyIdentifier& operator=(const PropertyIdentifier& from) {
    CopyFrom(from);
    return *this;
  }
  inline PropertyIdentifier& operator=(PropertyIdentifier&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PropertyIdentifier& default_instance() {
    return *internal_default_instance();
  }
  static inline const PropertyIdentifier* internal_default_instance() {
    return reinterpret_cast<const PropertyIdentifier*>(
        &_PropertyIdentifier_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 4;
  friend void swap(PropertyIdentifier& a, PropertyIdentifier& b) { a.Swap(&b); }
  inline void Swap(PropertyIdentifier* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PropertyIdentifier* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PropertyIdentifier* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<PropertyIdentifier>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const PropertyIdentifier& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const PropertyIdentifier& from) { PropertyIdentifier::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(PropertyIdentifier* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "astarteplatform.msghub.PropertyIdentifier"; }

 protected:
  explicit PropertyIdentifier(::google::protobuf::Arena* arena);
  PropertyIdentifier(::google::protobuf::Arena* arena, const PropertyIdentifier& from);
  PropertyIdentifier(::google::protobuf::Arena* arena, PropertyIdentifier&& from) noexcept
      : PropertyIdentifier(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kInterfaceNameFieldNumber = 1,
    kPathFieldNumber = 2,
  };
  // string interface_name = 1;
  void clear_interface_name() ;
  const std::string& interface_name() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_interface_name(Arg_&& arg, Args_... args);
  std::string* mutable_interface_name();
  PROTOBUF_NODISCARD std::string* release_interface_name();
  void set_allocated_interface_name(std::string* value);

  private:
  const std::string& _internal_interface_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_interface_name(
      const std::string& value);
  std::string* _internal_mutable_interface_name();

  public:
  // string path = 2;
  void clear_path() ;
  const std::string& path() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_path(Arg_&& arg, Args_... args);
  std::string* mutable_path();
  PROTOBUF_NODISCARD std::string* release_path();
  void set_allocated_path(std::string* value);

  private:
  const std::string& _internal_path() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_path(
      const std::string& value);
  std::string* _internal_mutable_path();

  public:
  // @@protoc_insertion_point(class_scope:astarteplatform.msghub.PropertyIdentifier)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 0,
      68, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const PropertyIdentifier& from_msg);
    ::google::protobuf::internal::ArenaStringPtr interface_name_;
    ::google::protobuf::internal::ArenaStringPtr path_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_astarteplatform_2fmsghub_2fproperty_2eproto;
};
// -------------------------------------------------------------------

class PropertyFilter final
    : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:astarteplatform.msghub.PropertyFilter) */ {
 public:
  inline PropertyFilter() : PropertyFilter(nullptr) {}
  ~PropertyFilter() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(PropertyFilter* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(PropertyFilter));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR PropertyFilter(
      ::google::protobuf::internal::ConstantInitialized);

  inline PropertyFilter(const PropertyFilter& from) : PropertyFilter(nullptr, from) {}
  inline PropertyFilter(PropertyFilter&& from) noexcept
      : PropertyFilter(nullptr, std::move(from)) {}
  inline PropertyFilter& operator=(const PropertyFilter& from) {
    CopyFrom(from);
    return *this;
  }
  inline PropertyFilter& operator=(PropertyFilter&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PropertyFilter& default_instance() {
    return *internal_default_instance();
  }
  static inline const PropertyFilter* internal_default_instance() {
    return reinterpret_cast<const PropertyFilter*>(
        &_PropertyFilter_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 3;
  friend void swap(PropertyFilter& a, PropertyFilter& b) { a.Swap(&b); }
  inline void Swap(PropertyFilter* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PropertyFilter* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PropertyFilter* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<PropertyFilter>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const PropertyFilter& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const PropertyFilter& from) { PropertyFilter::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(PropertyFilter* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "astarteplatform.msghub.PropertyFilter"; }

 protected:
  explicit PropertyFilter(::google::protobuf::Arena* arena);
  PropertyFilter(::google::protobuf::Arena* arena, const PropertyFilter& from);
  PropertyFilter(::google::protobuf::Arena* arena, PropertyFilter&& from) noexcept
      : PropertyFilter(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kOwnershipFieldNumber = 1,
  };
  // optional .astarteplatform.msghub.Ownership ownership = 1;
  bool has_ownership() const;
  void clear_ownership() ;
  ::astarteplatform::msghub::Ownership ownership() const;
  void set_ownership(::astarteplatform::msghub::Ownership value);

  private:
  ::astarteplatform::msghub::Ownership _internal_ownership() const;
  void _internal_set_ownership(::astarteplatform::msghub::Ownership value);

  public:
  // @@protoc_insertion_point(class_scope:astarteplatform.msghub.PropertyFilter)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 1, 0,
      0, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const PropertyFilter& from_msg);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    int ownership_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_astarteplatform_2fmsghub_2fproperty_2eproto;
};
// -------------------------------------------------------------------

class PropertyData final
    : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:astarteplatform.msghub.PropertyData) */ {
 public:
  inline PropertyData() : PropertyData(nullptr) {}
  ~PropertyData() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(PropertyData* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(PropertyData));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR PropertyData(
      ::google::protobuf::internal::ConstantInitialized);

  inline PropertyData(const PropertyData& from) : PropertyData(nullptr, from) {}
  inline PropertyData(PropertyData&& from) noexcept
      : PropertyData(nullptr, std::move(from)) {}
  inline PropertyData& operator=(const PropertyData& from) {
    CopyFrom(from);
    return *this;
  }
  inline PropertyData& operator=(PropertyData&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PropertyData& default_instance() {
    return *internal_default_instance();
  }
  static inline const PropertyData* internal_default_instance() {
    return reinterpret_cast<const PropertyData*>(
        &_PropertyData_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 0;
  friend void swap(PropertyData& a, PropertyData& b) { a.Swap(&b); }
  inline void Swap(PropertyData* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PropertyData* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PropertyData* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<PropertyData>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const PropertyData& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const PropertyData& from) { PropertyData::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(PropertyData* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "astarteplatform.msghub.PropertyData"; }

 protected:
  explicit PropertyData(::google::protobuf::Arena* arena);
  PropertyData(::google::protobuf::Arena* arena, const PropertyData& from);
  PropertyData(::google::protobuf::Arena* arena, PropertyData&& from) noexcept
      : PropertyData(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kDataFieldNumber = 1,
  };
  // optional .astarteplatform.msghub.AstarteData data = 1;
  bool has_data() const;
  void clear_data() ;
  const ::astarteplatform::msghub::AstarteData& data() const;
  PROTOBUF_NODISCARD ::astarteplatform::msghub::AstarteData* release_data();
  ::astarteplatform::msghub::AstarteData* mutable_data();
  void set_allocated_data(::astarteplatform::msghub::AstarteData* value);
  void unsafe_arena_set_allocated_data(::astarteplatform::msghub::AstarteData* value);
  ::astarteplatform::msghub::AstarteData* unsafe_arena_release_data();

  private:
  const ::astarteplatform::msghub::AstarteData& _internal_data() const;
  ::astarteplatform::msghub::AstarteData* _internal_mutable_data();

  public:
  // @@protoc_insertion_point(class_scope:astarteplatform.msghub.PropertyData)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 1, 1,
      0, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const PropertyData& from_msg);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    ::astarteplatform::msghub::AstarteData* data_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_astarteplatform_2fmsghub_2fproperty_2eproto;
};
// -------------------------------------------------------------------

class Property final
    : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:astarteplatform.msghub.Property) */ {
 public:
  inline Property() : Property(nullptr) {}
  ~Property() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(Property* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(Property));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR Property(
      ::google::protobuf::internal::ConstantInitialized);

  inline Property(const Property& from) : Property(nullptr, from) {}
  inline Property(Property&& from) noexcept
      : Property(nullptr, std::move(from)) {}
  inline Property& operator=(const Property& from) {
    CopyFrom(from);
    return *this;
  }
  inline Property& operator=(Property&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Property& default_instance() {
    return *internal_default_instance();
  }
  static inline const Property* internal_default_instance() {
    return reinterpret_cast<const Property*>(
        &_Property_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 1;
  friend void swap(Property& a, Property& b) { a.Swap(&b); }
  inline void Swap(Property* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Property* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Property* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<Property>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const Property& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const Property& from) { Property::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(Property* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "astarteplatform.msghub.Property"; }

 protected:
  explicit Property(::google::protobuf::Arena* arena);
  Property(::google::protobuf::Arena* arena, const Property& from);
  Property(::google::protobuf::Arena* arena, Property&& from) noexcept
      : Property(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kInterfaceNameFieldNumber = 1,
    kPathFieldNumber = 2,
    kDataFieldNumber = 5,
    kVersionMajorFieldNumber = 3,
    kOwnershipFieldNumber = 4,
  };
  // string interface_name = 1;
  void clear_interface_name() ;
  const std::string& interface_name() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_interface_name(Arg_&& arg, Args_... args);
  std::string* mutable_interface_name();
  PROTOBUF_NODISCARD std::string* release_interface_name();
  void set_allocated_interface_name(std::string* value);

  private:
  const std::string& _internal_interface_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_interface_name(
      const std::string& value);
  std::string* _internal_mutable_interface_name();

  public:
  // string path = 2;
  void clear_path() ;
  const std::string& path() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_path(Arg_&& arg, Args_... args);
  std::string* mutable_path();
  PROTOBUF_NODISCARD std::string* release_path();
  void set_allocated_path(std::string* value);

  private:
  const std::string& _internal_path() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_path(
      const std::string& value);
  std::string* _internal_mutable_path();

  public:
  // .astarteplatform.msghub.AstarteData data = 5;
  bool has_data() const;
  void clear_data() ;
  const ::astarteplatform::msghub::AstarteData& data() const;
  PROTOBUF_NODISCARD ::astarteplatform::msghub::AstarteData* release_data();
  ::astarteplatform::msghub::AstarteData* mutable_data();
  void set_allocated_data(::astarteplatform::msghub::AstarteData* value);
  void unsafe_arena_set_allocated_data(::astarteplatform::msghub::AstarteData* value);
  ::astarteplatform::msghub::AstarteData* unsafe_arena_release_data();

  private:
  const ::astarteplatform::msghub::AstarteData& _internal_data() const;
  ::astarteplatform::msghub::AstarteData* _internal_mutable_data();

  public:
  // int32 version_major = 3;
  void clear_version_major() ;
  ::int32_t version_major() const;
  void set_version_major(::int32_t value);

  private:
  ::int32_t _internal_version_major() const;
  void _internal_set_version_major(::int32_t value);

  public:
  // .astarteplatform.msghub.Ownership ownership = 4;
  void clear_ownership() ;
  ::astarteplatform::msghub::Ownership ownership() const;
  void set_ownership(::astarteplatform::msghub::Ownership value);

  private:
  ::astarteplatform::msghub::Ownership _internal_ownership() const;
  void _internal_set_ownership(::astarteplatform::msghub::Ownership value);

  public:
  // @@protoc_insertion_point(class_scope:astarteplatform.msghub.Property)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      3, 5, 1,
      58, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const Property& from_msg);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::internal::ArenaStringPtr interface_name_;
    ::google::protobuf::internal::ArenaStringPtr path_;
    ::astarteplatform::msghub::AstarteData* data_;
    ::int32_t version_major_;
    int ownership_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_astarteplatform_2fmsghub_2fproperty_2eproto;
};
// -------------------------------------------------------------------

class StoredProperties final
    : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:astarteplatform.msghub.StoredProperties) */ {
 public:
  inline StoredProperties() : StoredProperties(nullptr) {}
  ~StoredProperties() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(StoredProperties* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(StoredProperties));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR StoredProperties(
      ::google::protobuf::internal::ConstantInitialized);

  inline StoredProperties(const StoredProperties& from) : StoredProperties(nullptr, from) {}
  inline StoredProperties(StoredProperties&& from) noexcept
      : StoredProperties(nullptr, std::move(from)) {}
  inline StoredProperties& operator=(const StoredProperties& from) {
    CopyFrom(from);
    return *this;
  }
  inline StoredProperties& operator=(StoredProperties&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const StoredProperties& default_instance() {
    return *internal_default_instance();
  }
  static inline const StoredProperties* internal_default_instance() {
    return reinterpret_cast<const StoredProperties*>(
        &_StoredProperties_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 2;
  friend void swap(StoredProperties& a, StoredProperties& b) { a.Swap(&b); }
  inline void Swap(StoredProperties* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(StoredProperties* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  StoredProperties* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<StoredProperties>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const StoredProperties& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const StoredProperties& from) { StoredProperties::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(StoredProperties* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "astarteplatform.msghub.StoredProperties"; }

 protected:
  explicit StoredProperties(::google::protobuf::Arena* arena);
  StoredProperties(::google::protobuf::Arena* arena, const StoredProperties& from);
  StoredProperties(::google::protobuf::Arena* arena, StoredProperties&& from) noexcept
      : StoredProperties(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kPropertiesFieldNumber = 1,
  };
  // repeated .astarteplatform.msghub.Property properties = 1;
  int properties_size() const;
  private:
  int _internal_properties_size() const;

  public:
  void clear_properties() ;
  ::astarteplatform::msghub::Property* mutable_properties(int index);
  ::google::protobuf::RepeatedPtrField<::astarteplatform::msghub::Property>* mutable_properties();

  private:
  const ::google::protobuf::RepeatedPtrField<::astarteplatform::msghub::Property>& _internal_properties() const;
  ::google::protobuf::RepeatedPtrField<::astarteplatform::msghub::Property>* _internal_mutable_properties();
  public:
  const ::astarteplatform::msghub::Property& properties(int index) const;
  ::astarteplatform::msghub::Property* add_properties();
  const ::google::protobuf::RepeatedPtrField<::astarteplatform::msghub::Property>& properties() const;
  // @@protoc_insertion_point(class_scope:astarteplatform.msghub.StoredProperties)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 1, 1,
      0, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const StoredProperties& from_msg);
    ::google::protobuf::RepeatedPtrField< ::astarteplatform::msghub::Property > properties_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_astarteplatform_2fmsghub_2fproperty_2eproto;
};

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// PropertyData

// optional .astarteplatform.msghub.AstarteData data = 1;
inline bool PropertyData::has_data() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.data_ != nullptr);
  return value;
}
inline const ::astarteplatform::msghub::AstarteData& PropertyData::_internal_data() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::astarteplatform::msghub::AstarteData* p = _impl_.data_;
  return p != nullptr ? *p : reinterpret_cast<const ::astarteplatform::msghub::AstarteData&>(::astarteplatform::msghub::_AstarteData_default_instance_);
}
inline const ::astarteplatform::msghub::AstarteData& PropertyData::data() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:astarteplatform.msghub.PropertyData.data)
  return _internal_data();
}
inline void PropertyData::unsafe_arena_set_allocated_data(::astarteplatform::msghub::AstarteData* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.data_);
  }
  _impl_.data_ = reinterpret_cast<::astarteplatform::msghub::AstarteData*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:astarteplatform.msghub.PropertyData.data)
}
inline ::astarteplatform::msghub::AstarteData* PropertyData::release_data() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::astarteplatform::msghub::AstarteData* released = _impl_.data_;
  _impl_.data_ = nullptr;
  if (::google::protobuf::internal::DebugHardenForceCopyInRelease()) {
    auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    if (GetArena() == nullptr) {
      delete old;
    }
  } else {
    if (GetArena() != nullptr) {
      released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    }
  }
  return released;
}
inline ::astarteplatform::msghub::AstarteData* PropertyData::unsafe_arena_release_data() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:astarteplatform.msghub.PropertyData.data)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::astarteplatform::msghub::AstarteData* temp = _impl_.data_;
  _impl_.data_ = nullptr;
  return temp;
}
inline ::astarteplatform::msghub::AstarteData* PropertyData::_internal_mutable_data() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.data_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::astarteplatform::msghub::AstarteData>(GetArena());
    _impl_.data_ = reinterpret_cast<::astarteplatform::msghub::AstarteData*>(p);
  }
  return _impl_.data_;
}
inline ::astarteplatform::msghub::AstarteData* PropertyData::mutable_data() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000001u;
  ::astarteplatform::msghub::AstarteData* _msg = _internal_mutable_data();
  // @@protoc_insertion_point(field_mutable:astarteplatform.msghub.PropertyData.data)
  return _msg;
}
inline void PropertyData::set_allocated_data(::astarteplatform::msghub::AstarteData* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.data_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.data_ = reinterpret_cast<::astarteplatform::msghub::AstarteData*>(value);
  // @@protoc_insertion_point(field_set_allocated:astarteplatform.msghub.PropertyData.data)
}

// -------------------------------------------------------------------

// Property

// string interface_name = 1;
inline void Property::clear_interface_name() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.interface_name_.ClearToEmpty();
}
inline const std::string& Property::interface_name() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:astarteplatform.msghub.Property.interface_name)
  return _internal_interface_name();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Property::set_interface_name(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.interface_name_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:astarteplatform.msghub.Property.interface_name)
}
inline std::string* Property::mutable_interface_name() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_interface_name();
  // @@protoc_insertion_point(field_mutable:astarteplatform.msghub.Property.interface_name)
  return _s;
}
inline const std::string& Property::_internal_interface_name() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.interface_name_.Get();
}
inline void Property::_internal_set_interface_name(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.interface_name_.Set(value, GetArena());
}
inline std::string* Property::_internal_mutable_interface_name() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.interface_name_.Mutable( GetArena());
}
inline std::string* Property::release_interface_name() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:astarteplatform.msghub.Property.interface_name)
  return _impl_.interface_name_.Release();
}
inline void Property::set_allocated_interface_name(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.interface_name_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.interface_name_.IsDefault()) {
    _impl_.interface_name_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:astarteplatform.msghub.Property.interface_name)
}

// string path = 2;
inline void Property::clear_path() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.path_.ClearToEmpty();
}
inline const std::string& Property::path() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:astarteplatform.msghub.Property.path)
  return _internal_path();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Property::set_path(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.path_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:astarteplatform.msghub.Property.path)
}
inline std::string* Property::mutable_path() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_path();
  // @@protoc_insertion_point(field_mutable:astarteplatform.msghub.Property.path)
  return _s;
}
inline const std::string& Property::_internal_path() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.path_.Get();
}
inline void Property::_internal_set_path(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.path_.Set(value, GetArena());
}
inline std::string* Property::_internal_mutable_path() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.path_.Mutable( GetArena());
}
inline std::string* Property::release_path() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:astarteplatform.msghub.Property.path)
  return _impl_.path_.Release();
}
inline void Property::set_allocated_path(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.path_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.path_.IsDefault()) {
    _impl_.path_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:astarteplatform.msghub.Property.path)
}

// int32 version_major = 3;
inline void Property::clear_version_major() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.version_major_ = 0;
}
inline ::int32_t Property::version_major() const {
  // @@protoc_insertion_point(field_get:astarteplatform.msghub.Property.version_major)
  return _internal_version_major();
}
inline void Property::set_version_major(::int32_t value) {
  _internal_set_version_major(value);
  // @@protoc_insertion_point(field_set:astarteplatform.msghub.Property.version_major)
}
inline ::int32_t Property::_internal_version_major() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.version_major_;
}
inline void Property::_internal_set_version_major(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.version_major_ = value;
}

// .astarteplatform.msghub.Ownership ownership = 4;
inline void Property::clear_ownership() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.ownership_ = 0;
}
inline ::astarteplatform::msghub::Ownership Property::ownership() const {
  // @@protoc_insertion_point(field_get:astarteplatform.msghub.Property.ownership)
  return _internal_ownership();
}
inline void Property::set_ownership(::astarteplatform::msghub::Ownership value) {
  _internal_set_ownership(value);
  // @@protoc_insertion_point(field_set:astarteplatform.msghub.Property.ownership)
}
inline ::astarteplatform::msghub::Ownership Property::_internal_ownership() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return static_cast<::astarteplatform::msghub::Ownership>(_impl_.ownership_);
}
inline void Property::_internal_set_ownership(::astarteplatform::msghub::Ownership value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.ownership_ = value;
}

// .astarteplatform.msghub.AstarteData data = 5;
inline bool Property::has_data() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.data_ != nullptr);
  return value;
}
inline const ::astarteplatform::msghub::AstarteData& Property::_internal_data() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::astarteplatform::msghub::AstarteData* p = _impl_.data_;
  return p != nullptr ? *p : reinterpret_cast<const ::astarteplatform::msghub::AstarteData&>(::astarteplatform::msghub::_AstarteData_default_instance_);
}
inline const ::astarteplatform::msghub::AstarteData& Property::data() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:astarteplatform.msghub.Property.data)
  return _internal_data();
}
inline void Property::unsafe_arena_set_allocated_data(::astarteplatform::msghub::AstarteData* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.data_);
  }
  _impl_.data_ = reinterpret_cast<::astarteplatform::msghub::AstarteData*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:astarteplatform.msghub.Property.data)
}
inline ::astarteplatform::msghub::AstarteData* Property::release_data() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::astarteplatform::msghub::AstarteData* released = _impl_.data_;
  _impl_.data_ = nullptr;
  if (::google::protobuf::internal::DebugHardenForceCopyInRelease()) {
    auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    if (GetArena() == nullptr) {
      delete old;
    }
  } else {
    if (GetArena() != nullptr) {
      released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    }
  }
  return released;
}
inline ::astarteplatform::msghub::AstarteData* Property::unsafe_arena_release_data() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:astarteplatform.msghub.Property.data)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::astarteplatform::msghub::AstarteData* temp = _impl_.data_;
  _impl_.data_ = nullptr;
  return temp;
}
inline ::astarteplatform::msghub::AstarteData* Property::_internal_mutable_data() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.data_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::astarteplatform::msghub::AstarteData>(GetArena());
    _impl_.data_ = reinterpret_cast<::astarteplatform::msghub::AstarteData*>(p);
  }
  return _impl_.data_;
}
inline ::astarteplatform::msghub::AstarteData* Property::mutable_data() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000001u;
  ::astarteplatform::msghub::AstarteData* _msg = _internal_mutable_data();
  // @@protoc_insertion_point(field_mutable:astarteplatform.msghub.Property.data)
  return _msg;
}
inline void Property::set_allocated_data(::astarteplatform::msghub::AstarteData* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.data_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.data_ = reinterpret_cast<::astarteplatform::msghub::AstarteData*>(value);
  // @@protoc_insertion_point(field_set_allocated:astarteplatform.msghub.Property.data)
}

// -------------------------------------------------------------------

// StoredProperties

// repeated .astarteplatform.msghub.Property properties = 1;
inline int StoredProperties::_internal_properties_size() const {
  return _internal_properties().size();
}
inline int StoredProperties::properties_size() const {
  return _internal_properties_size();
}
inline void StoredProperties::clear_properties() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.properties_.Clear();
}
inline ::astarteplatform::msghub::Property* StoredProperties::mutable_properties(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:astarteplatform.msghub.StoredProperties.properties)
  return _internal_mutable_properties()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField<::astarteplatform::msghub::Property>* StoredProperties::mutable_properties()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:astarteplatform.msghub.StoredProperties.properties)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_properties();
}
inline const ::astarteplatform::msghub::Property& StoredProperties::properties(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:astarteplatform.msghub.StoredProperties.properties)
  return _internal_properties().Get(index);
}
inline ::astarteplatform::msghub::Property* StoredProperties::add_properties() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::astarteplatform::msghub::Property* _add = _internal_mutable_properties()->Add();
  // @@protoc_insertion_point(field_add:astarteplatform.msghub.StoredProperties.properties)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField<::astarteplatform::msghub::Property>& StoredProperties::properties() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:astarteplatform.msghub.StoredProperties.properties)
  return _internal_properties();
}
inline const ::google::protobuf::RepeatedPtrField<::astarteplatform::msghub::Property>&
StoredProperties::_internal_properties() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.properties_;
}
inline ::google::protobuf::RepeatedPtrField<::astarteplatform::msghub::Property>*
StoredProperties::_internal_mutable_properties() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.properties_;
}

// -------------------------------------------------------------------

// PropertyFilter

// optional .astarteplatform.msghub.Ownership ownership = 1;
inline bool PropertyFilter::has_ownership() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void PropertyFilter::clear_ownership() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.ownership_ = 0;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline ::astarteplatform::msghub::Ownership PropertyFilter::ownership() const {
  // @@protoc_insertion_point(field_get:astarteplatform.msghub.PropertyFilter.ownership)
  return _internal_ownership();
}
inline void PropertyFilter::set_ownership(::astarteplatform::msghub::Ownership value) {
  _internal_set_ownership(value);
  _impl_._has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_set:astarteplatform.msghub.PropertyFilter.ownership)
}
inline ::astarteplatform::msghub::Ownership PropertyFilter::_internal_ownership() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return static_cast<::astarteplatform::msghub::Ownership>(_impl_.ownership_);
}
inline void PropertyFilter::_internal_set_ownership(::astarteplatform::msghub::Ownership value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.ownership_ = value;
}

// -------------------------------------------------------------------

// PropertyIdentifier

// string interface_name = 1;
inline void PropertyIdentifier::clear_interface_name() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.interface_name_.ClearToEmpty();
}
inline const std::string& PropertyIdentifier::interface_name() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:astarteplatform.msghub.PropertyIdentifier.interface_name)
  return _internal_interface_name();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void PropertyIdentifier::set_interface_name(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.interface_name_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:astarteplatform.msghub.PropertyIdentifier.interface_name)
}
inline std::string* PropertyIdentifier::mutable_interface_name() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_interface_name();
  // @@protoc_insertion_point(field_mutable:astarteplatform.msghub.PropertyIdentifier.interface_name)
  return _s;
}
inline const std::string& PropertyIdentifier::_internal_interface_name() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.interface_name_.Get();
}
inline void PropertyIdentifier::_internal_set_interface_name(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.interface_name_.Set(value, GetArena());
}
inline std::string* PropertyIdentifier::_internal_mutable_interface_name() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.interface_name_.Mutable( GetArena());
}
inline std::string* PropertyIdentifier::release_interface_name() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:astarteplatform.msghub.PropertyIdentifier.interface_name)
  return _impl_.interface_name_.Release();
}
inline void PropertyIdentifier::set_allocated_interface_name(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.interface_name_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.interface_name_.IsDefault()) {
    _impl_.interface_name_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:astarteplatform.msghub.PropertyIdentifier.interface_name)
}

// string path = 2;
inline void PropertyIdentifier::clear_path() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.path_.ClearToEmpty();
}
inline const std::string& PropertyIdentifier::path() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:astarteplatform.msghub.PropertyIdentifier.path)
  return _internal_path();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void PropertyIdentifier::set_path(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.path_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:astarteplatform.msghub.PropertyIdentifier.path)
}
inline std::string* PropertyIdentifier::mutable_path() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_path();
  // @@protoc_insertion_point(field_mutable:astarteplatform.msghub.PropertyIdentifier.path)
  return _s;
}
inline const std::string& PropertyIdentifier::_internal_path() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.path_.Get();
}
inline void PropertyIdentifier::_internal_set_path(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.path_.Set(value, GetArena());
}
inline std::string* PropertyIdentifier::_internal_mutable_path() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.path_.Mutable( GetArena());
}
inline std::string* PropertyIdentifier::release_path() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:astarteplatform.msghub.PropertyIdentifier.path)
  return _impl_.path_.Release();
}
inline void PropertyIdentifier::set_allocated_path(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.path_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.path_.IsDefault()) {
    _impl_.path_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:astarteplatform.msghub.PropertyIdentifier.path)
}

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)
}  // namespace msghub
}  // namespace astarteplatform


// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // astarteplatform_2fmsghub_2fproperty_2eproto_2epb_2eh
