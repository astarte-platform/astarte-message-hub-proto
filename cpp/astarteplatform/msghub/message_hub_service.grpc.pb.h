// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: astarteplatform/msghub/message_hub_service.proto
// Original file comments:
//
// This file is part of Astarte.
//
// Copyright 2022 SECO Mind Srl
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//   http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// SPDX-License-Identifier: Apache-2.0
//
#ifndef GRPC_astarteplatform_2fmsghub_2fmessage_5fhub_5fservice_2eproto__INCLUDED
#define GRPC_astarteplatform_2fmsghub_2fmessage_5fhub_5fservice_2eproto__INCLUDED

#include "astarteplatform/msghub/message_hub_service.pb.h"

#include <functional>
#include <grpcpp/generic/async_generic_service.h>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/support/client_callback.h>
#include <grpcpp/client_context.h>
#include <grpcpp/completion_queue.h>
#include <grpcpp/support/message_allocator.h>
#include <grpcpp/support/method_handler.h>
#include <grpcpp/impl/proto_utils.h>
#include <grpcpp/impl/rpc_method.h>
#include <grpcpp/support/server_callback.h>
#include <grpcpp/impl/server_callback_handlers.h>
#include <grpcpp/server_context.h>
#include <grpcpp/impl/service_type.h>
#include <grpcpp/support/status.h>
#include <grpcpp/support/stub_options.h>
#include <grpcpp/support/sync_stream.h>

namespace astarteplatform {
namespace msghub {

class MessageHub final {
 public:
  static constexpr char const* service_full_name() {
    return "astarteplatform.msghub.MessageHub";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    // This function should be used to attach a node to an instance of the Astarte message hub.
    // Returns a data stream from the Astarte message hub.
    std::unique_ptr< ::grpc::ClientReaderInterface< ::astarteplatform::msghub::MessageHubEvent>> Attach(::grpc::ClientContext* context, const ::astarteplatform::msghub::Node& request) {
      return std::unique_ptr< ::grpc::ClientReaderInterface< ::astarteplatform::msghub::MessageHubEvent>>(AttachRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::astarteplatform::msghub::MessageHubEvent>> AsyncAttach(::grpc::ClientContext* context, const ::astarteplatform::msghub::Node& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::astarteplatform::msghub::MessageHubEvent>>(AsyncAttachRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::astarteplatform::msghub::MessageHubEvent>> PrepareAsyncAttach(::grpc::ClientContext* context, const ::astarteplatform::msghub::Node& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::astarteplatform::msghub::MessageHubEvent>>(PrepareAsyncAttachRaw(context, request, cq));
    }
    // This function should be used to send an `AstarteMessage` to Astarte. 
    virtual ::grpc::Status Send(::grpc::ClientContext* context, const ::astarteplatform::msghub::AstarteMessage& request, ::google::protobuf::Empty* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>> AsyncSend(::grpc::ClientContext* context, const ::astarteplatform::msghub::AstarteMessage& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>>(AsyncSendRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>> PrepareAsyncSend(::grpc::ClientContext* context, const ::astarteplatform::msghub::AstarteMessage& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>>(PrepareAsyncSendRaw(context, request, cq));
    }
    // This function should be used to detach a node from an instance of the Astarte message hub. 
    virtual ::grpc::Status Detach(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::google::protobuf::Empty* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>> AsyncDetach(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>>(AsyncDetachRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>> PrepareAsyncDetach(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>>(PrepareAsyncDetachRaw(context, request, cq));
    }
    // This function should be used to add one or more interfaces to an instance of the Astarte message hub. 
    virtual ::grpc::Status AddInterfaces(::grpc::ClientContext* context, const ::astarteplatform::msghub::InterfacesJson& request, ::google::protobuf::Empty* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>> AsyncAddInterfaces(::grpc::ClientContext* context, const ::astarteplatform::msghub::InterfacesJson& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>>(AsyncAddInterfacesRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>> PrepareAsyncAddInterfaces(::grpc::ClientContext* context, const ::astarteplatform::msghub::InterfacesJson& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>>(PrepareAsyncAddInterfacesRaw(context, request, cq));
    }
    // This function should be used to remove one or more interfaces from an instance of the Astarte message hub. 
    virtual ::grpc::Status RemoveInterfaces(::grpc::ClientContext* context, const ::astarteplatform::msghub::InterfacesName& request, ::google::protobuf::Empty* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>> AsyncRemoveInterfaces(::grpc::ClientContext* context, const ::astarteplatform::msghub::InterfacesName& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>>(AsyncRemoveInterfacesRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>> PrepareAsyncRemoveInterfaces(::grpc::ClientContext* context, const ::astarteplatform::msghub::InterfacesName& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>>(PrepareAsyncRemoveInterfacesRaw(context, request, cq));
    }
    // Get properties associated with the passed interfaces. 
    virtual ::grpc::Status GetProperties(::grpc::ClientContext* context, const ::astarteplatform::msghub::InterfaceName& request, ::astarteplatform::msghub::StoredProperties* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::astarteplatform::msghub::StoredProperties>> AsyncGetProperties(::grpc::ClientContext* context, const ::astarteplatform::msghub::InterfaceName& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::astarteplatform::msghub::StoredProperties>>(AsyncGetPropertiesRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::astarteplatform::msghub::StoredProperties>> PrepareAsyncGetProperties(::grpc::ClientContext* context, const ::astarteplatform::msghub::InterfaceName& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::astarteplatform::msghub::StoredProperties>>(PrepareAsyncGetPropertiesRaw(context, request, cq));
    }
    // Get all the properties, allowing also filtering by interface ownership. 
    virtual ::grpc::Status GetAllProperties(::grpc::ClientContext* context, const ::astarteplatform::msghub::PropertyFilter& request, ::astarteplatform::msghub::StoredProperties* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::astarteplatform::msghub::StoredProperties>> AsyncGetAllProperties(::grpc::ClientContext* context, const ::astarteplatform::msghub::PropertyFilter& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::astarteplatform::msghub::StoredProperties>>(AsyncGetAllPropertiesRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::astarteplatform::msghub::StoredProperties>> PrepareAsyncGetAllProperties(::grpc::ClientContext* context, const ::astarteplatform::msghub::PropertyFilter& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::astarteplatform::msghub::StoredProperties>>(PrepareAsyncGetAllPropertiesRaw(context, request, cq));
    }
    // Get a specific property by its identifier, could be an unset property  
    virtual ::grpc::Status GetProperty(::grpc::ClientContext* context, const ::astarteplatform::msghub::PropertyIdentifier& request, ::astarteplatform::msghub::AstartePropertyIndividual* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::astarteplatform::msghub::AstartePropertyIndividual>> AsyncGetProperty(::grpc::ClientContext* context, const ::astarteplatform::msghub::PropertyIdentifier& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::astarteplatform::msghub::AstartePropertyIndividual>>(AsyncGetPropertyRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::astarteplatform::msghub::AstartePropertyIndividual>> PrepareAsyncGetProperty(::grpc::ClientContext* context, const ::astarteplatform::msghub::PropertyIdentifier& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::astarteplatform::msghub::AstartePropertyIndividual>>(PrepareAsyncGetPropertyRaw(context, request, cq));
    }
    class async_interface {
     public:
      virtual ~async_interface() {}
      // This function should be used to attach a node to an instance of the Astarte message hub.
      // Returns a data stream from the Astarte message hub.
      virtual void Attach(::grpc::ClientContext* context, const ::astarteplatform::msghub::Node* request, ::grpc::ClientReadReactor< ::astarteplatform::msghub::MessageHubEvent>* reactor) = 0;
      // This function should be used to send an `AstarteMessage` to Astarte. 
      virtual void Send(::grpc::ClientContext* context, const ::astarteplatform::msghub::AstarteMessage* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)>) = 0;
      virtual void Send(::grpc::ClientContext* context, const ::astarteplatform::msghub::AstarteMessage* request, ::google::protobuf::Empty* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // This function should be used to detach a node from an instance of the Astarte message hub. 
      virtual void Detach(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)>) = 0;
      virtual void Detach(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::google::protobuf::Empty* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // This function should be used to add one or more interfaces to an instance of the Astarte message hub. 
      virtual void AddInterfaces(::grpc::ClientContext* context, const ::astarteplatform::msghub::InterfacesJson* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)>) = 0;
      virtual void AddInterfaces(::grpc::ClientContext* context, const ::astarteplatform::msghub::InterfacesJson* request, ::google::protobuf::Empty* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // This function should be used to remove one or more interfaces from an instance of the Astarte message hub. 
      virtual void RemoveInterfaces(::grpc::ClientContext* context, const ::astarteplatform::msghub::InterfacesName* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)>) = 0;
      virtual void RemoveInterfaces(::grpc::ClientContext* context, const ::astarteplatform::msghub::InterfacesName* request, ::google::protobuf::Empty* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // Get properties associated with the passed interfaces. 
      virtual void GetProperties(::grpc::ClientContext* context, const ::astarteplatform::msghub::InterfaceName* request, ::astarteplatform::msghub::StoredProperties* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetProperties(::grpc::ClientContext* context, const ::astarteplatform::msghub::InterfaceName* request, ::astarteplatform::msghub::StoredProperties* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // Get all the properties, allowing also filtering by interface ownership. 
      virtual void GetAllProperties(::grpc::ClientContext* context, const ::astarteplatform::msghub::PropertyFilter* request, ::astarteplatform::msghub::StoredProperties* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetAllProperties(::grpc::ClientContext* context, const ::astarteplatform::msghub::PropertyFilter* request, ::astarteplatform::msghub::StoredProperties* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // Get a specific property by its identifier, could be an unset property  
      virtual void GetProperty(::grpc::ClientContext* context, const ::astarteplatform::msghub::PropertyIdentifier* request, ::astarteplatform::msghub::AstartePropertyIndividual* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetProperty(::grpc::ClientContext* context, const ::astarteplatform::msghub::PropertyIdentifier* request, ::astarteplatform::msghub::AstartePropertyIndividual* response, ::grpc::ClientUnaryReactor* reactor) = 0;
    };
    typedef class async_interface experimental_async_interface;
    virtual class async_interface* async() { return nullptr; }
    class async_interface* experimental_async() { return async(); }
   private:
    virtual ::grpc::ClientReaderInterface< ::astarteplatform::msghub::MessageHubEvent>* AttachRaw(::grpc::ClientContext* context, const ::astarteplatform::msghub::Node& request) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::astarteplatform::msghub::MessageHubEvent>* AsyncAttachRaw(::grpc::ClientContext* context, const ::astarteplatform::msghub::Node& request, ::grpc::CompletionQueue* cq, void* tag) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::astarteplatform::msghub::MessageHubEvent>* PrepareAsyncAttachRaw(::grpc::ClientContext* context, const ::astarteplatform::msghub::Node& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>* AsyncSendRaw(::grpc::ClientContext* context, const ::astarteplatform::msghub::AstarteMessage& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>* PrepareAsyncSendRaw(::grpc::ClientContext* context, const ::astarteplatform::msghub::AstarteMessage& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>* AsyncDetachRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>* PrepareAsyncDetachRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>* AsyncAddInterfacesRaw(::grpc::ClientContext* context, const ::astarteplatform::msghub::InterfacesJson& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>* PrepareAsyncAddInterfacesRaw(::grpc::ClientContext* context, const ::astarteplatform::msghub::InterfacesJson& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>* AsyncRemoveInterfacesRaw(::grpc::ClientContext* context, const ::astarteplatform::msghub::InterfacesName& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>* PrepareAsyncRemoveInterfacesRaw(::grpc::ClientContext* context, const ::astarteplatform::msghub::InterfacesName& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::astarteplatform::msghub::StoredProperties>* AsyncGetPropertiesRaw(::grpc::ClientContext* context, const ::astarteplatform::msghub::InterfaceName& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::astarteplatform::msghub::StoredProperties>* PrepareAsyncGetPropertiesRaw(::grpc::ClientContext* context, const ::astarteplatform::msghub::InterfaceName& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::astarteplatform::msghub::StoredProperties>* AsyncGetAllPropertiesRaw(::grpc::ClientContext* context, const ::astarteplatform::msghub::PropertyFilter& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::astarteplatform::msghub::StoredProperties>* PrepareAsyncGetAllPropertiesRaw(::grpc::ClientContext* context, const ::astarteplatform::msghub::PropertyFilter& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::astarteplatform::msghub::AstartePropertyIndividual>* AsyncGetPropertyRaw(::grpc::ClientContext* context, const ::astarteplatform::msghub::PropertyIdentifier& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::astarteplatform::msghub::AstartePropertyIndividual>* PrepareAsyncGetPropertyRaw(::grpc::ClientContext* context, const ::astarteplatform::msghub::PropertyIdentifier& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());
    std::unique_ptr< ::grpc::ClientReader< ::astarteplatform::msghub::MessageHubEvent>> Attach(::grpc::ClientContext* context, const ::astarteplatform::msghub::Node& request) {
      return std::unique_ptr< ::grpc::ClientReader< ::astarteplatform::msghub::MessageHubEvent>>(AttachRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::astarteplatform::msghub::MessageHubEvent>> AsyncAttach(::grpc::ClientContext* context, const ::astarteplatform::msghub::Node& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::astarteplatform::msghub::MessageHubEvent>>(AsyncAttachRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::astarteplatform::msghub::MessageHubEvent>> PrepareAsyncAttach(::grpc::ClientContext* context, const ::astarteplatform::msghub::Node& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::astarteplatform::msghub::MessageHubEvent>>(PrepareAsyncAttachRaw(context, request, cq));
    }
    ::grpc::Status Send(::grpc::ClientContext* context, const ::astarteplatform::msghub::AstarteMessage& request, ::google::protobuf::Empty* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>> AsyncSend(::grpc::ClientContext* context, const ::astarteplatform::msghub::AstarteMessage& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>>(AsyncSendRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>> PrepareAsyncSend(::grpc::ClientContext* context, const ::astarteplatform::msghub::AstarteMessage& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>>(PrepareAsyncSendRaw(context, request, cq));
    }
    ::grpc::Status Detach(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::google::protobuf::Empty* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>> AsyncDetach(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>>(AsyncDetachRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>> PrepareAsyncDetach(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>>(PrepareAsyncDetachRaw(context, request, cq));
    }
    ::grpc::Status AddInterfaces(::grpc::ClientContext* context, const ::astarteplatform::msghub::InterfacesJson& request, ::google::protobuf::Empty* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>> AsyncAddInterfaces(::grpc::ClientContext* context, const ::astarteplatform::msghub::InterfacesJson& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>>(AsyncAddInterfacesRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>> PrepareAsyncAddInterfaces(::grpc::ClientContext* context, const ::astarteplatform::msghub::InterfacesJson& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>>(PrepareAsyncAddInterfacesRaw(context, request, cq));
    }
    ::grpc::Status RemoveInterfaces(::grpc::ClientContext* context, const ::astarteplatform::msghub::InterfacesName& request, ::google::protobuf::Empty* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>> AsyncRemoveInterfaces(::grpc::ClientContext* context, const ::astarteplatform::msghub::InterfacesName& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>>(AsyncRemoveInterfacesRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>> PrepareAsyncRemoveInterfaces(::grpc::ClientContext* context, const ::astarteplatform::msghub::InterfacesName& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>>(PrepareAsyncRemoveInterfacesRaw(context, request, cq));
    }
    ::grpc::Status GetProperties(::grpc::ClientContext* context, const ::astarteplatform::msghub::InterfaceName& request, ::astarteplatform::msghub::StoredProperties* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::astarteplatform::msghub::StoredProperties>> AsyncGetProperties(::grpc::ClientContext* context, const ::astarteplatform::msghub::InterfaceName& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::astarteplatform::msghub::StoredProperties>>(AsyncGetPropertiesRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::astarteplatform::msghub::StoredProperties>> PrepareAsyncGetProperties(::grpc::ClientContext* context, const ::astarteplatform::msghub::InterfaceName& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::astarteplatform::msghub::StoredProperties>>(PrepareAsyncGetPropertiesRaw(context, request, cq));
    }
    ::grpc::Status GetAllProperties(::grpc::ClientContext* context, const ::astarteplatform::msghub::PropertyFilter& request, ::astarteplatform::msghub::StoredProperties* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::astarteplatform::msghub::StoredProperties>> AsyncGetAllProperties(::grpc::ClientContext* context, const ::astarteplatform::msghub::PropertyFilter& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::astarteplatform::msghub::StoredProperties>>(AsyncGetAllPropertiesRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::astarteplatform::msghub::StoredProperties>> PrepareAsyncGetAllProperties(::grpc::ClientContext* context, const ::astarteplatform::msghub::PropertyFilter& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::astarteplatform::msghub::StoredProperties>>(PrepareAsyncGetAllPropertiesRaw(context, request, cq));
    }
    ::grpc::Status GetProperty(::grpc::ClientContext* context, const ::astarteplatform::msghub::PropertyIdentifier& request, ::astarteplatform::msghub::AstartePropertyIndividual* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::astarteplatform::msghub::AstartePropertyIndividual>> AsyncGetProperty(::grpc::ClientContext* context, const ::astarteplatform::msghub::PropertyIdentifier& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::astarteplatform::msghub::AstartePropertyIndividual>>(AsyncGetPropertyRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::astarteplatform::msghub::AstartePropertyIndividual>> PrepareAsyncGetProperty(::grpc::ClientContext* context, const ::astarteplatform::msghub::PropertyIdentifier& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::astarteplatform::msghub::AstartePropertyIndividual>>(PrepareAsyncGetPropertyRaw(context, request, cq));
    }
    class async final :
      public StubInterface::async_interface {
     public:
      void Attach(::grpc::ClientContext* context, const ::astarteplatform::msghub::Node* request, ::grpc::ClientReadReactor< ::astarteplatform::msghub::MessageHubEvent>* reactor) override;
      void Send(::grpc::ClientContext* context, const ::astarteplatform::msghub::AstarteMessage* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)>) override;
      void Send(::grpc::ClientContext* context, const ::astarteplatform::msghub::AstarteMessage* request, ::google::protobuf::Empty* response, ::grpc::ClientUnaryReactor* reactor) override;
      void Detach(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)>) override;
      void Detach(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::google::protobuf::Empty* response, ::grpc::ClientUnaryReactor* reactor) override;
      void AddInterfaces(::grpc::ClientContext* context, const ::astarteplatform::msghub::InterfacesJson* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)>) override;
      void AddInterfaces(::grpc::ClientContext* context, const ::astarteplatform::msghub::InterfacesJson* request, ::google::protobuf::Empty* response, ::grpc::ClientUnaryReactor* reactor) override;
      void RemoveInterfaces(::grpc::ClientContext* context, const ::astarteplatform::msghub::InterfacesName* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)>) override;
      void RemoveInterfaces(::grpc::ClientContext* context, const ::astarteplatform::msghub::InterfacesName* request, ::google::protobuf::Empty* response, ::grpc::ClientUnaryReactor* reactor) override;
      void GetProperties(::grpc::ClientContext* context, const ::astarteplatform::msghub::InterfaceName* request, ::astarteplatform::msghub::StoredProperties* response, std::function<void(::grpc::Status)>) override;
      void GetProperties(::grpc::ClientContext* context, const ::astarteplatform::msghub::InterfaceName* request, ::astarteplatform::msghub::StoredProperties* response, ::grpc::ClientUnaryReactor* reactor) override;
      void GetAllProperties(::grpc::ClientContext* context, const ::astarteplatform::msghub::PropertyFilter* request, ::astarteplatform::msghub::StoredProperties* response, std::function<void(::grpc::Status)>) override;
      void GetAllProperties(::grpc::ClientContext* context, const ::astarteplatform::msghub::PropertyFilter* request, ::astarteplatform::msghub::StoredProperties* response, ::grpc::ClientUnaryReactor* reactor) override;
      void GetProperty(::grpc::ClientContext* context, const ::astarteplatform::msghub::PropertyIdentifier* request, ::astarteplatform::msghub::AstartePropertyIndividual* response, std::function<void(::grpc::Status)>) override;
      void GetProperty(::grpc::ClientContext* context, const ::astarteplatform::msghub::PropertyIdentifier* request, ::astarteplatform::msghub::AstartePropertyIndividual* response, ::grpc::ClientUnaryReactor* reactor) override;
     private:
      friend class Stub;
      explicit async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class async* async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class async async_stub_{this};
    ::grpc::ClientReader< ::astarteplatform::msghub::MessageHubEvent>* AttachRaw(::grpc::ClientContext* context, const ::astarteplatform::msghub::Node& request) override;
    ::grpc::ClientAsyncReader< ::astarteplatform::msghub::MessageHubEvent>* AsyncAttachRaw(::grpc::ClientContext* context, const ::astarteplatform::msghub::Node& request, ::grpc::CompletionQueue* cq, void* tag) override;
    ::grpc::ClientAsyncReader< ::astarteplatform::msghub::MessageHubEvent>* PrepareAsyncAttachRaw(::grpc::ClientContext* context, const ::astarteplatform::msghub::Node& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* AsyncSendRaw(::grpc::ClientContext* context, const ::astarteplatform::msghub::AstarteMessage& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* PrepareAsyncSendRaw(::grpc::ClientContext* context, const ::astarteplatform::msghub::AstarteMessage& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* AsyncDetachRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* PrepareAsyncDetachRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* AsyncAddInterfacesRaw(::grpc::ClientContext* context, const ::astarteplatform::msghub::InterfacesJson& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* PrepareAsyncAddInterfacesRaw(::grpc::ClientContext* context, const ::astarteplatform::msghub::InterfacesJson& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* AsyncRemoveInterfacesRaw(::grpc::ClientContext* context, const ::astarteplatform::msghub::InterfacesName& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* PrepareAsyncRemoveInterfacesRaw(::grpc::ClientContext* context, const ::astarteplatform::msghub::InterfacesName& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::astarteplatform::msghub::StoredProperties>* AsyncGetPropertiesRaw(::grpc::ClientContext* context, const ::astarteplatform::msghub::InterfaceName& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::astarteplatform::msghub::StoredProperties>* PrepareAsyncGetPropertiesRaw(::grpc::ClientContext* context, const ::astarteplatform::msghub::InterfaceName& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::astarteplatform::msghub::StoredProperties>* AsyncGetAllPropertiesRaw(::grpc::ClientContext* context, const ::astarteplatform::msghub::PropertyFilter& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::astarteplatform::msghub::StoredProperties>* PrepareAsyncGetAllPropertiesRaw(::grpc::ClientContext* context, const ::astarteplatform::msghub::PropertyFilter& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::astarteplatform::msghub::AstartePropertyIndividual>* AsyncGetPropertyRaw(::grpc::ClientContext* context, const ::astarteplatform::msghub::PropertyIdentifier& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::astarteplatform::msghub::AstartePropertyIndividual>* PrepareAsyncGetPropertyRaw(::grpc::ClientContext* context, const ::astarteplatform::msghub::PropertyIdentifier& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_Attach_;
    const ::grpc::internal::RpcMethod rpcmethod_Send_;
    const ::grpc::internal::RpcMethod rpcmethod_Detach_;
    const ::grpc::internal::RpcMethod rpcmethod_AddInterfaces_;
    const ::grpc::internal::RpcMethod rpcmethod_RemoveInterfaces_;
    const ::grpc::internal::RpcMethod rpcmethod_GetProperties_;
    const ::grpc::internal::RpcMethod rpcmethod_GetAllProperties_;
    const ::grpc::internal::RpcMethod rpcmethod_GetProperty_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    // This function should be used to attach a node to an instance of the Astarte message hub.
    // Returns a data stream from the Astarte message hub.
    virtual ::grpc::Status Attach(::grpc::ServerContext* context, const ::astarteplatform::msghub::Node* request, ::grpc::ServerWriter< ::astarteplatform::msghub::MessageHubEvent>* writer);
    // This function should be used to send an `AstarteMessage` to Astarte. 
    virtual ::grpc::Status Send(::grpc::ServerContext* context, const ::astarteplatform::msghub::AstarteMessage* request, ::google::protobuf::Empty* response);
    // This function should be used to detach a node from an instance of the Astarte message hub. 
    virtual ::grpc::Status Detach(::grpc::ServerContext* context, const ::google::protobuf::Empty* request, ::google::protobuf::Empty* response);
    // This function should be used to add one or more interfaces to an instance of the Astarte message hub. 
    virtual ::grpc::Status AddInterfaces(::grpc::ServerContext* context, const ::astarteplatform::msghub::InterfacesJson* request, ::google::protobuf::Empty* response);
    // This function should be used to remove one or more interfaces from an instance of the Astarte message hub. 
    virtual ::grpc::Status RemoveInterfaces(::grpc::ServerContext* context, const ::astarteplatform::msghub::InterfacesName* request, ::google::protobuf::Empty* response);
    // Get properties associated with the passed interfaces. 
    virtual ::grpc::Status GetProperties(::grpc::ServerContext* context, const ::astarteplatform::msghub::InterfaceName* request, ::astarteplatform::msghub::StoredProperties* response);
    // Get all the properties, allowing also filtering by interface ownership. 
    virtual ::grpc::Status GetAllProperties(::grpc::ServerContext* context, const ::astarteplatform::msghub::PropertyFilter* request, ::astarteplatform::msghub::StoredProperties* response);
    // Get a specific property by its identifier, could be an unset property  
    virtual ::grpc::Status GetProperty(::grpc::ServerContext* context, const ::astarteplatform::msghub::PropertyIdentifier* request, ::astarteplatform::msghub::AstartePropertyIndividual* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_Attach : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_Attach() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_Attach() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Attach(::grpc::ServerContext* /*context*/, const ::astarteplatform::msghub::Node* /*request*/, ::grpc::ServerWriter< ::astarteplatform::msghub::MessageHubEvent>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestAttach(::grpc::ServerContext* context, ::astarteplatform::msghub::Node* request, ::grpc::ServerAsyncWriter< ::astarteplatform::msghub::MessageHubEvent>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncServerStreaming(0, context, request, writer, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_Send : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_Send() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_Send() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Send(::grpc::ServerContext* /*context*/, const ::astarteplatform::msghub::AstarteMessage* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSend(::grpc::ServerContext* context, ::astarteplatform::msghub::AstarteMessage* request, ::grpc::ServerAsyncResponseWriter< ::google::protobuf::Empty>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_Detach : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_Detach() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_Detach() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Detach(::grpc::ServerContext* /*context*/, const ::google::protobuf::Empty* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDetach(::grpc::ServerContext* context, ::google::protobuf::Empty* request, ::grpc::ServerAsyncResponseWriter< ::google::protobuf::Empty>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_AddInterfaces : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_AddInterfaces() {
      ::grpc::Service::MarkMethodAsync(3);
    }
    ~WithAsyncMethod_AddInterfaces() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status AddInterfaces(::grpc::ServerContext* /*context*/, const ::astarteplatform::msghub::InterfacesJson* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestAddInterfaces(::grpc::ServerContext* context, ::astarteplatform::msghub::InterfacesJson* request, ::grpc::ServerAsyncResponseWriter< ::google::protobuf::Empty>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_RemoveInterfaces : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_RemoveInterfaces() {
      ::grpc::Service::MarkMethodAsync(4);
    }
    ~WithAsyncMethod_RemoveInterfaces() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RemoveInterfaces(::grpc::ServerContext* /*context*/, const ::astarteplatform::msghub::InterfacesName* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestRemoveInterfaces(::grpc::ServerContext* context, ::astarteplatform::msghub::InterfacesName* request, ::grpc::ServerAsyncResponseWriter< ::google::protobuf::Empty>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetProperties : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetProperties() {
      ::grpc::Service::MarkMethodAsync(5);
    }
    ~WithAsyncMethod_GetProperties() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetProperties(::grpc::ServerContext* /*context*/, const ::astarteplatform::msghub::InterfaceName* /*request*/, ::astarteplatform::msghub::StoredProperties* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetProperties(::grpc::ServerContext* context, ::astarteplatform::msghub::InterfaceName* request, ::grpc::ServerAsyncResponseWriter< ::astarteplatform::msghub::StoredProperties>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(5, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetAllProperties : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetAllProperties() {
      ::grpc::Service::MarkMethodAsync(6);
    }
    ~WithAsyncMethod_GetAllProperties() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetAllProperties(::grpc::ServerContext* /*context*/, const ::astarteplatform::msghub::PropertyFilter* /*request*/, ::astarteplatform::msghub::StoredProperties* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetAllProperties(::grpc::ServerContext* context, ::astarteplatform::msghub::PropertyFilter* request, ::grpc::ServerAsyncResponseWriter< ::astarteplatform::msghub::StoredProperties>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(6, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetProperty : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetProperty() {
      ::grpc::Service::MarkMethodAsync(7);
    }
    ~WithAsyncMethod_GetProperty() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetProperty(::grpc::ServerContext* /*context*/, const ::astarteplatform::msghub::PropertyIdentifier* /*request*/, ::astarteplatform::msghub::AstartePropertyIndividual* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetProperty(::grpc::ServerContext* context, ::astarteplatform::msghub::PropertyIdentifier* request, ::grpc::ServerAsyncResponseWriter< ::astarteplatform::msghub::AstartePropertyIndividual>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(7, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_Attach<WithAsyncMethod_Send<WithAsyncMethod_Detach<WithAsyncMethod_AddInterfaces<WithAsyncMethod_RemoveInterfaces<WithAsyncMethod_GetProperties<WithAsyncMethod_GetAllProperties<WithAsyncMethod_GetProperty<Service > > > > > > > > AsyncService;
  template <class BaseClass>
  class WithCallbackMethod_Attach : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_Attach() {
      ::grpc::Service::MarkMethodCallback(0,
          new ::grpc::internal::CallbackServerStreamingHandler< ::astarteplatform::msghub::Node, ::astarteplatform::msghub::MessageHubEvent>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::astarteplatform::msghub::Node* request) { return this->Attach(context, request); }));
    }
    ~WithCallbackMethod_Attach() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Attach(::grpc::ServerContext* /*context*/, const ::astarteplatform::msghub::Node* /*request*/, ::grpc::ServerWriter< ::astarteplatform::msghub::MessageHubEvent>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerWriteReactor< ::astarteplatform::msghub::MessageHubEvent>* Attach(
      ::grpc::CallbackServerContext* /*context*/, const ::astarteplatform::msghub::Node* /*request*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_Send : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_Send() {
      ::grpc::Service::MarkMethodCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::astarteplatform::msghub::AstarteMessage, ::google::protobuf::Empty>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::astarteplatform::msghub::AstarteMessage* request, ::google::protobuf::Empty* response) { return this->Send(context, request, response); }));}
    void SetMessageAllocatorFor_Send(
        ::grpc::MessageAllocator< ::astarteplatform::msghub::AstarteMessage, ::google::protobuf::Empty>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(1);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::astarteplatform::msghub::AstarteMessage, ::google::protobuf::Empty>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_Send() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Send(::grpc::ServerContext* /*context*/, const ::astarteplatform::msghub::AstarteMessage* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* Send(
      ::grpc::CallbackServerContext* /*context*/, const ::astarteplatform::msghub::AstarteMessage* /*request*/, ::google::protobuf::Empty* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_Detach : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_Detach() {
      ::grpc::Service::MarkMethodCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::google::protobuf::Empty, ::google::protobuf::Empty>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::google::protobuf::Empty* request, ::google::protobuf::Empty* response) { return this->Detach(context, request, response); }));}
    void SetMessageAllocatorFor_Detach(
        ::grpc::MessageAllocator< ::google::protobuf::Empty, ::google::protobuf::Empty>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(2);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::google::protobuf::Empty, ::google::protobuf::Empty>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_Detach() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Detach(::grpc::ServerContext* /*context*/, const ::google::protobuf::Empty* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* Detach(
      ::grpc::CallbackServerContext* /*context*/, const ::google::protobuf::Empty* /*request*/, ::google::protobuf::Empty* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_AddInterfaces : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_AddInterfaces() {
      ::grpc::Service::MarkMethodCallback(3,
          new ::grpc::internal::CallbackUnaryHandler< ::astarteplatform::msghub::InterfacesJson, ::google::protobuf::Empty>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::astarteplatform::msghub::InterfacesJson* request, ::google::protobuf::Empty* response) { return this->AddInterfaces(context, request, response); }));}
    void SetMessageAllocatorFor_AddInterfaces(
        ::grpc::MessageAllocator< ::astarteplatform::msghub::InterfacesJson, ::google::protobuf::Empty>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(3);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::astarteplatform::msghub::InterfacesJson, ::google::protobuf::Empty>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_AddInterfaces() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status AddInterfaces(::grpc::ServerContext* /*context*/, const ::astarteplatform::msghub::InterfacesJson* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* AddInterfaces(
      ::grpc::CallbackServerContext* /*context*/, const ::astarteplatform::msghub::InterfacesJson* /*request*/, ::google::protobuf::Empty* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_RemoveInterfaces : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_RemoveInterfaces() {
      ::grpc::Service::MarkMethodCallback(4,
          new ::grpc::internal::CallbackUnaryHandler< ::astarteplatform::msghub::InterfacesName, ::google::protobuf::Empty>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::astarteplatform::msghub::InterfacesName* request, ::google::protobuf::Empty* response) { return this->RemoveInterfaces(context, request, response); }));}
    void SetMessageAllocatorFor_RemoveInterfaces(
        ::grpc::MessageAllocator< ::astarteplatform::msghub::InterfacesName, ::google::protobuf::Empty>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(4);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::astarteplatform::msghub::InterfacesName, ::google::protobuf::Empty>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_RemoveInterfaces() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RemoveInterfaces(::grpc::ServerContext* /*context*/, const ::astarteplatform::msghub::InterfacesName* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* RemoveInterfaces(
      ::grpc::CallbackServerContext* /*context*/, const ::astarteplatform::msghub::InterfacesName* /*request*/, ::google::protobuf::Empty* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_GetProperties : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_GetProperties() {
      ::grpc::Service::MarkMethodCallback(5,
          new ::grpc::internal::CallbackUnaryHandler< ::astarteplatform::msghub::InterfaceName, ::astarteplatform::msghub::StoredProperties>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::astarteplatform::msghub::InterfaceName* request, ::astarteplatform::msghub::StoredProperties* response) { return this->GetProperties(context, request, response); }));}
    void SetMessageAllocatorFor_GetProperties(
        ::grpc::MessageAllocator< ::astarteplatform::msghub::InterfaceName, ::astarteplatform::msghub::StoredProperties>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(5);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::astarteplatform::msghub::InterfaceName, ::astarteplatform::msghub::StoredProperties>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_GetProperties() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetProperties(::grpc::ServerContext* /*context*/, const ::astarteplatform::msghub::InterfaceName* /*request*/, ::astarteplatform::msghub::StoredProperties* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetProperties(
      ::grpc::CallbackServerContext* /*context*/, const ::astarteplatform::msghub::InterfaceName* /*request*/, ::astarteplatform::msghub::StoredProperties* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_GetAllProperties : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_GetAllProperties() {
      ::grpc::Service::MarkMethodCallback(6,
          new ::grpc::internal::CallbackUnaryHandler< ::astarteplatform::msghub::PropertyFilter, ::astarteplatform::msghub::StoredProperties>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::astarteplatform::msghub::PropertyFilter* request, ::astarteplatform::msghub::StoredProperties* response) { return this->GetAllProperties(context, request, response); }));}
    void SetMessageAllocatorFor_GetAllProperties(
        ::grpc::MessageAllocator< ::astarteplatform::msghub::PropertyFilter, ::astarteplatform::msghub::StoredProperties>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(6);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::astarteplatform::msghub::PropertyFilter, ::astarteplatform::msghub::StoredProperties>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_GetAllProperties() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetAllProperties(::grpc::ServerContext* /*context*/, const ::astarteplatform::msghub::PropertyFilter* /*request*/, ::astarteplatform::msghub::StoredProperties* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetAllProperties(
      ::grpc::CallbackServerContext* /*context*/, const ::astarteplatform::msghub::PropertyFilter* /*request*/, ::astarteplatform::msghub::StoredProperties* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_GetProperty : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_GetProperty() {
      ::grpc::Service::MarkMethodCallback(7,
          new ::grpc::internal::CallbackUnaryHandler< ::astarteplatform::msghub::PropertyIdentifier, ::astarteplatform::msghub::AstartePropertyIndividual>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::astarteplatform::msghub::PropertyIdentifier* request, ::astarteplatform::msghub::AstartePropertyIndividual* response) { return this->GetProperty(context, request, response); }));}
    void SetMessageAllocatorFor_GetProperty(
        ::grpc::MessageAllocator< ::astarteplatform::msghub::PropertyIdentifier, ::astarteplatform::msghub::AstartePropertyIndividual>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(7);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::astarteplatform::msghub::PropertyIdentifier, ::astarteplatform::msghub::AstartePropertyIndividual>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_GetProperty() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetProperty(::grpc::ServerContext* /*context*/, const ::astarteplatform::msghub::PropertyIdentifier* /*request*/, ::astarteplatform::msghub::AstartePropertyIndividual* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetProperty(
      ::grpc::CallbackServerContext* /*context*/, const ::astarteplatform::msghub::PropertyIdentifier* /*request*/, ::astarteplatform::msghub::AstartePropertyIndividual* /*response*/)  { return nullptr; }
  };
  typedef WithCallbackMethod_Attach<WithCallbackMethod_Send<WithCallbackMethod_Detach<WithCallbackMethod_AddInterfaces<WithCallbackMethod_RemoveInterfaces<WithCallbackMethod_GetProperties<WithCallbackMethod_GetAllProperties<WithCallbackMethod_GetProperty<Service > > > > > > > > CallbackService;
  typedef CallbackService ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_Attach : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_Attach() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_Attach() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Attach(::grpc::ServerContext* /*context*/, const ::astarteplatform::msghub::Node* /*request*/, ::grpc::ServerWriter< ::astarteplatform::msghub::MessageHubEvent>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_Send : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_Send() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_Send() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Send(::grpc::ServerContext* /*context*/, const ::astarteplatform::msghub::AstarteMessage* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_Detach : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_Detach() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_Detach() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Detach(::grpc::ServerContext* /*context*/, const ::google::protobuf::Empty* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_AddInterfaces : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_AddInterfaces() {
      ::grpc::Service::MarkMethodGeneric(3);
    }
    ~WithGenericMethod_AddInterfaces() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status AddInterfaces(::grpc::ServerContext* /*context*/, const ::astarteplatform::msghub::InterfacesJson* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_RemoveInterfaces : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_RemoveInterfaces() {
      ::grpc::Service::MarkMethodGeneric(4);
    }
    ~WithGenericMethod_RemoveInterfaces() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RemoveInterfaces(::grpc::ServerContext* /*context*/, const ::astarteplatform::msghub::InterfacesName* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetProperties : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetProperties() {
      ::grpc::Service::MarkMethodGeneric(5);
    }
    ~WithGenericMethod_GetProperties() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetProperties(::grpc::ServerContext* /*context*/, const ::astarteplatform::msghub::InterfaceName* /*request*/, ::astarteplatform::msghub::StoredProperties* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetAllProperties : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetAllProperties() {
      ::grpc::Service::MarkMethodGeneric(6);
    }
    ~WithGenericMethod_GetAllProperties() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetAllProperties(::grpc::ServerContext* /*context*/, const ::astarteplatform::msghub::PropertyFilter* /*request*/, ::astarteplatform::msghub::StoredProperties* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetProperty : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetProperty() {
      ::grpc::Service::MarkMethodGeneric(7);
    }
    ~WithGenericMethod_GetProperty() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetProperty(::grpc::ServerContext* /*context*/, const ::astarteplatform::msghub::PropertyIdentifier* /*request*/, ::astarteplatform::msghub::AstartePropertyIndividual* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_Attach : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_Attach() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_Attach() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Attach(::grpc::ServerContext* /*context*/, const ::astarteplatform::msghub::Node* /*request*/, ::grpc::ServerWriter< ::astarteplatform::msghub::MessageHubEvent>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestAttach(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncWriter< ::grpc::ByteBuffer>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncServerStreaming(0, context, request, writer, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_Send : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_Send() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_Send() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Send(::grpc::ServerContext* /*context*/, const ::astarteplatform::msghub::AstarteMessage* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSend(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_Detach : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_Detach() {
      ::grpc::Service::MarkMethodRaw(2);
    }
    ~WithRawMethod_Detach() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Detach(::grpc::ServerContext* /*context*/, const ::google::protobuf::Empty* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDetach(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_AddInterfaces : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_AddInterfaces() {
      ::grpc::Service::MarkMethodRaw(3);
    }
    ~WithRawMethod_AddInterfaces() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status AddInterfaces(::grpc::ServerContext* /*context*/, const ::astarteplatform::msghub::InterfacesJson* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestAddInterfaces(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_RemoveInterfaces : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_RemoveInterfaces() {
      ::grpc::Service::MarkMethodRaw(4);
    }
    ~WithRawMethod_RemoveInterfaces() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RemoveInterfaces(::grpc::ServerContext* /*context*/, const ::astarteplatform::msghub::InterfacesName* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestRemoveInterfaces(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetProperties : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetProperties() {
      ::grpc::Service::MarkMethodRaw(5);
    }
    ~WithRawMethod_GetProperties() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetProperties(::grpc::ServerContext* /*context*/, const ::astarteplatform::msghub::InterfaceName* /*request*/, ::astarteplatform::msghub::StoredProperties* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetProperties(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(5, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetAllProperties : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetAllProperties() {
      ::grpc::Service::MarkMethodRaw(6);
    }
    ~WithRawMethod_GetAllProperties() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetAllProperties(::grpc::ServerContext* /*context*/, const ::astarteplatform::msghub::PropertyFilter* /*request*/, ::astarteplatform::msghub::StoredProperties* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetAllProperties(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(6, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetProperty : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetProperty() {
      ::grpc::Service::MarkMethodRaw(7);
    }
    ~WithRawMethod_GetProperty() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetProperty(::grpc::ServerContext* /*context*/, const ::astarteplatform::msghub::PropertyIdentifier* /*request*/, ::astarteplatform::msghub::AstartePropertyIndividual* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetProperty(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(7, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_Attach : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_Attach() {
      ::grpc::Service::MarkMethodRawCallback(0,
          new ::grpc::internal::CallbackServerStreamingHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const::grpc::ByteBuffer* request) { return this->Attach(context, request); }));
    }
    ~WithRawCallbackMethod_Attach() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Attach(::grpc::ServerContext* /*context*/, const ::astarteplatform::msghub::Node* /*request*/, ::grpc::ServerWriter< ::astarteplatform::msghub::MessageHubEvent>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerWriteReactor< ::grpc::ByteBuffer>* Attach(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_Send : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_Send() {
      ::grpc::Service::MarkMethodRawCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->Send(context, request, response); }));
    }
    ~WithRawCallbackMethod_Send() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Send(::grpc::ServerContext* /*context*/, const ::astarteplatform::msghub::AstarteMessage* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* Send(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_Detach : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_Detach() {
      ::grpc::Service::MarkMethodRawCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->Detach(context, request, response); }));
    }
    ~WithRawCallbackMethod_Detach() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Detach(::grpc::ServerContext* /*context*/, const ::google::protobuf::Empty* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* Detach(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_AddInterfaces : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_AddInterfaces() {
      ::grpc::Service::MarkMethodRawCallback(3,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->AddInterfaces(context, request, response); }));
    }
    ~WithRawCallbackMethod_AddInterfaces() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status AddInterfaces(::grpc::ServerContext* /*context*/, const ::astarteplatform::msghub::InterfacesJson* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* AddInterfaces(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_RemoveInterfaces : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_RemoveInterfaces() {
      ::grpc::Service::MarkMethodRawCallback(4,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->RemoveInterfaces(context, request, response); }));
    }
    ~WithRawCallbackMethod_RemoveInterfaces() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RemoveInterfaces(::grpc::ServerContext* /*context*/, const ::astarteplatform::msghub::InterfacesName* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* RemoveInterfaces(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_GetProperties : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_GetProperties() {
      ::grpc::Service::MarkMethodRawCallback(5,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->GetProperties(context, request, response); }));
    }
    ~WithRawCallbackMethod_GetProperties() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetProperties(::grpc::ServerContext* /*context*/, const ::astarteplatform::msghub::InterfaceName* /*request*/, ::astarteplatform::msghub::StoredProperties* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetProperties(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_GetAllProperties : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_GetAllProperties() {
      ::grpc::Service::MarkMethodRawCallback(6,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->GetAllProperties(context, request, response); }));
    }
    ~WithRawCallbackMethod_GetAllProperties() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetAllProperties(::grpc::ServerContext* /*context*/, const ::astarteplatform::msghub::PropertyFilter* /*request*/, ::astarteplatform::msghub::StoredProperties* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetAllProperties(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_GetProperty : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_GetProperty() {
      ::grpc::Service::MarkMethodRawCallback(7,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->GetProperty(context, request, response); }));
    }
    ~WithRawCallbackMethod_GetProperty() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetProperty(::grpc::ServerContext* /*context*/, const ::astarteplatform::msghub::PropertyIdentifier* /*request*/, ::astarteplatform::msghub::AstartePropertyIndividual* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetProperty(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_Send : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_Send() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::StreamedUnaryHandler<
          ::astarteplatform::msghub::AstarteMessage, ::google::protobuf::Empty>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::astarteplatform::msghub::AstarteMessage, ::google::protobuf::Empty>* streamer) {
                       return this->StreamedSend(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_Send() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status Send(::grpc::ServerContext* /*context*/, const ::astarteplatform::msghub::AstarteMessage* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedSend(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::astarteplatform::msghub::AstarteMessage,::google::protobuf::Empty>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_Detach : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_Detach() {
      ::grpc::Service::MarkMethodStreamed(2,
        new ::grpc::internal::StreamedUnaryHandler<
          ::google::protobuf::Empty, ::google::protobuf::Empty>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::google::protobuf::Empty, ::google::protobuf::Empty>* streamer) {
                       return this->StreamedDetach(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_Detach() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status Detach(::grpc::ServerContext* /*context*/, const ::google::protobuf::Empty* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedDetach(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::google::protobuf::Empty,::google::protobuf::Empty>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_AddInterfaces : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_AddInterfaces() {
      ::grpc::Service::MarkMethodStreamed(3,
        new ::grpc::internal::StreamedUnaryHandler<
          ::astarteplatform::msghub::InterfacesJson, ::google::protobuf::Empty>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::astarteplatform::msghub::InterfacesJson, ::google::protobuf::Empty>* streamer) {
                       return this->StreamedAddInterfaces(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_AddInterfaces() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status AddInterfaces(::grpc::ServerContext* /*context*/, const ::astarteplatform::msghub::InterfacesJson* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedAddInterfaces(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::astarteplatform::msghub::InterfacesJson,::google::protobuf::Empty>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_RemoveInterfaces : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_RemoveInterfaces() {
      ::grpc::Service::MarkMethodStreamed(4,
        new ::grpc::internal::StreamedUnaryHandler<
          ::astarteplatform::msghub::InterfacesName, ::google::protobuf::Empty>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::astarteplatform::msghub::InterfacesName, ::google::protobuf::Empty>* streamer) {
                       return this->StreamedRemoveInterfaces(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_RemoveInterfaces() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status RemoveInterfaces(::grpc::ServerContext* /*context*/, const ::astarteplatform::msghub::InterfacesName* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedRemoveInterfaces(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::astarteplatform::msghub::InterfacesName,::google::protobuf::Empty>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetProperties : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_GetProperties() {
      ::grpc::Service::MarkMethodStreamed(5,
        new ::grpc::internal::StreamedUnaryHandler<
          ::astarteplatform::msghub::InterfaceName, ::astarteplatform::msghub::StoredProperties>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::astarteplatform::msghub::InterfaceName, ::astarteplatform::msghub::StoredProperties>* streamer) {
                       return this->StreamedGetProperties(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_GetProperties() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetProperties(::grpc::ServerContext* /*context*/, const ::astarteplatform::msghub::InterfaceName* /*request*/, ::astarteplatform::msghub::StoredProperties* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetProperties(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::astarteplatform::msghub::InterfaceName,::astarteplatform::msghub::StoredProperties>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetAllProperties : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_GetAllProperties() {
      ::grpc::Service::MarkMethodStreamed(6,
        new ::grpc::internal::StreamedUnaryHandler<
          ::astarteplatform::msghub::PropertyFilter, ::astarteplatform::msghub::StoredProperties>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::astarteplatform::msghub::PropertyFilter, ::astarteplatform::msghub::StoredProperties>* streamer) {
                       return this->StreamedGetAllProperties(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_GetAllProperties() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetAllProperties(::grpc::ServerContext* /*context*/, const ::astarteplatform::msghub::PropertyFilter* /*request*/, ::astarteplatform::msghub::StoredProperties* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetAllProperties(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::astarteplatform::msghub::PropertyFilter,::astarteplatform::msghub::StoredProperties>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetProperty : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_GetProperty() {
      ::grpc::Service::MarkMethodStreamed(7,
        new ::grpc::internal::StreamedUnaryHandler<
          ::astarteplatform::msghub::PropertyIdentifier, ::astarteplatform::msghub::AstartePropertyIndividual>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::astarteplatform::msghub::PropertyIdentifier, ::astarteplatform::msghub::AstartePropertyIndividual>* streamer) {
                       return this->StreamedGetProperty(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_GetProperty() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetProperty(::grpc::ServerContext* /*context*/, const ::astarteplatform::msghub::PropertyIdentifier* /*request*/, ::astarteplatform::msghub::AstartePropertyIndividual* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetProperty(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::astarteplatform::msghub::PropertyIdentifier,::astarteplatform::msghub::AstartePropertyIndividual>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_Send<WithStreamedUnaryMethod_Detach<WithStreamedUnaryMethod_AddInterfaces<WithStreamedUnaryMethod_RemoveInterfaces<WithStreamedUnaryMethod_GetProperties<WithStreamedUnaryMethod_GetAllProperties<WithStreamedUnaryMethod_GetProperty<Service > > > > > > > StreamedUnaryService;
  template <class BaseClass>
  class WithSplitStreamingMethod_Attach : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithSplitStreamingMethod_Attach() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::SplitServerStreamingHandler<
          ::astarteplatform::msghub::Node, ::astarteplatform::msghub::MessageHubEvent>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerSplitStreamer<
                     ::astarteplatform::msghub::Node, ::astarteplatform::msghub::MessageHubEvent>* streamer) {
                       return this->StreamedAttach(context,
                         streamer);
                  }));
    }
    ~WithSplitStreamingMethod_Attach() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status Attach(::grpc::ServerContext* /*context*/, const ::astarteplatform::msghub::Node* /*request*/, ::grpc::ServerWriter< ::astarteplatform::msghub::MessageHubEvent>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with split streamed
    virtual ::grpc::Status StreamedAttach(::grpc::ServerContext* context, ::grpc::ServerSplitStreamer< ::astarteplatform::msghub::Node,::astarteplatform::msghub::MessageHubEvent>* server_split_streamer) = 0;
  };
  typedef WithSplitStreamingMethod_Attach<Service > SplitStreamedService;
  typedef WithSplitStreamingMethod_Attach<WithStreamedUnaryMethod_Send<WithStreamedUnaryMethod_Detach<WithStreamedUnaryMethod_AddInterfaces<WithStreamedUnaryMethod_RemoveInterfaces<WithStreamedUnaryMethod_GetProperties<WithStreamedUnaryMethod_GetAllProperties<WithStreamedUnaryMethod_GetProperty<Service > > > > > > > > StreamedService;
};

}  // namespace msghub
}  // namespace astarteplatform


#endif  // GRPC_astarteplatform_2fmsghub_2fmessage_5fhub_5fservice_2eproto__INCLUDED
