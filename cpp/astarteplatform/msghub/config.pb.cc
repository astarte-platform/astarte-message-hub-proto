// Generated by the protocol buffer compiler.  DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// source: astarteplatform/msghub/config.proto
// Protobuf C++ Version: 5.29.0

#include "astarteplatform/msghub/config.pb.h"

#include <algorithm>
#include <type_traits>
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/generated_message_tctable_impl.h"
#include "google/protobuf/extension_set.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/wire_format_lite.h"
#include "google/protobuf/descriptor.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/reflection_ops.h"
#include "google/protobuf/wire_format.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"
PROTOBUF_PRAGMA_INIT_SEG
namespace _pb = ::google::protobuf;
namespace _pbi = ::google::protobuf::internal;
namespace _fl = ::google::protobuf::internal::field_layout;
namespace astarteplatform {
namespace msghub {

inline constexpr ConfigMessage::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        realm_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        device_id_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        credentials_secret_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        pairing_url_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        pairing_token_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        grpc_socket_host_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        grpc_socket_port_{0u} {}

template <typename>
PROTOBUF_CONSTEXPR ConfigMessage::ConfigMessage(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct ConfigMessageDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ConfigMessageDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~ConfigMessageDefaultTypeInternal() {}
  union {
    ConfigMessage _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ConfigMessageDefaultTypeInternal _ConfigMessage_default_instance_;
}  // namespace msghub
}  // namespace astarteplatform
static constexpr const ::_pb::EnumDescriptor**
    file_level_enum_descriptors_astarteplatform_2fmsghub_2fconfig_2eproto = nullptr;
static constexpr const ::_pb::ServiceDescriptor**
    file_level_service_descriptors_astarteplatform_2fmsghub_2fconfig_2eproto = nullptr;
const ::uint32_t
    TableStruct_astarteplatform_2fmsghub_2fconfig_2eproto::offsets[] ABSL_ATTRIBUTE_SECTION_VARIABLE(
        protodesc_cold) = {
        PROTOBUF_FIELD_OFFSET(::astarteplatform::msghub::ConfigMessage, _impl_._has_bits_),
        PROTOBUF_FIELD_OFFSET(::astarteplatform::msghub::ConfigMessage, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::astarteplatform::msghub::ConfigMessage, _impl_.realm_),
        PROTOBUF_FIELD_OFFSET(::astarteplatform::msghub::ConfigMessage, _impl_.device_id_),
        PROTOBUF_FIELD_OFFSET(::astarteplatform::msghub::ConfigMessage, _impl_.credentials_secret_),
        PROTOBUF_FIELD_OFFSET(::astarteplatform::msghub::ConfigMessage, _impl_.pairing_url_),
        PROTOBUF_FIELD_OFFSET(::astarteplatform::msghub::ConfigMessage, _impl_.pairing_token_),
        PROTOBUF_FIELD_OFFSET(::astarteplatform::msghub::ConfigMessage, _impl_.grpc_socket_port_),
        PROTOBUF_FIELD_OFFSET(::astarteplatform::msghub::ConfigMessage, _impl_.grpc_socket_host_),
        ~0u,
        0,
        1,
        ~0u,
        2,
        4,
        3,
};

static const ::_pbi::MigrationSchema
    schemas[] ABSL_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
        {0, 15, -1, sizeof(::astarteplatform::msghub::ConfigMessage)},
};
static const ::_pb::Message* const file_default_instances[] = {
    &::astarteplatform::msghub::_ConfigMessage_default_instance_._instance,
};
const char descriptor_table_protodef_astarteplatform_2fmsghub_2fconfig_2eproto[] ABSL_ATTRIBUTE_SECTION_VARIABLE(
    protodesc_cold) = {
    "\n#astarteplatform/msghub/config.proto\022\026a"
    "starteplatform.msghub\032\033google/protobuf/e"
    "mpty.proto\"\247\002\n\rConfigMessage\022\r\n\005realm\030\001 "
    "\001(\t\022\026\n\tdevice_id\030\002 \001(\tH\000\210\001\001\022\037\n\022credentia"
    "ls_secret\030\003 \001(\tH\001\210\001\001\022\023\n\013pairing_url\030\004 \001("
    "\t\022\032\n\rpairing_token\030\005 \001(\tH\002\210\001\001\022\035\n\020grpc_so"
    "cket_port\030\006 \001(\rH\003\210\001\001\022\035\n\020grpc_socket_host"
    "\030\007 \001(\tH\004\210\001\001B\014\n\n_device_idB\025\n\023_credential"
    "s_secretB\020\n\016_pairing_tokenB\023\n\021_grpc_sock"
    "et_portB\023\n\021_grpc_socket_host2^\n\020MessageH"
    "ubConfig\022J\n\tSetConfig\022%.astarteplatform."
    "msghub.ConfigMessage\032\026.google.protobuf.E"
    "mptyb\006proto3"
};
static const ::_pbi::DescriptorTable* const descriptor_table_astarteplatform_2fmsghub_2fconfig_2eproto_deps[1] =
    {
        &::descriptor_table_google_2fprotobuf_2fempty_2eproto,
};
static ::absl::once_flag descriptor_table_astarteplatform_2fmsghub_2fconfig_2eproto_once;
PROTOBUF_CONSTINIT const ::_pbi::DescriptorTable descriptor_table_astarteplatform_2fmsghub_2fconfig_2eproto = {
    false,
    false,
    492,
    descriptor_table_protodef_astarteplatform_2fmsghub_2fconfig_2eproto,
    "astarteplatform/msghub/config.proto",
    &descriptor_table_astarteplatform_2fmsghub_2fconfig_2eproto_once,
    descriptor_table_astarteplatform_2fmsghub_2fconfig_2eproto_deps,
    1,
    1,
    schemas,
    file_default_instances,
    TableStruct_astarteplatform_2fmsghub_2fconfig_2eproto::offsets,
    file_level_enum_descriptors_astarteplatform_2fmsghub_2fconfig_2eproto,
    file_level_service_descriptors_astarteplatform_2fmsghub_2fconfig_2eproto,
};
namespace astarteplatform {
namespace msghub {
// ===================================================================

class ConfigMessage::_Internal {
 public:
  using HasBits =
      decltype(std::declval<ConfigMessage>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
      8 * PROTOBUF_FIELD_OFFSET(ConfigMessage, _impl_._has_bits_);
};

ConfigMessage::ConfigMessage(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:astarteplatform.msghub.ConfigMessage)
}
inline PROTOBUF_NDEBUG_INLINE ConfigMessage::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from, const ::astarteplatform::msghub::ConfigMessage& from_msg)
      : _has_bits_{from._has_bits_},
        _cached_size_{0},
        realm_(arena, from.realm_),
        device_id_(arena, from.device_id_),
        credentials_secret_(arena, from.credentials_secret_),
        pairing_url_(arena, from.pairing_url_),
        pairing_token_(arena, from.pairing_token_),
        grpc_socket_host_(arena, from.grpc_socket_host_) {}

ConfigMessage::ConfigMessage(
    ::google::protobuf::Arena* arena,
    const ConfigMessage& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  ConfigMessage* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  _impl_.grpc_socket_port_ = from._impl_.grpc_socket_port_;

  // @@protoc_insertion_point(copy_constructor:astarteplatform.msghub.ConfigMessage)
}
inline PROTOBUF_NDEBUG_INLINE ConfigMessage::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0},
        realm_(arena),
        device_id_(arena),
        credentials_secret_(arena),
        pairing_url_(arena),
        pairing_token_(arena),
        grpc_socket_host_(arena) {}

inline void ConfigMessage::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  _impl_.grpc_socket_port_ = {};
}
ConfigMessage::~ConfigMessage() {
  // @@protoc_insertion_point(destructor:astarteplatform.msghub.ConfigMessage)
  SharedDtor(*this);
}
inline void ConfigMessage::SharedDtor(MessageLite& self) {
  ConfigMessage& this_ = static_cast<ConfigMessage&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  this_._impl_.realm_.Destroy();
  this_._impl_.device_id_.Destroy();
  this_._impl_.credentials_secret_.Destroy();
  this_._impl_.pairing_url_.Destroy();
  this_._impl_.pairing_token_.Destroy();
  this_._impl_.grpc_socket_host_.Destroy();
  this_._impl_.~Impl_();
}

inline void* ConfigMessage::PlacementNew_(const void*, void* mem,
                                        ::google::protobuf::Arena* arena) {
  return ::new (mem) ConfigMessage(arena);
}
constexpr auto ConfigMessage::InternalNewImpl_() {
  return ::google::protobuf::internal::MessageCreator::CopyInit(sizeof(ConfigMessage),
                                            alignof(ConfigMessage));
}
PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::internal::ClassDataFull ConfigMessage::_class_data_ = {
    ::google::protobuf::internal::ClassData{
        &_ConfigMessage_default_instance_._instance,
        &_table_.header,
        nullptr,  // OnDemandRegisterArenaDtor
        nullptr,  // IsInitialized
        &ConfigMessage::MergeImpl,
        ::google::protobuf::Message::GetNewImpl<ConfigMessage>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
        &ConfigMessage::SharedDtor,
        ::google::protobuf::Message::GetClearImpl<ConfigMessage>(), &ConfigMessage::ByteSizeLong,
            &ConfigMessage::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
        PROTOBUF_FIELD_OFFSET(ConfigMessage, _impl_._cached_size_),
        false,
    },
    &ConfigMessage::kDescriptorMethods,
    &descriptor_table_astarteplatform_2fmsghub_2fconfig_2eproto,
    nullptr,  // tracker
};
const ::google::protobuf::internal::ClassData* ConfigMessage::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<3, 7, 0, 117, 2> ConfigMessage::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(ConfigMessage, _impl_._has_bits_),
    0, // no _extensions_
    7, 56,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967168,  // skipmap
    offsetof(decltype(_table_), field_entries),
    7,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::astarteplatform::msghub::ConfigMessage>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // string realm = 1;
    {::_pbi::TcParser::FastUS1,
     {10, 63, 0, PROTOBUF_FIELD_OFFSET(ConfigMessage, _impl_.realm_)}},
    // optional string device_id = 2;
    {::_pbi::TcParser::FastUS1,
     {18, 0, 0, PROTOBUF_FIELD_OFFSET(ConfigMessage, _impl_.device_id_)}},
    // optional string credentials_secret = 3;
    {::_pbi::TcParser::FastUS1,
     {26, 1, 0, PROTOBUF_FIELD_OFFSET(ConfigMessage, _impl_.credentials_secret_)}},
    // string pairing_url = 4;
    {::_pbi::TcParser::FastUS1,
     {34, 63, 0, PROTOBUF_FIELD_OFFSET(ConfigMessage, _impl_.pairing_url_)}},
    // optional string pairing_token = 5;
    {::_pbi::TcParser::FastUS1,
     {42, 2, 0, PROTOBUF_FIELD_OFFSET(ConfigMessage, _impl_.pairing_token_)}},
    // optional uint32 grpc_socket_port = 6;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(ConfigMessage, _impl_.grpc_socket_port_), 4>(),
     {48, 4, 0, PROTOBUF_FIELD_OFFSET(ConfigMessage, _impl_.grpc_socket_port_)}},
    // optional string grpc_socket_host = 7;
    {::_pbi::TcParser::FastUS1,
     {58, 3, 0, PROTOBUF_FIELD_OFFSET(ConfigMessage, _impl_.grpc_socket_host_)}},
  }}, {{
    65535, 65535
  }}, {{
    // string realm = 1;
    {PROTOBUF_FIELD_OFFSET(ConfigMessage, _impl_.realm_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // optional string device_id = 2;
    {PROTOBUF_FIELD_OFFSET(ConfigMessage, _impl_.device_id_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // optional string credentials_secret = 3;
    {PROTOBUF_FIELD_OFFSET(ConfigMessage, _impl_.credentials_secret_), _Internal::kHasBitsOffset + 1, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // string pairing_url = 4;
    {PROTOBUF_FIELD_OFFSET(ConfigMessage, _impl_.pairing_url_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // optional string pairing_token = 5;
    {PROTOBUF_FIELD_OFFSET(ConfigMessage, _impl_.pairing_token_), _Internal::kHasBitsOffset + 2, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // optional uint32 grpc_socket_port = 6;
    {PROTOBUF_FIELD_OFFSET(ConfigMessage, _impl_.grpc_socket_port_), _Internal::kHasBitsOffset + 4, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUInt32)},
    // optional string grpc_socket_host = 7;
    {PROTOBUF_FIELD_OFFSET(ConfigMessage, _impl_.grpc_socket_host_), _Internal::kHasBitsOffset + 3, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUtf8String | ::_fl::kRepAString)},
  }},
  // no aux_entries
  {{
    "\44\5\11\22\13\15\0\20"
    "astarteplatform.msghub.ConfigMessage"
    "realm"
    "device_id"
    "credentials_secret"
    "pairing_url"
    "pairing_token"
    "grpc_socket_host"
  }},
};

PROTOBUF_NOINLINE void ConfigMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:astarteplatform.msghub.ConfigMessage)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.realm_.ClearToEmpty();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.device_id_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.credentials_secret_.ClearNonDefaultToEmpty();
    }
  }
  _impl_.pairing_url_.ClearToEmpty();
  if (cached_has_bits & 0x0000000cu) {
    if (cached_has_bits & 0x00000004u) {
      _impl_.pairing_token_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000008u) {
      _impl_.grpc_socket_host_.ClearNonDefaultToEmpty();
    }
  }
  _impl_.grpc_socket_port_ = 0u;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::uint8_t* ConfigMessage::_InternalSerialize(
            const MessageLite& base, ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) {
          const ConfigMessage& this_ = static_cast<const ConfigMessage&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::uint8_t* ConfigMessage::_InternalSerialize(
            ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) const {
          const ConfigMessage& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(serialize_to_array_start:astarteplatform.msghub.ConfigMessage)
          ::uint32_t cached_has_bits = 0;
          (void)cached_has_bits;

          // string realm = 1;
          if (!this_._internal_realm().empty()) {
            const std::string& _s = this_._internal_realm();
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "astarteplatform.msghub.ConfigMessage.realm");
            target = stream->WriteStringMaybeAliased(1, _s, target);
          }

          cached_has_bits = this_._impl_._has_bits_[0];
          // optional string device_id = 2;
          if (cached_has_bits & 0x00000001u) {
            const std::string& _s = this_._internal_device_id();
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "astarteplatform.msghub.ConfigMessage.device_id");
            target = stream->WriteStringMaybeAliased(2, _s, target);
          }

          // optional string credentials_secret = 3;
          if (cached_has_bits & 0x00000002u) {
            const std::string& _s = this_._internal_credentials_secret();
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "astarteplatform.msghub.ConfigMessage.credentials_secret");
            target = stream->WriteStringMaybeAliased(3, _s, target);
          }

          // string pairing_url = 4;
          if (!this_._internal_pairing_url().empty()) {
            const std::string& _s = this_._internal_pairing_url();
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "astarteplatform.msghub.ConfigMessage.pairing_url");
            target = stream->WriteStringMaybeAliased(4, _s, target);
          }

          // optional string pairing_token = 5;
          if (cached_has_bits & 0x00000004u) {
            const std::string& _s = this_._internal_pairing_token();
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "astarteplatform.msghub.ConfigMessage.pairing_token");
            target = stream->WriteStringMaybeAliased(5, _s, target);
          }

          // optional uint32 grpc_socket_port = 6;
          if (cached_has_bits & 0x00000010u) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
                6, this_._internal_grpc_socket_port(), target);
          }

          // optional string grpc_socket_host = 7;
          if (cached_has_bits & 0x00000008u) {
            const std::string& _s = this_._internal_grpc_socket_host();
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "astarteplatform.msghub.ConfigMessage.grpc_socket_host");
            target = stream->WriteStringMaybeAliased(7, _s, target);
          }

          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            target =
                ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
                    this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
          }
          // @@protoc_insertion_point(serialize_to_array_end:astarteplatform.msghub.ConfigMessage)
          return target;
        }

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::size_t ConfigMessage::ByteSizeLong(const MessageLite& base) {
          const ConfigMessage& this_ = static_cast<const ConfigMessage&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::size_t ConfigMessage::ByteSizeLong() const {
          const ConfigMessage& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(message_byte_size_start:astarteplatform.msghub.ConfigMessage)
          ::size_t total_size = 0;

          ::uint32_t cached_has_bits = 0;
          // Prevent compiler warnings about cached_has_bits being unused
          (void)cached_has_bits;

          ::_pbi::Prefetch5LinesFrom7Lines(&this_);
           {
            // string realm = 1;
            if (!this_._internal_realm().empty()) {
              total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                              this_._internal_realm());
            }
          }
          cached_has_bits = this_._impl_._has_bits_[0];
          if (cached_has_bits & 0x00000003u) {
            // optional string device_id = 2;
            if (cached_has_bits & 0x00000001u) {
              total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                              this_._internal_device_id());
            }
            // optional string credentials_secret = 3;
            if (cached_has_bits & 0x00000002u) {
              total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                              this_._internal_credentials_secret());
            }
          }
           {
            // string pairing_url = 4;
            if (!this_._internal_pairing_url().empty()) {
              total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                              this_._internal_pairing_url());
            }
          }
          if (cached_has_bits & 0x0000001cu) {
            // optional string pairing_token = 5;
            if (cached_has_bits & 0x00000004u) {
              total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                              this_._internal_pairing_token());
            }
            // optional string grpc_socket_host = 7;
            if (cached_has_bits & 0x00000008u) {
              total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                              this_._internal_grpc_socket_host());
            }
            // optional uint32 grpc_socket_port = 6;
            if (cached_has_bits & 0x00000010u) {
              total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
                  this_._internal_grpc_socket_port());
            }
          }
          return this_.MaybeComputeUnknownFieldsSize(total_size,
                                                     &this_._impl_._cached_size_);
        }

void ConfigMessage::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<ConfigMessage*>(&to_msg);
  auto& from = static_cast<const ConfigMessage&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:astarteplatform.msghub.ConfigMessage)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_realm().empty()) {
    _this->_internal_set_realm(from._internal_realm());
  }
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_device_id(from._internal_device_id());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_set_credentials_secret(from._internal_credentials_secret());
    }
  }
  if (!from._internal_pairing_url().empty()) {
    _this->_internal_set_pairing_url(from._internal_pairing_url());
  }
  if (cached_has_bits & 0x0000001cu) {
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_set_pairing_token(from._internal_pairing_token());
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_internal_set_grpc_socket_host(from._internal_grpc_socket_host());
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.grpc_socket_port_ = from._impl_.grpc_socket_port_;
    }
  }
  _this->_impl_._has_bits_[0] |= cached_has_bits;
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void ConfigMessage::CopyFrom(const ConfigMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:astarteplatform.msghub.ConfigMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void ConfigMessage::InternalSwap(ConfigMessage* PROTOBUF_RESTRICT other) {
  using std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.realm_, &other->_impl_.realm_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.device_id_, &other->_impl_.device_id_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.credentials_secret_, &other->_impl_.credentials_secret_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.pairing_url_, &other->_impl_.pairing_url_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.pairing_token_, &other->_impl_.pairing_token_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.grpc_socket_host_, &other->_impl_.grpc_socket_host_, arena);
        swap(_impl_.grpc_socket_port_, other->_impl_.grpc_socket_port_);
}

::google::protobuf::Metadata ConfigMessage::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// @@protoc_insertion_point(namespace_scope)
}  // namespace msghub
}  // namespace astarteplatform
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google
// @@protoc_insertion_point(global_scope)
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::std::false_type
    _static_init2_ PROTOBUF_UNUSED =
        (::_pbi::AddDescriptors(&descriptor_table_astarteplatform_2fmsghub_2fconfig_2eproto),
         ::std::false_type{});
#include "google/protobuf/port_undef.inc"
