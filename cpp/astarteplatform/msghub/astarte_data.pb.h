// Generated by the protocol buffer compiler.  DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// source: astarteplatform/msghub/astarte_data.proto
// Protobuf C++ Version: 5.29.0

#ifndef astarteplatform_2fmsghub_2fastarte_5fdata_2eproto_2epb_2eh
#define astarteplatform_2fmsghub_2fastarte_5fdata_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>
#include <utility>

#include "google/protobuf/runtime_version.h"
#if PROTOBUF_VERSION != 5029000
#error "Protobuf C++ gencode is built with an incompatible version of"
#error "Protobuf C++ headers/runtime. See"
#error "https://protobuf.dev/support/cross-version-runtime-guarantee/#cpp"
#endif
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_tctable_decl.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/message.h"
#include "google/protobuf/message_lite.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/map.h"  // IWYU pragma: export
#include "google/protobuf/map_entry.h"
#include "google/protobuf/map_field_inl.h"
#include "google/protobuf/unknown_field_set.h"
#include "google/protobuf/timestamp.pb.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_astarteplatform_2fmsghub_2fastarte_5fdata_2eproto

namespace google {
namespace protobuf {
namespace internal {
template <typename T>
::absl::string_view GetAnyMessageName();
}  // namespace internal
}  // namespace protobuf
}  // namespace google

// Internal implementation detail -- do not use these members.
struct TableStruct_astarteplatform_2fmsghub_2fastarte_5fdata_2eproto {
  static const ::uint32_t offsets[];
};
extern const ::google::protobuf::internal::DescriptorTable
    descriptor_table_astarteplatform_2fmsghub_2fastarte_5fdata_2eproto;
namespace astarteplatform {
namespace msghub {
class AstarteBinaryBlobArray;
struct AstarteBinaryBlobArrayDefaultTypeInternal;
extern AstarteBinaryBlobArrayDefaultTypeInternal _AstarteBinaryBlobArray_default_instance_;
class AstarteBooleanArray;
struct AstarteBooleanArrayDefaultTypeInternal;
extern AstarteBooleanArrayDefaultTypeInternal _AstarteBooleanArray_default_instance_;
class AstarteData;
struct AstarteDataDefaultTypeInternal;
extern AstarteDataDefaultTypeInternal _AstarteData_default_instance_;
class AstarteDatastreamIndividual;
struct AstarteDatastreamIndividualDefaultTypeInternal;
extern AstarteDatastreamIndividualDefaultTypeInternal _AstarteDatastreamIndividual_default_instance_;
class AstarteDatastreamObject;
struct AstarteDatastreamObjectDefaultTypeInternal;
extern AstarteDatastreamObjectDefaultTypeInternal _AstarteDatastreamObject_default_instance_;
class AstarteDatastreamObject_DataEntry_DoNotUse;
struct AstarteDatastreamObject_DataEntry_DoNotUseDefaultTypeInternal;
extern AstarteDatastreamObject_DataEntry_DoNotUseDefaultTypeInternal _AstarteDatastreamObject_DataEntry_DoNotUse_default_instance_;
class AstarteDateTimeArray;
struct AstarteDateTimeArrayDefaultTypeInternal;
extern AstarteDateTimeArrayDefaultTypeInternal _AstarteDateTimeArray_default_instance_;
class AstarteDoubleArray;
struct AstarteDoubleArrayDefaultTypeInternal;
extern AstarteDoubleArrayDefaultTypeInternal _AstarteDoubleArray_default_instance_;
class AstarteIntegerArray;
struct AstarteIntegerArrayDefaultTypeInternal;
extern AstarteIntegerArrayDefaultTypeInternal _AstarteIntegerArray_default_instance_;
class AstarteLongIntegerArray;
struct AstarteLongIntegerArrayDefaultTypeInternal;
extern AstarteLongIntegerArrayDefaultTypeInternal _AstarteLongIntegerArray_default_instance_;
class AstartePropertyIndividual;
struct AstartePropertyIndividualDefaultTypeInternal;
extern AstartePropertyIndividualDefaultTypeInternal _AstartePropertyIndividual_default_instance_;
class AstarteStringArray;
struct AstarteStringArrayDefaultTypeInternal;
extern AstarteStringArrayDefaultTypeInternal _AstarteStringArray_default_instance_;
}  // namespace msghub
}  // namespace astarteplatform
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google

namespace astarteplatform {
namespace msghub {

// ===================================================================


// -------------------------------------------------------------------

class AstarteStringArray final
    : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:astarteplatform.msghub.AstarteStringArray) */ {
 public:
  inline AstarteStringArray() : AstarteStringArray(nullptr) {}
  ~AstarteStringArray() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(AstarteStringArray* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(AstarteStringArray));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR AstarteStringArray(
      ::google::protobuf::internal::ConstantInitialized);

  inline AstarteStringArray(const AstarteStringArray& from) : AstarteStringArray(nullptr, from) {}
  inline AstarteStringArray(AstarteStringArray&& from) noexcept
      : AstarteStringArray(nullptr, std::move(from)) {}
  inline AstarteStringArray& operator=(const AstarteStringArray& from) {
    CopyFrom(from);
    return *this;
  }
  inline AstarteStringArray& operator=(AstarteStringArray&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const AstarteStringArray& default_instance() {
    return *internal_default_instance();
  }
  static inline const AstarteStringArray* internal_default_instance() {
    return reinterpret_cast<const AstarteStringArray*>(
        &_AstarteStringArray_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 4;
  friend void swap(AstarteStringArray& a, AstarteStringArray& b) { a.Swap(&b); }
  inline void Swap(AstarteStringArray* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AstarteStringArray* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  AstarteStringArray* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<AstarteStringArray>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const AstarteStringArray& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const AstarteStringArray& from) { AstarteStringArray::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(AstarteStringArray* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "astarteplatform.msghub.AstarteStringArray"; }

 protected:
  explicit AstarteStringArray(::google::protobuf::Arena* arena);
  AstarteStringArray(::google::protobuf::Arena* arena, const AstarteStringArray& from);
  AstarteStringArray(::google::protobuf::Arena* arena, AstarteStringArray&& from) noexcept
      : AstarteStringArray(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kValuesFieldNumber = 1,
  };
  // repeated string values = 1;
  int values_size() const;
  private:
  int _internal_values_size() const;

  public:
  void clear_values() ;
  const std::string& values(int index) const;
  std::string* mutable_values(int index);
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_values(int index, Arg_&& value, Args_... args);
  std::string* add_values();
  template <typename Arg_ = const std::string&, typename... Args_>
  void add_values(Arg_&& value, Args_... args);
  const ::google::protobuf::RepeatedPtrField<std::string>& values() const;
  ::google::protobuf::RepeatedPtrField<std::string>* mutable_values();

  private:
  const ::google::protobuf::RepeatedPtrField<std::string>& _internal_values() const;
  ::google::protobuf::RepeatedPtrField<std::string>* _internal_mutable_values();

  public:
  // @@protoc_insertion_point(class_scope:astarteplatform.msghub.AstarteStringArray)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 1, 0,
      56, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const AstarteStringArray& from_msg);
    ::google::protobuf::RepeatedPtrField<std::string> values_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_astarteplatform_2fmsghub_2fastarte_5fdata_2eproto;
};
// -------------------------------------------------------------------

class AstarteLongIntegerArray final
    : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:astarteplatform.msghub.AstarteLongIntegerArray) */ {
 public:
  inline AstarteLongIntegerArray() : AstarteLongIntegerArray(nullptr) {}
  ~AstarteLongIntegerArray() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(AstarteLongIntegerArray* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(AstarteLongIntegerArray));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR AstarteLongIntegerArray(
      ::google::protobuf::internal::ConstantInitialized);

  inline AstarteLongIntegerArray(const AstarteLongIntegerArray& from) : AstarteLongIntegerArray(nullptr, from) {}
  inline AstarteLongIntegerArray(AstarteLongIntegerArray&& from) noexcept
      : AstarteLongIntegerArray(nullptr, std::move(from)) {}
  inline AstarteLongIntegerArray& operator=(const AstarteLongIntegerArray& from) {
    CopyFrom(from);
    return *this;
  }
  inline AstarteLongIntegerArray& operator=(AstarteLongIntegerArray&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const AstarteLongIntegerArray& default_instance() {
    return *internal_default_instance();
  }
  static inline const AstarteLongIntegerArray* internal_default_instance() {
    return reinterpret_cast<const AstarteLongIntegerArray*>(
        &_AstarteLongIntegerArray_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 3;
  friend void swap(AstarteLongIntegerArray& a, AstarteLongIntegerArray& b) { a.Swap(&b); }
  inline void Swap(AstarteLongIntegerArray* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AstarteLongIntegerArray* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  AstarteLongIntegerArray* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<AstarteLongIntegerArray>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const AstarteLongIntegerArray& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const AstarteLongIntegerArray& from) { AstarteLongIntegerArray::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(AstarteLongIntegerArray* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "astarteplatform.msghub.AstarteLongIntegerArray"; }

 protected:
  explicit AstarteLongIntegerArray(::google::protobuf::Arena* arena);
  AstarteLongIntegerArray(::google::protobuf::Arena* arena, const AstarteLongIntegerArray& from);
  AstarteLongIntegerArray(::google::protobuf::Arena* arena, AstarteLongIntegerArray&& from) noexcept
      : AstarteLongIntegerArray(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kValuesFieldNumber = 1,
  };
  // repeated int64 values = 1;
  int values_size() const;
  private:
  int _internal_values_size() const;

  public:
  void clear_values() ;
  ::int64_t values(int index) const;
  void set_values(int index, ::int64_t value);
  void add_values(::int64_t value);
  const ::google::protobuf::RepeatedField<::int64_t>& values() const;
  ::google::protobuf::RepeatedField<::int64_t>* mutable_values();

  private:
  const ::google::protobuf::RepeatedField<::int64_t>& _internal_values() const;
  ::google::protobuf::RepeatedField<::int64_t>* _internal_mutable_values();

  public:
  // @@protoc_insertion_point(class_scope:astarteplatform.msghub.AstarteLongIntegerArray)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 1, 0,
      0, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const AstarteLongIntegerArray& from_msg);
    ::google::protobuf::RepeatedField<::int64_t> values_;
    ::google::protobuf::internal::CachedSize _values_cached_byte_size_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_astarteplatform_2fmsghub_2fastarte_5fdata_2eproto;
};
// -------------------------------------------------------------------

class AstarteIntegerArray final
    : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:astarteplatform.msghub.AstarteIntegerArray) */ {
 public:
  inline AstarteIntegerArray() : AstarteIntegerArray(nullptr) {}
  ~AstarteIntegerArray() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(AstarteIntegerArray* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(AstarteIntegerArray));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR AstarteIntegerArray(
      ::google::protobuf::internal::ConstantInitialized);

  inline AstarteIntegerArray(const AstarteIntegerArray& from) : AstarteIntegerArray(nullptr, from) {}
  inline AstarteIntegerArray(AstarteIntegerArray&& from) noexcept
      : AstarteIntegerArray(nullptr, std::move(from)) {}
  inline AstarteIntegerArray& operator=(const AstarteIntegerArray& from) {
    CopyFrom(from);
    return *this;
  }
  inline AstarteIntegerArray& operator=(AstarteIntegerArray&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const AstarteIntegerArray& default_instance() {
    return *internal_default_instance();
  }
  static inline const AstarteIntegerArray* internal_default_instance() {
    return reinterpret_cast<const AstarteIntegerArray*>(
        &_AstarteIntegerArray_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 1;
  friend void swap(AstarteIntegerArray& a, AstarteIntegerArray& b) { a.Swap(&b); }
  inline void Swap(AstarteIntegerArray* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AstarteIntegerArray* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  AstarteIntegerArray* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<AstarteIntegerArray>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const AstarteIntegerArray& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const AstarteIntegerArray& from) { AstarteIntegerArray::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(AstarteIntegerArray* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "astarteplatform.msghub.AstarteIntegerArray"; }

 protected:
  explicit AstarteIntegerArray(::google::protobuf::Arena* arena);
  AstarteIntegerArray(::google::protobuf::Arena* arena, const AstarteIntegerArray& from);
  AstarteIntegerArray(::google::protobuf::Arena* arena, AstarteIntegerArray&& from) noexcept
      : AstarteIntegerArray(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kValuesFieldNumber = 1,
  };
  // repeated int32 values = 1;
  int values_size() const;
  private:
  int _internal_values_size() const;

  public:
  void clear_values() ;
  ::int32_t values(int index) const;
  void set_values(int index, ::int32_t value);
  void add_values(::int32_t value);
  const ::google::protobuf::RepeatedField<::int32_t>& values() const;
  ::google::protobuf::RepeatedField<::int32_t>* mutable_values();

  private:
  const ::google::protobuf::RepeatedField<::int32_t>& _internal_values() const;
  ::google::protobuf::RepeatedField<::int32_t>* _internal_mutable_values();

  public:
  // @@protoc_insertion_point(class_scope:astarteplatform.msghub.AstarteIntegerArray)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 1, 0,
      0, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const AstarteIntegerArray& from_msg);
    ::google::protobuf::RepeatedField<::int32_t> values_;
    ::google::protobuf::internal::CachedSize _values_cached_byte_size_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_astarteplatform_2fmsghub_2fastarte_5fdata_2eproto;
};
// -------------------------------------------------------------------

class AstarteDoubleArray final
    : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:astarteplatform.msghub.AstarteDoubleArray) */ {
 public:
  inline AstarteDoubleArray() : AstarteDoubleArray(nullptr) {}
  ~AstarteDoubleArray() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(AstarteDoubleArray* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(AstarteDoubleArray));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR AstarteDoubleArray(
      ::google::protobuf::internal::ConstantInitialized);

  inline AstarteDoubleArray(const AstarteDoubleArray& from) : AstarteDoubleArray(nullptr, from) {}
  inline AstarteDoubleArray(AstarteDoubleArray&& from) noexcept
      : AstarteDoubleArray(nullptr, std::move(from)) {}
  inline AstarteDoubleArray& operator=(const AstarteDoubleArray& from) {
    CopyFrom(from);
    return *this;
  }
  inline AstarteDoubleArray& operator=(AstarteDoubleArray&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const AstarteDoubleArray& default_instance() {
    return *internal_default_instance();
  }
  static inline const AstarteDoubleArray* internal_default_instance() {
    return reinterpret_cast<const AstarteDoubleArray*>(
        &_AstarteDoubleArray_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 0;
  friend void swap(AstarteDoubleArray& a, AstarteDoubleArray& b) { a.Swap(&b); }
  inline void Swap(AstarteDoubleArray* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AstarteDoubleArray* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  AstarteDoubleArray* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<AstarteDoubleArray>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const AstarteDoubleArray& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const AstarteDoubleArray& from) { AstarteDoubleArray::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(AstarteDoubleArray* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "astarteplatform.msghub.AstarteDoubleArray"; }

 protected:
  explicit AstarteDoubleArray(::google::protobuf::Arena* arena);
  AstarteDoubleArray(::google::protobuf::Arena* arena, const AstarteDoubleArray& from);
  AstarteDoubleArray(::google::protobuf::Arena* arena, AstarteDoubleArray&& from) noexcept
      : AstarteDoubleArray(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kValuesFieldNumber = 1,
  };
  // repeated double values = 1;
  int values_size() const;
  private:
  int _internal_values_size() const;

  public:
  void clear_values() ;
  double values(int index) const;
  void set_values(int index, double value);
  void add_values(double value);
  const ::google::protobuf::RepeatedField<double>& values() const;
  ::google::protobuf::RepeatedField<double>* mutable_values();

  private:
  const ::google::protobuf::RepeatedField<double>& _internal_values() const;
  ::google::protobuf::RepeatedField<double>* _internal_mutable_values();

  public:
  // @@protoc_insertion_point(class_scope:astarteplatform.msghub.AstarteDoubleArray)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 1, 0,
      0, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const AstarteDoubleArray& from_msg);
    ::google::protobuf::RepeatedField<double> values_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_astarteplatform_2fmsghub_2fastarte_5fdata_2eproto;
};
// -------------------------------------------------------------------

class AstarteBooleanArray final
    : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:astarteplatform.msghub.AstarteBooleanArray) */ {
 public:
  inline AstarteBooleanArray() : AstarteBooleanArray(nullptr) {}
  ~AstarteBooleanArray() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(AstarteBooleanArray* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(AstarteBooleanArray));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR AstarteBooleanArray(
      ::google::protobuf::internal::ConstantInitialized);

  inline AstarteBooleanArray(const AstarteBooleanArray& from) : AstarteBooleanArray(nullptr, from) {}
  inline AstarteBooleanArray(AstarteBooleanArray&& from) noexcept
      : AstarteBooleanArray(nullptr, std::move(from)) {}
  inline AstarteBooleanArray& operator=(const AstarteBooleanArray& from) {
    CopyFrom(from);
    return *this;
  }
  inline AstarteBooleanArray& operator=(AstarteBooleanArray&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const AstarteBooleanArray& default_instance() {
    return *internal_default_instance();
  }
  static inline const AstarteBooleanArray* internal_default_instance() {
    return reinterpret_cast<const AstarteBooleanArray*>(
        &_AstarteBooleanArray_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 2;
  friend void swap(AstarteBooleanArray& a, AstarteBooleanArray& b) { a.Swap(&b); }
  inline void Swap(AstarteBooleanArray* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AstarteBooleanArray* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  AstarteBooleanArray* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<AstarteBooleanArray>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const AstarteBooleanArray& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const AstarteBooleanArray& from) { AstarteBooleanArray::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(AstarteBooleanArray* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "astarteplatform.msghub.AstarteBooleanArray"; }

 protected:
  explicit AstarteBooleanArray(::google::protobuf::Arena* arena);
  AstarteBooleanArray(::google::protobuf::Arena* arena, const AstarteBooleanArray& from);
  AstarteBooleanArray(::google::protobuf::Arena* arena, AstarteBooleanArray&& from) noexcept
      : AstarteBooleanArray(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kValuesFieldNumber = 1,
  };
  // repeated bool values = 1;
  int values_size() const;
  private:
  int _internal_values_size() const;

  public:
  void clear_values() ;
  bool values(int index) const;
  void set_values(int index, bool value);
  void add_values(bool value);
  const ::google::protobuf::RepeatedField<bool>& values() const;
  ::google::protobuf::RepeatedField<bool>* mutable_values();

  private:
  const ::google::protobuf::RepeatedField<bool>& _internal_values() const;
  ::google::protobuf::RepeatedField<bool>* _internal_mutable_values();

  public:
  // @@protoc_insertion_point(class_scope:astarteplatform.msghub.AstarteBooleanArray)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 1, 0,
      0, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const AstarteBooleanArray& from_msg);
    ::google::protobuf::RepeatedField<bool> values_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_astarteplatform_2fmsghub_2fastarte_5fdata_2eproto;
};
// -------------------------------------------------------------------

class AstarteBinaryBlobArray final
    : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:astarteplatform.msghub.AstarteBinaryBlobArray) */ {
 public:
  inline AstarteBinaryBlobArray() : AstarteBinaryBlobArray(nullptr) {}
  ~AstarteBinaryBlobArray() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(AstarteBinaryBlobArray* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(AstarteBinaryBlobArray));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR AstarteBinaryBlobArray(
      ::google::protobuf::internal::ConstantInitialized);

  inline AstarteBinaryBlobArray(const AstarteBinaryBlobArray& from) : AstarteBinaryBlobArray(nullptr, from) {}
  inline AstarteBinaryBlobArray(AstarteBinaryBlobArray&& from) noexcept
      : AstarteBinaryBlobArray(nullptr, std::move(from)) {}
  inline AstarteBinaryBlobArray& operator=(const AstarteBinaryBlobArray& from) {
    CopyFrom(from);
    return *this;
  }
  inline AstarteBinaryBlobArray& operator=(AstarteBinaryBlobArray&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const AstarteBinaryBlobArray& default_instance() {
    return *internal_default_instance();
  }
  static inline const AstarteBinaryBlobArray* internal_default_instance() {
    return reinterpret_cast<const AstarteBinaryBlobArray*>(
        &_AstarteBinaryBlobArray_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 5;
  friend void swap(AstarteBinaryBlobArray& a, AstarteBinaryBlobArray& b) { a.Swap(&b); }
  inline void Swap(AstarteBinaryBlobArray* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AstarteBinaryBlobArray* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  AstarteBinaryBlobArray* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<AstarteBinaryBlobArray>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const AstarteBinaryBlobArray& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const AstarteBinaryBlobArray& from) { AstarteBinaryBlobArray::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(AstarteBinaryBlobArray* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "astarteplatform.msghub.AstarteBinaryBlobArray"; }

 protected:
  explicit AstarteBinaryBlobArray(::google::protobuf::Arena* arena);
  AstarteBinaryBlobArray(::google::protobuf::Arena* arena, const AstarteBinaryBlobArray& from);
  AstarteBinaryBlobArray(::google::protobuf::Arena* arena, AstarteBinaryBlobArray&& from) noexcept
      : AstarteBinaryBlobArray(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kValuesFieldNumber = 1,
  };
  // repeated bytes values = 1;
  int values_size() const;
  private:
  int _internal_values_size() const;

  public:
  void clear_values() ;
  const std::string& values(int index) const;
  std::string* mutable_values(int index);
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_values(int index, Arg_&& value, Args_... args);
  std::string* add_values();
  template <typename Arg_ = const std::string&, typename... Args_>
  void add_values(Arg_&& value, Args_... args);
  const ::google::protobuf::RepeatedPtrField<std::string>& values() const;
  ::google::protobuf::RepeatedPtrField<std::string>* mutable_values();

  private:
  const ::google::protobuf::RepeatedPtrField<std::string>& _internal_values() const;
  ::google::protobuf::RepeatedPtrField<std::string>* _internal_mutable_values();

  public:
  // @@protoc_insertion_point(class_scope:astarteplatform.msghub.AstarteBinaryBlobArray)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 1, 0,
      0, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const AstarteBinaryBlobArray& from_msg);
    ::google::protobuf::RepeatedPtrField<std::string> values_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_astarteplatform_2fmsghub_2fastarte_5fdata_2eproto;
};
// -------------------------------------------------------------------

class AstarteDateTimeArray final
    : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:astarteplatform.msghub.AstarteDateTimeArray) */ {
 public:
  inline AstarteDateTimeArray() : AstarteDateTimeArray(nullptr) {}
  ~AstarteDateTimeArray() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(AstarteDateTimeArray* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(AstarteDateTimeArray));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR AstarteDateTimeArray(
      ::google::protobuf::internal::ConstantInitialized);

  inline AstarteDateTimeArray(const AstarteDateTimeArray& from) : AstarteDateTimeArray(nullptr, from) {}
  inline AstarteDateTimeArray(AstarteDateTimeArray&& from) noexcept
      : AstarteDateTimeArray(nullptr, std::move(from)) {}
  inline AstarteDateTimeArray& operator=(const AstarteDateTimeArray& from) {
    CopyFrom(from);
    return *this;
  }
  inline AstarteDateTimeArray& operator=(AstarteDateTimeArray&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const AstarteDateTimeArray& default_instance() {
    return *internal_default_instance();
  }
  static inline const AstarteDateTimeArray* internal_default_instance() {
    return reinterpret_cast<const AstarteDateTimeArray*>(
        &_AstarteDateTimeArray_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 6;
  friend void swap(AstarteDateTimeArray& a, AstarteDateTimeArray& b) { a.Swap(&b); }
  inline void Swap(AstarteDateTimeArray* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AstarteDateTimeArray* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  AstarteDateTimeArray* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<AstarteDateTimeArray>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const AstarteDateTimeArray& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const AstarteDateTimeArray& from) { AstarteDateTimeArray::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(AstarteDateTimeArray* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "astarteplatform.msghub.AstarteDateTimeArray"; }

 protected:
  explicit AstarteDateTimeArray(::google::protobuf::Arena* arena);
  AstarteDateTimeArray(::google::protobuf::Arena* arena, const AstarteDateTimeArray& from);
  AstarteDateTimeArray(::google::protobuf::Arena* arena, AstarteDateTimeArray&& from) noexcept
      : AstarteDateTimeArray(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kValuesFieldNumber = 1,
  };
  // repeated .google.protobuf.Timestamp values = 1;
  int values_size() const;
  private:
  int _internal_values_size() const;

  public:
  void clear_values() ;
  ::google::protobuf::Timestamp* mutable_values(int index);
  ::google::protobuf::RepeatedPtrField<::google::protobuf::Timestamp>* mutable_values();

  private:
  const ::google::protobuf::RepeatedPtrField<::google::protobuf::Timestamp>& _internal_values() const;
  ::google::protobuf::RepeatedPtrField<::google::protobuf::Timestamp>* _internal_mutable_values();
  public:
  const ::google::protobuf::Timestamp& values(int index) const;
  ::google::protobuf::Timestamp* add_values();
  const ::google::protobuf::RepeatedPtrField<::google::protobuf::Timestamp>& values() const;
  // @@protoc_insertion_point(class_scope:astarteplatform.msghub.AstarteDateTimeArray)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 1, 1,
      0, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const AstarteDateTimeArray& from_msg);
    ::google::protobuf::RepeatedPtrField< ::google::protobuf::Timestamp > values_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_astarteplatform_2fmsghub_2fastarte_5fdata_2eproto;
};
// -------------------------------------------------------------------

class AstarteData final
    : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:astarteplatform.msghub.AstarteData) */ {
 public:
  inline AstarteData() : AstarteData(nullptr) {}
  ~AstarteData() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(AstarteData* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(AstarteData));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR AstarteData(
      ::google::protobuf::internal::ConstantInitialized);

  inline AstarteData(const AstarteData& from) : AstarteData(nullptr, from) {}
  inline AstarteData(AstarteData&& from) noexcept
      : AstarteData(nullptr, std::move(from)) {}
  inline AstarteData& operator=(const AstarteData& from) {
    CopyFrom(from);
    return *this;
  }
  inline AstarteData& operator=(AstarteData&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const AstarteData& default_instance() {
    return *internal_default_instance();
  }
  enum AstarteDataCase {
    kDouble = 1,
    kInteger = 2,
    kBoolean = 3,
    kLongInteger = 4,
    kString = 5,
    kBinaryBlob = 6,
    kDateTime = 7,
    kDoubleArray = 8,
    kIntegerArray = 9,
    kBooleanArray = 10,
    kLongIntegerArray = 11,
    kStringArray = 12,
    kBinaryBlobArray = 13,
    kDateTimeArray = 14,
    ASTARTE_DATA_NOT_SET = 0,
  };
  static inline const AstarteData* internal_default_instance() {
    return reinterpret_cast<const AstarteData*>(
        &_AstarteData_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 7;
  friend void swap(AstarteData& a, AstarteData& b) { a.Swap(&b); }
  inline void Swap(AstarteData* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AstarteData* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  AstarteData* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<AstarteData>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const AstarteData& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const AstarteData& from) { AstarteData::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(AstarteData* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "astarteplatform.msghub.AstarteData"; }

 protected:
  explicit AstarteData(::google::protobuf::Arena* arena);
  AstarteData(::google::protobuf::Arena* arena, const AstarteData& from);
  AstarteData(::google::protobuf::Arena* arena, AstarteData&& from) noexcept
      : AstarteData(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kDoubleFieldNumber = 1,
    kIntegerFieldNumber = 2,
    kBooleanFieldNumber = 3,
    kLongIntegerFieldNumber = 4,
    kStringFieldNumber = 5,
    kBinaryBlobFieldNumber = 6,
    kDateTimeFieldNumber = 7,
    kDoubleArrayFieldNumber = 8,
    kIntegerArrayFieldNumber = 9,
    kBooleanArrayFieldNumber = 10,
    kLongIntegerArrayFieldNumber = 11,
    kStringArrayFieldNumber = 12,
    kBinaryBlobArrayFieldNumber = 13,
    kDateTimeArrayFieldNumber = 14,
  };
  // double double = 1;
  bool has_double_() const;
  void clear_double_() ;
  double double_() const;
  void set_double_(double value);

  private:
  double _internal_double_() const;
  void _internal_set_double_(double value);

  public:
  // int32 integer = 2;
  bool has_integer() const;
  void clear_integer() ;
  ::int32_t integer() const;
  void set_integer(::int32_t value);

  private:
  ::int32_t _internal_integer() const;
  void _internal_set_integer(::int32_t value);

  public:
  // bool boolean = 3;
  bool has_boolean() const;
  void clear_boolean() ;
  bool boolean() const;
  void set_boolean(bool value);

  private:
  bool _internal_boolean() const;
  void _internal_set_boolean(bool value);

  public:
  // int64 long_integer = 4;
  bool has_long_integer() const;
  void clear_long_integer() ;
  ::int64_t long_integer() const;
  void set_long_integer(::int64_t value);

  private:
  ::int64_t _internal_long_integer() const;
  void _internal_set_long_integer(::int64_t value);

  public:
  // string string = 5;
  bool has_string() const;
  void clear_string() ;
  const std::string& string() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_string(Arg_&& arg, Args_... args);
  std::string* mutable_string();
  PROTOBUF_NODISCARD std::string* release_string();
  void set_allocated_string(std::string* value);

  private:
  const std::string& _internal_string() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_string(
      const std::string& value);
  std::string* _internal_mutable_string();

  public:
  // bytes binary_blob = 6;
  bool has_binary_blob() const;
  void clear_binary_blob() ;
  const std::string& binary_blob() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_binary_blob(Arg_&& arg, Args_... args);
  std::string* mutable_binary_blob();
  PROTOBUF_NODISCARD std::string* release_binary_blob();
  void set_allocated_binary_blob(std::string* value);

  private:
  const std::string& _internal_binary_blob() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_binary_blob(
      const std::string& value);
  std::string* _internal_mutable_binary_blob();

  public:
  // .google.protobuf.Timestamp date_time = 7;
  bool has_date_time() const;
  private:
  bool _internal_has_date_time() const;

  public:
  void clear_date_time() ;
  const ::google::protobuf::Timestamp& date_time() const;
  PROTOBUF_NODISCARD ::google::protobuf::Timestamp* release_date_time();
  ::google::protobuf::Timestamp* mutable_date_time();
  void set_allocated_date_time(::google::protobuf::Timestamp* value);
  void unsafe_arena_set_allocated_date_time(::google::protobuf::Timestamp* value);
  ::google::protobuf::Timestamp* unsafe_arena_release_date_time();

  private:
  const ::google::protobuf::Timestamp& _internal_date_time() const;
  ::google::protobuf::Timestamp* _internal_mutable_date_time();

  public:
  // .astarteplatform.msghub.AstarteDoubleArray double_array = 8;
  bool has_double_array() const;
  private:
  bool _internal_has_double_array() const;

  public:
  void clear_double_array() ;
  const ::astarteplatform::msghub::AstarteDoubleArray& double_array() const;
  PROTOBUF_NODISCARD ::astarteplatform::msghub::AstarteDoubleArray* release_double_array();
  ::astarteplatform::msghub::AstarteDoubleArray* mutable_double_array();
  void set_allocated_double_array(::astarteplatform::msghub::AstarteDoubleArray* value);
  void unsafe_arena_set_allocated_double_array(::astarteplatform::msghub::AstarteDoubleArray* value);
  ::astarteplatform::msghub::AstarteDoubleArray* unsafe_arena_release_double_array();

  private:
  const ::astarteplatform::msghub::AstarteDoubleArray& _internal_double_array() const;
  ::astarteplatform::msghub::AstarteDoubleArray* _internal_mutable_double_array();

  public:
  // .astarteplatform.msghub.AstarteIntegerArray integer_array = 9;
  bool has_integer_array() const;
  private:
  bool _internal_has_integer_array() const;

  public:
  void clear_integer_array() ;
  const ::astarteplatform::msghub::AstarteIntegerArray& integer_array() const;
  PROTOBUF_NODISCARD ::astarteplatform::msghub::AstarteIntegerArray* release_integer_array();
  ::astarteplatform::msghub::AstarteIntegerArray* mutable_integer_array();
  void set_allocated_integer_array(::astarteplatform::msghub::AstarteIntegerArray* value);
  void unsafe_arena_set_allocated_integer_array(::astarteplatform::msghub::AstarteIntegerArray* value);
  ::astarteplatform::msghub::AstarteIntegerArray* unsafe_arena_release_integer_array();

  private:
  const ::astarteplatform::msghub::AstarteIntegerArray& _internal_integer_array() const;
  ::astarteplatform::msghub::AstarteIntegerArray* _internal_mutable_integer_array();

  public:
  // .astarteplatform.msghub.AstarteBooleanArray boolean_array = 10;
  bool has_boolean_array() const;
  private:
  bool _internal_has_boolean_array() const;

  public:
  void clear_boolean_array() ;
  const ::astarteplatform::msghub::AstarteBooleanArray& boolean_array() const;
  PROTOBUF_NODISCARD ::astarteplatform::msghub::AstarteBooleanArray* release_boolean_array();
  ::astarteplatform::msghub::AstarteBooleanArray* mutable_boolean_array();
  void set_allocated_boolean_array(::astarteplatform::msghub::AstarteBooleanArray* value);
  void unsafe_arena_set_allocated_boolean_array(::astarteplatform::msghub::AstarteBooleanArray* value);
  ::astarteplatform::msghub::AstarteBooleanArray* unsafe_arena_release_boolean_array();

  private:
  const ::astarteplatform::msghub::AstarteBooleanArray& _internal_boolean_array() const;
  ::astarteplatform::msghub::AstarteBooleanArray* _internal_mutable_boolean_array();

  public:
  // .astarteplatform.msghub.AstarteLongIntegerArray long_integer_array = 11;
  bool has_long_integer_array() const;
  private:
  bool _internal_has_long_integer_array() const;

  public:
  void clear_long_integer_array() ;
  const ::astarteplatform::msghub::AstarteLongIntegerArray& long_integer_array() const;
  PROTOBUF_NODISCARD ::astarteplatform::msghub::AstarteLongIntegerArray* release_long_integer_array();
  ::astarteplatform::msghub::AstarteLongIntegerArray* mutable_long_integer_array();
  void set_allocated_long_integer_array(::astarteplatform::msghub::AstarteLongIntegerArray* value);
  void unsafe_arena_set_allocated_long_integer_array(::astarteplatform::msghub::AstarteLongIntegerArray* value);
  ::astarteplatform::msghub::AstarteLongIntegerArray* unsafe_arena_release_long_integer_array();

  private:
  const ::astarteplatform::msghub::AstarteLongIntegerArray& _internal_long_integer_array() const;
  ::astarteplatform::msghub::AstarteLongIntegerArray* _internal_mutable_long_integer_array();

  public:
  // .astarteplatform.msghub.AstarteStringArray string_array = 12;
  bool has_string_array() const;
  private:
  bool _internal_has_string_array() const;

  public:
  void clear_string_array() ;
  const ::astarteplatform::msghub::AstarteStringArray& string_array() const;
  PROTOBUF_NODISCARD ::astarteplatform::msghub::AstarteStringArray* release_string_array();
  ::astarteplatform::msghub::AstarteStringArray* mutable_string_array();
  void set_allocated_string_array(::astarteplatform::msghub::AstarteStringArray* value);
  void unsafe_arena_set_allocated_string_array(::astarteplatform::msghub::AstarteStringArray* value);
  ::astarteplatform::msghub::AstarteStringArray* unsafe_arena_release_string_array();

  private:
  const ::astarteplatform::msghub::AstarteStringArray& _internal_string_array() const;
  ::astarteplatform::msghub::AstarteStringArray* _internal_mutable_string_array();

  public:
  // .astarteplatform.msghub.AstarteBinaryBlobArray binary_blob_array = 13;
  bool has_binary_blob_array() const;
  private:
  bool _internal_has_binary_blob_array() const;

  public:
  void clear_binary_blob_array() ;
  const ::astarteplatform::msghub::AstarteBinaryBlobArray& binary_blob_array() const;
  PROTOBUF_NODISCARD ::astarteplatform::msghub::AstarteBinaryBlobArray* release_binary_blob_array();
  ::astarteplatform::msghub::AstarteBinaryBlobArray* mutable_binary_blob_array();
  void set_allocated_binary_blob_array(::astarteplatform::msghub::AstarteBinaryBlobArray* value);
  void unsafe_arena_set_allocated_binary_blob_array(::astarteplatform::msghub::AstarteBinaryBlobArray* value);
  ::astarteplatform::msghub::AstarteBinaryBlobArray* unsafe_arena_release_binary_blob_array();

  private:
  const ::astarteplatform::msghub::AstarteBinaryBlobArray& _internal_binary_blob_array() const;
  ::astarteplatform::msghub::AstarteBinaryBlobArray* _internal_mutable_binary_blob_array();

  public:
  // .astarteplatform.msghub.AstarteDateTimeArray date_time_array = 14;
  bool has_date_time_array() const;
  private:
  bool _internal_has_date_time_array() const;

  public:
  void clear_date_time_array() ;
  const ::astarteplatform::msghub::AstarteDateTimeArray& date_time_array() const;
  PROTOBUF_NODISCARD ::astarteplatform::msghub::AstarteDateTimeArray* release_date_time_array();
  ::astarteplatform::msghub::AstarteDateTimeArray* mutable_date_time_array();
  void set_allocated_date_time_array(::astarteplatform::msghub::AstarteDateTimeArray* value);
  void unsafe_arena_set_allocated_date_time_array(::astarteplatform::msghub::AstarteDateTimeArray* value);
  ::astarteplatform::msghub::AstarteDateTimeArray* unsafe_arena_release_date_time_array();

  private:
  const ::astarteplatform::msghub::AstarteDateTimeArray& _internal_date_time_array() const;
  ::astarteplatform::msghub::AstarteDateTimeArray* _internal_mutable_date_time_array();

  public:
  void clear_astarte_data();
  AstarteDataCase astarte_data_case() const;
  // @@protoc_insertion_point(class_scope:astarteplatform.msghub.AstarteData)
 private:
  class _Internal;
  void set_has_double_();
  void set_has_integer();
  void set_has_boolean();
  void set_has_long_integer();
  void set_has_string();
  void set_has_binary_blob();
  void set_has_date_time();
  void set_has_double_array();
  void set_has_integer_array();
  void set_has_boolean_array();
  void set_has_long_integer_array();
  void set_has_string_array();
  void set_has_binary_blob_array();
  void set_has_date_time_array();
  inline bool has_astarte_data() const;
  inline void clear_has_astarte_data();
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 14, 8,
      57, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const AstarteData& from_msg);
    union AstarteDataUnion {
      constexpr AstarteDataUnion() : _constinit_{} {}
      ::google::protobuf::internal::ConstantInitialized _constinit_;
      double double__;
      ::int32_t integer_;
      bool boolean_;
      ::int64_t long_integer_;
      ::google::protobuf::internal::ArenaStringPtr string_;
      ::google::protobuf::internal::ArenaStringPtr binary_blob_;
      ::google::protobuf::Timestamp* date_time_;
      ::astarteplatform::msghub::AstarteDoubleArray* double_array_;
      ::astarteplatform::msghub::AstarteIntegerArray* integer_array_;
      ::astarteplatform::msghub::AstarteBooleanArray* boolean_array_;
      ::astarteplatform::msghub::AstarteLongIntegerArray* long_integer_array_;
      ::astarteplatform::msghub::AstarteStringArray* string_array_;
      ::astarteplatform::msghub::AstarteBinaryBlobArray* binary_blob_array_;
      ::astarteplatform::msghub::AstarteDateTimeArray* date_time_array_;
    } astarte_data_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    ::uint32_t _oneof_case_[1];
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_astarteplatform_2fmsghub_2fastarte_5fdata_2eproto;
};
// -------------------------------------------------------------------

class AstartePropertyIndividual final
    : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:astarteplatform.msghub.AstartePropertyIndividual) */ {
 public:
  inline AstartePropertyIndividual() : AstartePropertyIndividual(nullptr) {}
  ~AstartePropertyIndividual() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(AstartePropertyIndividual* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(AstartePropertyIndividual));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR AstartePropertyIndividual(
      ::google::protobuf::internal::ConstantInitialized);

  inline AstartePropertyIndividual(const AstartePropertyIndividual& from) : AstartePropertyIndividual(nullptr, from) {}
  inline AstartePropertyIndividual(AstartePropertyIndividual&& from) noexcept
      : AstartePropertyIndividual(nullptr, std::move(from)) {}
  inline AstartePropertyIndividual& operator=(const AstartePropertyIndividual& from) {
    CopyFrom(from);
    return *this;
  }
  inline AstartePropertyIndividual& operator=(AstartePropertyIndividual&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const AstartePropertyIndividual& default_instance() {
    return *internal_default_instance();
  }
  static inline const AstartePropertyIndividual* internal_default_instance() {
    return reinterpret_cast<const AstartePropertyIndividual*>(
        &_AstartePropertyIndividual_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 11;
  friend void swap(AstartePropertyIndividual& a, AstartePropertyIndividual& b) { a.Swap(&b); }
  inline void Swap(AstartePropertyIndividual* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AstartePropertyIndividual* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  AstartePropertyIndividual* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<AstartePropertyIndividual>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const AstartePropertyIndividual& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const AstartePropertyIndividual& from) { AstartePropertyIndividual::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(AstartePropertyIndividual* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "astarteplatform.msghub.AstartePropertyIndividual"; }

 protected:
  explicit AstartePropertyIndividual(::google::protobuf::Arena* arena);
  AstartePropertyIndividual(::google::protobuf::Arena* arena, const AstartePropertyIndividual& from);
  AstartePropertyIndividual(::google::protobuf::Arena* arena, AstartePropertyIndividual&& from) noexcept
      : AstartePropertyIndividual(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kDataFieldNumber = 1,
  };
  // optional .astarteplatform.msghub.AstarteData data = 1;
  bool has_data() const;
  void clear_data() ;
  const ::astarteplatform::msghub::AstarteData& data() const;
  PROTOBUF_NODISCARD ::astarteplatform::msghub::AstarteData* release_data();
  ::astarteplatform::msghub::AstarteData* mutable_data();
  void set_allocated_data(::astarteplatform::msghub::AstarteData* value);
  void unsafe_arena_set_allocated_data(::astarteplatform::msghub::AstarteData* value);
  ::astarteplatform::msghub::AstarteData* unsafe_arena_release_data();

  private:
  const ::astarteplatform::msghub::AstarteData& _internal_data() const;
  ::astarteplatform::msghub::AstarteData* _internal_mutable_data();

  public:
  // @@protoc_insertion_point(class_scope:astarteplatform.msghub.AstartePropertyIndividual)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 1, 1,
      0, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const AstartePropertyIndividual& from_msg);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    ::astarteplatform::msghub::AstarteData* data_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_astarteplatform_2fmsghub_2fastarte_5fdata_2eproto;
};
// -------------------------------------------------------------------

class AstarteDatastreamObject_DataEntry_DoNotUse final
    : public ::google::protobuf::internal::MapEntry<
          std::string, ::google::protobuf::Message,
          ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
          ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE> {
 public:
  using SuperType = ::google::protobuf::internal::MapEntry<
      std::string, ::google::protobuf::Message,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE>;
  AstarteDatastreamObject_DataEntry_DoNotUse();
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR AstarteDatastreamObject_DataEntry_DoNotUse(
      ::google::protobuf::internal::ConstantInitialized);
  explicit AstarteDatastreamObject_DataEntry_DoNotUse(::google::protobuf::Arena* arena);
  static const AstarteDatastreamObject_DataEntry_DoNotUse* internal_default_instance() {
    return reinterpret_cast<const AstarteDatastreamObject_DataEntry_DoNotUse*>(
        &_AstarteDatastreamObject_DataEntry_DoNotUse_default_instance_);
  }


 private:
  friend class ::google::protobuf::MessageLite;
  friend struct ::TableStruct_astarteplatform_2fmsghub_2fastarte_5fdata_2eproto;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 1,
      68, 2>
      _table_;

  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;
};
// -------------------------------------------------------------------

class AstarteDatastreamIndividual final
    : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:astarteplatform.msghub.AstarteDatastreamIndividual) */ {
 public:
  inline AstarteDatastreamIndividual() : AstarteDatastreamIndividual(nullptr) {}
  ~AstarteDatastreamIndividual() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(AstarteDatastreamIndividual* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(AstarteDatastreamIndividual));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR AstarteDatastreamIndividual(
      ::google::protobuf::internal::ConstantInitialized);

  inline AstarteDatastreamIndividual(const AstarteDatastreamIndividual& from) : AstarteDatastreamIndividual(nullptr, from) {}
  inline AstarteDatastreamIndividual(AstarteDatastreamIndividual&& from) noexcept
      : AstarteDatastreamIndividual(nullptr, std::move(from)) {}
  inline AstarteDatastreamIndividual& operator=(const AstarteDatastreamIndividual& from) {
    CopyFrom(from);
    return *this;
  }
  inline AstarteDatastreamIndividual& operator=(AstarteDatastreamIndividual&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const AstarteDatastreamIndividual& default_instance() {
    return *internal_default_instance();
  }
  static inline const AstarteDatastreamIndividual* internal_default_instance() {
    return reinterpret_cast<const AstarteDatastreamIndividual*>(
        &_AstarteDatastreamIndividual_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 8;
  friend void swap(AstarteDatastreamIndividual& a, AstarteDatastreamIndividual& b) { a.Swap(&b); }
  inline void Swap(AstarteDatastreamIndividual* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AstarteDatastreamIndividual* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  AstarteDatastreamIndividual* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<AstarteDatastreamIndividual>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const AstarteDatastreamIndividual& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const AstarteDatastreamIndividual& from) { AstarteDatastreamIndividual::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(AstarteDatastreamIndividual* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "astarteplatform.msghub.AstarteDatastreamIndividual"; }

 protected:
  explicit AstarteDatastreamIndividual(::google::protobuf::Arena* arena);
  AstarteDatastreamIndividual(::google::protobuf::Arena* arena, const AstarteDatastreamIndividual& from);
  AstarteDatastreamIndividual(::google::protobuf::Arena* arena, AstarteDatastreamIndividual&& from) noexcept
      : AstarteDatastreamIndividual(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kDataFieldNumber = 1,
  };
  // .astarteplatform.msghub.AstarteData data = 1;
  bool has_data() const;
  void clear_data() ;
  const ::astarteplatform::msghub::AstarteData& data() const;
  PROTOBUF_NODISCARD ::astarteplatform::msghub::AstarteData* release_data();
  ::astarteplatform::msghub::AstarteData* mutable_data();
  void set_allocated_data(::astarteplatform::msghub::AstarteData* value);
  void unsafe_arena_set_allocated_data(::astarteplatform::msghub::AstarteData* value);
  ::astarteplatform::msghub::AstarteData* unsafe_arena_release_data();

  private:
  const ::astarteplatform::msghub::AstarteData& _internal_data() const;
  ::astarteplatform::msghub::AstarteData* _internal_mutable_data();

  public:
  // @@protoc_insertion_point(class_scope:astarteplatform.msghub.AstarteDatastreamIndividual)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 1, 1,
      0, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const AstarteDatastreamIndividual& from_msg);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    ::astarteplatform::msghub::AstarteData* data_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_astarteplatform_2fmsghub_2fastarte_5fdata_2eproto;
};
// -------------------------------------------------------------------

class AstarteDatastreamObject final
    : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:astarteplatform.msghub.AstarteDatastreamObject) */ {
 public:
  inline AstarteDatastreamObject() : AstarteDatastreamObject(nullptr) {}
  ~AstarteDatastreamObject() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(AstarteDatastreamObject* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(AstarteDatastreamObject));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR AstarteDatastreamObject(
      ::google::protobuf::internal::ConstantInitialized);

  inline AstarteDatastreamObject(const AstarteDatastreamObject& from) : AstarteDatastreamObject(nullptr, from) {}
  inline AstarteDatastreamObject(AstarteDatastreamObject&& from) noexcept
      : AstarteDatastreamObject(nullptr, std::move(from)) {}
  inline AstarteDatastreamObject& operator=(const AstarteDatastreamObject& from) {
    CopyFrom(from);
    return *this;
  }
  inline AstarteDatastreamObject& operator=(AstarteDatastreamObject&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const AstarteDatastreamObject& default_instance() {
    return *internal_default_instance();
  }
  static inline const AstarteDatastreamObject* internal_default_instance() {
    return reinterpret_cast<const AstarteDatastreamObject*>(
        &_AstarteDatastreamObject_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 10;
  friend void swap(AstarteDatastreamObject& a, AstarteDatastreamObject& b) { a.Swap(&b); }
  inline void Swap(AstarteDatastreamObject* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AstarteDatastreamObject* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  AstarteDatastreamObject* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<AstarteDatastreamObject>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const AstarteDatastreamObject& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const AstarteDatastreamObject& from) { AstarteDatastreamObject::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(AstarteDatastreamObject* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "astarteplatform.msghub.AstarteDatastreamObject"; }

 protected:
  explicit AstarteDatastreamObject(::google::protobuf::Arena* arena);
  AstarteDatastreamObject(::google::protobuf::Arena* arena, const AstarteDatastreamObject& from);
  AstarteDatastreamObject(::google::protobuf::Arena* arena, AstarteDatastreamObject&& from) noexcept
      : AstarteDatastreamObject(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kDataFieldNumber = 1,
  };
  // map<string, .astarteplatform.msghub.AstarteData> data = 1;
  int data_size() const;
  private:
  int _internal_data_size() const;

  public:
  void clear_data() ;
  const ::google::protobuf::Map<std::string, ::astarteplatform::msghub::AstarteData>& data() const;
  ::google::protobuf::Map<std::string, ::astarteplatform::msghub::AstarteData>* mutable_data();

  private:
  const ::google::protobuf::Map<std::string, ::astarteplatform::msghub::AstarteData>& _internal_data() const;
  ::google::protobuf::Map<std::string, ::astarteplatform::msghub::AstarteData>* _internal_mutable_data();

  public:
  // @@protoc_insertion_point(class_scope:astarteplatform.msghub.AstarteDatastreamObject)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 1, 2,
      59, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const AstarteDatastreamObject& from_msg);
    ::google::protobuf::internal::MapField<AstarteDatastreamObject_DataEntry_DoNotUse, std::string, ::astarteplatform::msghub::AstarteData,
                      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
                      ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE>
        data_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_astarteplatform_2fmsghub_2fastarte_5fdata_2eproto;
};

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// AstarteDoubleArray

// repeated double values = 1;
inline int AstarteDoubleArray::_internal_values_size() const {
  return _internal_values().size();
}
inline int AstarteDoubleArray::values_size() const {
  return _internal_values_size();
}
inline void AstarteDoubleArray::clear_values() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.values_.Clear();
}
inline double AstarteDoubleArray::values(int index) const {
  // @@protoc_insertion_point(field_get:astarteplatform.msghub.AstarteDoubleArray.values)
  return _internal_values().Get(index);
}
inline void AstarteDoubleArray::set_values(int index, double value) {
  _internal_mutable_values()->Set(index, value);
  // @@protoc_insertion_point(field_set:astarteplatform.msghub.AstarteDoubleArray.values)
}
inline void AstarteDoubleArray::add_values(double value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _internal_mutable_values()->Add(value);
  // @@protoc_insertion_point(field_add:astarteplatform.msghub.AstarteDoubleArray.values)
}
inline const ::google::protobuf::RepeatedField<double>& AstarteDoubleArray::values() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:astarteplatform.msghub.AstarteDoubleArray.values)
  return _internal_values();
}
inline ::google::protobuf::RepeatedField<double>* AstarteDoubleArray::mutable_values()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:astarteplatform.msghub.AstarteDoubleArray.values)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_values();
}
inline const ::google::protobuf::RepeatedField<double>&
AstarteDoubleArray::_internal_values() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.values_;
}
inline ::google::protobuf::RepeatedField<double>* AstarteDoubleArray::_internal_mutable_values() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.values_;
}

// -------------------------------------------------------------------

// AstarteIntegerArray

// repeated int32 values = 1;
inline int AstarteIntegerArray::_internal_values_size() const {
  return _internal_values().size();
}
inline int AstarteIntegerArray::values_size() const {
  return _internal_values_size();
}
inline void AstarteIntegerArray::clear_values() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.values_.Clear();
}
inline ::int32_t AstarteIntegerArray::values(int index) const {
  // @@protoc_insertion_point(field_get:astarteplatform.msghub.AstarteIntegerArray.values)
  return _internal_values().Get(index);
}
inline void AstarteIntegerArray::set_values(int index, ::int32_t value) {
  _internal_mutable_values()->Set(index, value);
  // @@protoc_insertion_point(field_set:astarteplatform.msghub.AstarteIntegerArray.values)
}
inline void AstarteIntegerArray::add_values(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _internal_mutable_values()->Add(value);
  // @@protoc_insertion_point(field_add:astarteplatform.msghub.AstarteIntegerArray.values)
}
inline const ::google::protobuf::RepeatedField<::int32_t>& AstarteIntegerArray::values() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:astarteplatform.msghub.AstarteIntegerArray.values)
  return _internal_values();
}
inline ::google::protobuf::RepeatedField<::int32_t>* AstarteIntegerArray::mutable_values()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:astarteplatform.msghub.AstarteIntegerArray.values)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_values();
}
inline const ::google::protobuf::RepeatedField<::int32_t>&
AstarteIntegerArray::_internal_values() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.values_;
}
inline ::google::protobuf::RepeatedField<::int32_t>* AstarteIntegerArray::_internal_mutable_values() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.values_;
}

// -------------------------------------------------------------------

// AstarteBooleanArray

// repeated bool values = 1;
inline int AstarteBooleanArray::_internal_values_size() const {
  return _internal_values().size();
}
inline int AstarteBooleanArray::values_size() const {
  return _internal_values_size();
}
inline void AstarteBooleanArray::clear_values() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.values_.Clear();
}
inline bool AstarteBooleanArray::values(int index) const {
  // @@protoc_insertion_point(field_get:astarteplatform.msghub.AstarteBooleanArray.values)
  return _internal_values().Get(index);
}
inline void AstarteBooleanArray::set_values(int index, bool value) {
  _internal_mutable_values()->Set(index, value);
  // @@protoc_insertion_point(field_set:astarteplatform.msghub.AstarteBooleanArray.values)
}
inline void AstarteBooleanArray::add_values(bool value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _internal_mutable_values()->Add(value);
  // @@protoc_insertion_point(field_add:astarteplatform.msghub.AstarteBooleanArray.values)
}
inline const ::google::protobuf::RepeatedField<bool>& AstarteBooleanArray::values() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:astarteplatform.msghub.AstarteBooleanArray.values)
  return _internal_values();
}
inline ::google::protobuf::RepeatedField<bool>* AstarteBooleanArray::mutable_values()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:astarteplatform.msghub.AstarteBooleanArray.values)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_values();
}
inline const ::google::protobuf::RepeatedField<bool>&
AstarteBooleanArray::_internal_values() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.values_;
}
inline ::google::protobuf::RepeatedField<bool>* AstarteBooleanArray::_internal_mutable_values() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.values_;
}

// -------------------------------------------------------------------

// AstarteLongIntegerArray

// repeated int64 values = 1;
inline int AstarteLongIntegerArray::_internal_values_size() const {
  return _internal_values().size();
}
inline int AstarteLongIntegerArray::values_size() const {
  return _internal_values_size();
}
inline void AstarteLongIntegerArray::clear_values() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.values_.Clear();
}
inline ::int64_t AstarteLongIntegerArray::values(int index) const {
  // @@protoc_insertion_point(field_get:astarteplatform.msghub.AstarteLongIntegerArray.values)
  return _internal_values().Get(index);
}
inline void AstarteLongIntegerArray::set_values(int index, ::int64_t value) {
  _internal_mutable_values()->Set(index, value);
  // @@protoc_insertion_point(field_set:astarteplatform.msghub.AstarteLongIntegerArray.values)
}
inline void AstarteLongIntegerArray::add_values(::int64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _internal_mutable_values()->Add(value);
  // @@protoc_insertion_point(field_add:astarteplatform.msghub.AstarteLongIntegerArray.values)
}
inline const ::google::protobuf::RepeatedField<::int64_t>& AstarteLongIntegerArray::values() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:astarteplatform.msghub.AstarteLongIntegerArray.values)
  return _internal_values();
}
inline ::google::protobuf::RepeatedField<::int64_t>* AstarteLongIntegerArray::mutable_values()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:astarteplatform.msghub.AstarteLongIntegerArray.values)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_values();
}
inline const ::google::protobuf::RepeatedField<::int64_t>&
AstarteLongIntegerArray::_internal_values() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.values_;
}
inline ::google::protobuf::RepeatedField<::int64_t>* AstarteLongIntegerArray::_internal_mutable_values() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.values_;
}

// -------------------------------------------------------------------

// AstarteStringArray

// repeated string values = 1;
inline int AstarteStringArray::_internal_values_size() const {
  return _internal_values().size();
}
inline int AstarteStringArray::values_size() const {
  return _internal_values_size();
}
inline void AstarteStringArray::clear_values() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.values_.Clear();
}
inline std::string* AstarteStringArray::add_values() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  std::string* _s = _internal_mutable_values()->Add();
  // @@protoc_insertion_point(field_add_mutable:astarteplatform.msghub.AstarteStringArray.values)
  return _s;
}
inline const std::string& AstarteStringArray::values(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:astarteplatform.msghub.AstarteStringArray.values)
  return _internal_values().Get(index);
}
inline std::string* AstarteStringArray::mutable_values(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:astarteplatform.msghub.AstarteStringArray.values)
  return _internal_mutable_values()->Mutable(index);
}
template <typename Arg_, typename... Args_>
inline void AstarteStringArray::set_values(int index, Arg_&& value, Args_... args) {
  ::google::protobuf::internal::AssignToString(
      *_internal_mutable_values()->Mutable(index),
      std::forward<Arg_>(value), args... );
  // @@protoc_insertion_point(field_set:astarteplatform.msghub.AstarteStringArray.values)
}
template <typename Arg_, typename... Args_>
inline void AstarteStringArray::add_values(Arg_&& value, Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::google::protobuf::internal::AddToRepeatedPtrField(*_internal_mutable_values(),
                               std::forward<Arg_>(value),
                               args... );
  // @@protoc_insertion_point(field_add:astarteplatform.msghub.AstarteStringArray.values)
}
inline const ::google::protobuf::RepeatedPtrField<std::string>&
AstarteStringArray::values() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:astarteplatform.msghub.AstarteStringArray.values)
  return _internal_values();
}
inline ::google::protobuf::RepeatedPtrField<std::string>*
AstarteStringArray::mutable_values() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:astarteplatform.msghub.AstarteStringArray.values)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_values();
}
inline const ::google::protobuf::RepeatedPtrField<std::string>&
AstarteStringArray::_internal_values() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.values_;
}
inline ::google::protobuf::RepeatedPtrField<std::string>*
AstarteStringArray::_internal_mutable_values() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.values_;
}

// -------------------------------------------------------------------

// AstarteBinaryBlobArray

// repeated bytes values = 1;
inline int AstarteBinaryBlobArray::_internal_values_size() const {
  return _internal_values().size();
}
inline int AstarteBinaryBlobArray::values_size() const {
  return _internal_values_size();
}
inline void AstarteBinaryBlobArray::clear_values() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.values_.Clear();
}
inline std::string* AstarteBinaryBlobArray::add_values() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  std::string* _s = _internal_mutable_values()->Add();
  // @@protoc_insertion_point(field_add_mutable:astarteplatform.msghub.AstarteBinaryBlobArray.values)
  return _s;
}
inline const std::string& AstarteBinaryBlobArray::values(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:astarteplatform.msghub.AstarteBinaryBlobArray.values)
  return _internal_values().Get(index);
}
inline std::string* AstarteBinaryBlobArray::mutable_values(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:astarteplatform.msghub.AstarteBinaryBlobArray.values)
  return _internal_mutable_values()->Mutable(index);
}
template <typename Arg_, typename... Args_>
inline void AstarteBinaryBlobArray::set_values(int index, Arg_&& value, Args_... args) {
  ::google::protobuf::internal::AssignToString(
      *_internal_mutable_values()->Mutable(index),
      std::forward<Arg_>(value), args... , ::google::protobuf::internal::BytesTag{});
  // @@protoc_insertion_point(field_set:astarteplatform.msghub.AstarteBinaryBlobArray.values)
}
template <typename Arg_, typename... Args_>
inline void AstarteBinaryBlobArray::add_values(Arg_&& value, Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::google::protobuf::internal::AddToRepeatedPtrField(*_internal_mutable_values(),
                               std::forward<Arg_>(value),
                               args... , ::google::protobuf::internal::BytesTag{});
  // @@protoc_insertion_point(field_add:astarteplatform.msghub.AstarteBinaryBlobArray.values)
}
inline const ::google::protobuf::RepeatedPtrField<std::string>&
AstarteBinaryBlobArray::values() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:astarteplatform.msghub.AstarteBinaryBlobArray.values)
  return _internal_values();
}
inline ::google::protobuf::RepeatedPtrField<std::string>*
AstarteBinaryBlobArray::mutable_values() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:astarteplatform.msghub.AstarteBinaryBlobArray.values)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_values();
}
inline const ::google::protobuf::RepeatedPtrField<std::string>&
AstarteBinaryBlobArray::_internal_values() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.values_;
}
inline ::google::protobuf::RepeatedPtrField<std::string>*
AstarteBinaryBlobArray::_internal_mutable_values() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.values_;
}

// -------------------------------------------------------------------

// AstarteDateTimeArray

// repeated .google.protobuf.Timestamp values = 1;
inline int AstarteDateTimeArray::_internal_values_size() const {
  return _internal_values().size();
}
inline int AstarteDateTimeArray::values_size() const {
  return _internal_values_size();
}
inline ::google::protobuf::Timestamp* AstarteDateTimeArray::mutable_values(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:astarteplatform.msghub.AstarteDateTimeArray.values)
  return _internal_mutable_values()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField<::google::protobuf::Timestamp>* AstarteDateTimeArray::mutable_values()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:astarteplatform.msghub.AstarteDateTimeArray.values)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_values();
}
inline const ::google::protobuf::Timestamp& AstarteDateTimeArray::values(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:astarteplatform.msghub.AstarteDateTimeArray.values)
  return _internal_values().Get(index);
}
inline ::google::protobuf::Timestamp* AstarteDateTimeArray::add_values() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::google::protobuf::Timestamp* _add = _internal_mutable_values()->Add();
  // @@protoc_insertion_point(field_add:astarteplatform.msghub.AstarteDateTimeArray.values)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField<::google::protobuf::Timestamp>& AstarteDateTimeArray::values() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:astarteplatform.msghub.AstarteDateTimeArray.values)
  return _internal_values();
}
inline const ::google::protobuf::RepeatedPtrField<::google::protobuf::Timestamp>&
AstarteDateTimeArray::_internal_values() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.values_;
}
inline ::google::protobuf::RepeatedPtrField<::google::protobuf::Timestamp>*
AstarteDateTimeArray::_internal_mutable_values() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.values_;
}

// -------------------------------------------------------------------

// AstarteData

// double double = 1;
inline bool AstarteData::has_double_() const {
  return astarte_data_case() == kDouble;
}
inline void AstarteData::set_has_double_() {
  _impl_._oneof_case_[0] = kDouble;
}
inline void AstarteData::clear_double_() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (astarte_data_case() == kDouble) {
    _impl_.astarte_data_.double__ = 0;
    clear_has_astarte_data();
  }
}
inline double AstarteData::double_() const {
  // @@protoc_insertion_point(field_get:astarteplatform.msghub.AstarteData.double)
  return _internal_double_();
}
inline void AstarteData::set_double_(double value) {
  if (astarte_data_case() != kDouble) {
    clear_astarte_data();
    set_has_double_();
  }
  _impl_.astarte_data_.double__ = value;
  // @@protoc_insertion_point(field_set:astarteplatform.msghub.AstarteData.double)
}
inline double AstarteData::_internal_double_() const {
  if (astarte_data_case() == kDouble) {
    return _impl_.astarte_data_.double__;
  }
  return 0;
}

// int32 integer = 2;
inline bool AstarteData::has_integer() const {
  return astarte_data_case() == kInteger;
}
inline void AstarteData::set_has_integer() {
  _impl_._oneof_case_[0] = kInteger;
}
inline void AstarteData::clear_integer() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (astarte_data_case() == kInteger) {
    _impl_.astarte_data_.integer_ = 0;
    clear_has_astarte_data();
  }
}
inline ::int32_t AstarteData::integer() const {
  // @@protoc_insertion_point(field_get:astarteplatform.msghub.AstarteData.integer)
  return _internal_integer();
}
inline void AstarteData::set_integer(::int32_t value) {
  if (astarte_data_case() != kInteger) {
    clear_astarte_data();
    set_has_integer();
  }
  _impl_.astarte_data_.integer_ = value;
  // @@protoc_insertion_point(field_set:astarteplatform.msghub.AstarteData.integer)
}
inline ::int32_t AstarteData::_internal_integer() const {
  if (astarte_data_case() == kInteger) {
    return _impl_.astarte_data_.integer_;
  }
  return 0;
}

// bool boolean = 3;
inline bool AstarteData::has_boolean() const {
  return astarte_data_case() == kBoolean;
}
inline void AstarteData::set_has_boolean() {
  _impl_._oneof_case_[0] = kBoolean;
}
inline void AstarteData::clear_boolean() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (astarte_data_case() == kBoolean) {
    _impl_.astarte_data_.boolean_ = false;
    clear_has_astarte_data();
  }
}
inline bool AstarteData::boolean() const {
  // @@protoc_insertion_point(field_get:astarteplatform.msghub.AstarteData.boolean)
  return _internal_boolean();
}
inline void AstarteData::set_boolean(bool value) {
  if (astarte_data_case() != kBoolean) {
    clear_astarte_data();
    set_has_boolean();
  }
  _impl_.astarte_data_.boolean_ = value;
  // @@protoc_insertion_point(field_set:astarteplatform.msghub.AstarteData.boolean)
}
inline bool AstarteData::_internal_boolean() const {
  if (astarte_data_case() == kBoolean) {
    return _impl_.astarte_data_.boolean_;
  }
  return false;
}

// int64 long_integer = 4;
inline bool AstarteData::has_long_integer() const {
  return astarte_data_case() == kLongInteger;
}
inline void AstarteData::set_has_long_integer() {
  _impl_._oneof_case_[0] = kLongInteger;
}
inline void AstarteData::clear_long_integer() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (astarte_data_case() == kLongInteger) {
    _impl_.astarte_data_.long_integer_ = ::int64_t{0};
    clear_has_astarte_data();
  }
}
inline ::int64_t AstarteData::long_integer() const {
  // @@protoc_insertion_point(field_get:astarteplatform.msghub.AstarteData.long_integer)
  return _internal_long_integer();
}
inline void AstarteData::set_long_integer(::int64_t value) {
  if (astarte_data_case() != kLongInteger) {
    clear_astarte_data();
    set_has_long_integer();
  }
  _impl_.astarte_data_.long_integer_ = value;
  // @@protoc_insertion_point(field_set:astarteplatform.msghub.AstarteData.long_integer)
}
inline ::int64_t AstarteData::_internal_long_integer() const {
  if (astarte_data_case() == kLongInteger) {
    return _impl_.astarte_data_.long_integer_;
  }
  return ::int64_t{0};
}

// string string = 5;
inline bool AstarteData::has_string() const {
  return astarte_data_case() == kString;
}
inline void AstarteData::set_has_string() {
  _impl_._oneof_case_[0] = kString;
}
inline void AstarteData::clear_string() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (astarte_data_case() == kString) {
    _impl_.astarte_data_.string_.Destroy();
    clear_has_astarte_data();
  }
}
inline const std::string& AstarteData::string() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:astarteplatform.msghub.AstarteData.string)
  return _internal_string();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void AstarteData::set_string(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (astarte_data_case() != kString) {
    clear_astarte_data();

    set_has_string();
    _impl_.astarte_data_.string_.InitDefault();
  }
  _impl_.astarte_data_.string_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:astarteplatform.msghub.AstarteData.string)
}
inline std::string* AstarteData::mutable_string() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_string();
  // @@protoc_insertion_point(field_mutable:astarteplatform.msghub.AstarteData.string)
  return _s;
}
inline const std::string& AstarteData::_internal_string() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  if (astarte_data_case() != kString) {
    return ::google::protobuf::internal::GetEmptyStringAlreadyInited();
  }
  return _impl_.astarte_data_.string_.Get();
}
inline void AstarteData::_internal_set_string(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (astarte_data_case() != kString) {
    clear_astarte_data();

    set_has_string();
    _impl_.astarte_data_.string_.InitDefault();
  }
  _impl_.astarte_data_.string_.Set(value, GetArena());
}
inline std::string* AstarteData::_internal_mutable_string() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (astarte_data_case() != kString) {
    clear_astarte_data();

    set_has_string();
    _impl_.astarte_data_.string_.InitDefault();
  }
  return _impl_.astarte_data_.string_.Mutable( GetArena());
}
inline std::string* AstarteData::release_string() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:astarteplatform.msghub.AstarteData.string)
  if (astarte_data_case() != kString) {
    return nullptr;
  }
  clear_has_astarte_data();
  return _impl_.astarte_data_.string_.Release();
}
inline void AstarteData::set_allocated_string(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (has_astarte_data()) {
    clear_astarte_data();
  }
  if (value != nullptr) {
    set_has_string();
    _impl_.astarte_data_.string_.InitAllocated(value, GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:astarteplatform.msghub.AstarteData.string)
}

// bytes binary_blob = 6;
inline bool AstarteData::has_binary_blob() const {
  return astarte_data_case() == kBinaryBlob;
}
inline void AstarteData::set_has_binary_blob() {
  _impl_._oneof_case_[0] = kBinaryBlob;
}
inline void AstarteData::clear_binary_blob() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (astarte_data_case() == kBinaryBlob) {
    _impl_.astarte_data_.binary_blob_.Destroy();
    clear_has_astarte_data();
  }
}
inline const std::string& AstarteData::binary_blob() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:astarteplatform.msghub.AstarteData.binary_blob)
  return _internal_binary_blob();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void AstarteData::set_binary_blob(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (astarte_data_case() != kBinaryBlob) {
    clear_astarte_data();

    set_has_binary_blob();
    _impl_.astarte_data_.binary_blob_.InitDefault();
  }
  _impl_.astarte_data_.binary_blob_.SetBytes(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:astarteplatform.msghub.AstarteData.binary_blob)
}
inline std::string* AstarteData::mutable_binary_blob() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_binary_blob();
  // @@protoc_insertion_point(field_mutable:astarteplatform.msghub.AstarteData.binary_blob)
  return _s;
}
inline const std::string& AstarteData::_internal_binary_blob() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  if (astarte_data_case() != kBinaryBlob) {
    return ::google::protobuf::internal::GetEmptyStringAlreadyInited();
  }
  return _impl_.astarte_data_.binary_blob_.Get();
}
inline void AstarteData::_internal_set_binary_blob(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (astarte_data_case() != kBinaryBlob) {
    clear_astarte_data();

    set_has_binary_blob();
    _impl_.astarte_data_.binary_blob_.InitDefault();
  }
  _impl_.astarte_data_.binary_blob_.Set(value, GetArena());
}
inline std::string* AstarteData::_internal_mutable_binary_blob() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (astarte_data_case() != kBinaryBlob) {
    clear_astarte_data();

    set_has_binary_blob();
    _impl_.astarte_data_.binary_blob_.InitDefault();
  }
  return _impl_.astarte_data_.binary_blob_.Mutable( GetArena());
}
inline std::string* AstarteData::release_binary_blob() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:astarteplatform.msghub.AstarteData.binary_blob)
  if (astarte_data_case() != kBinaryBlob) {
    return nullptr;
  }
  clear_has_astarte_data();
  return _impl_.astarte_data_.binary_blob_.Release();
}
inline void AstarteData::set_allocated_binary_blob(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (has_astarte_data()) {
    clear_astarte_data();
  }
  if (value != nullptr) {
    set_has_binary_blob();
    _impl_.astarte_data_.binary_blob_.InitAllocated(value, GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:astarteplatform.msghub.AstarteData.binary_blob)
}

// .google.protobuf.Timestamp date_time = 7;
inline bool AstarteData::has_date_time() const {
  return astarte_data_case() == kDateTime;
}
inline bool AstarteData::_internal_has_date_time() const {
  return astarte_data_case() == kDateTime;
}
inline void AstarteData::set_has_date_time() {
  _impl_._oneof_case_[0] = kDateTime;
}
inline ::google::protobuf::Timestamp* AstarteData::release_date_time() {
  // @@protoc_insertion_point(field_release:astarteplatform.msghub.AstarteData.date_time)
  if (astarte_data_case() == kDateTime) {
    clear_has_astarte_data();
    auto* temp = _impl_.astarte_data_.date_time_;
    if (GetArena() != nullptr) {
      temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
    }
    _impl_.astarte_data_.date_time_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::google::protobuf::Timestamp& AstarteData::_internal_date_time() const {
  return astarte_data_case() == kDateTime ? *_impl_.astarte_data_.date_time_ : reinterpret_cast<::google::protobuf::Timestamp&>(::google::protobuf::_Timestamp_default_instance_);
}
inline const ::google::protobuf::Timestamp& AstarteData::date_time() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:astarteplatform.msghub.AstarteData.date_time)
  return _internal_date_time();
}
inline ::google::protobuf::Timestamp* AstarteData::unsafe_arena_release_date_time() {
  // @@protoc_insertion_point(field_unsafe_arena_release:astarteplatform.msghub.AstarteData.date_time)
  if (astarte_data_case() == kDateTime) {
    clear_has_astarte_data();
    auto* temp = _impl_.astarte_data_.date_time_;
    _impl_.astarte_data_.date_time_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void AstarteData::unsafe_arena_set_allocated_date_time(::google::protobuf::Timestamp* value) {
  // We rely on the oneof clear method to free the earlier contents
  // of this oneof. We can directly use the pointer we're given to
  // set the new value.
  clear_astarte_data();
  if (value) {
    set_has_date_time();
    _impl_.astarte_data_.date_time_ = value;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:astarteplatform.msghub.AstarteData.date_time)
}
inline ::google::protobuf::Timestamp* AstarteData::_internal_mutable_date_time() {
  if (astarte_data_case() != kDateTime) {
    clear_astarte_data();
    set_has_date_time();
    _impl_.astarte_data_.date_time_ =
        ::google::protobuf::Message::DefaultConstruct<::google::protobuf::Timestamp>(GetArena());
  }
  return _impl_.astarte_data_.date_time_;
}
inline ::google::protobuf::Timestamp* AstarteData::mutable_date_time() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::Timestamp* _msg = _internal_mutable_date_time();
  // @@protoc_insertion_point(field_mutable:astarteplatform.msghub.AstarteData.date_time)
  return _msg;
}

// .astarteplatform.msghub.AstarteDoubleArray double_array = 8;
inline bool AstarteData::has_double_array() const {
  return astarte_data_case() == kDoubleArray;
}
inline bool AstarteData::_internal_has_double_array() const {
  return astarte_data_case() == kDoubleArray;
}
inline void AstarteData::set_has_double_array() {
  _impl_._oneof_case_[0] = kDoubleArray;
}
inline void AstarteData::clear_double_array() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (astarte_data_case() == kDoubleArray) {
    if (GetArena() == nullptr) {
      delete _impl_.astarte_data_.double_array_;
    } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
      ::google::protobuf::internal::MaybePoisonAfterClear(_impl_.astarte_data_.double_array_);
    }
    clear_has_astarte_data();
  }
}
inline ::astarteplatform::msghub::AstarteDoubleArray* AstarteData::release_double_array() {
  // @@protoc_insertion_point(field_release:astarteplatform.msghub.AstarteData.double_array)
  if (astarte_data_case() == kDoubleArray) {
    clear_has_astarte_data();
    auto* temp = _impl_.astarte_data_.double_array_;
    if (GetArena() != nullptr) {
      temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
    }
    _impl_.astarte_data_.double_array_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::astarteplatform::msghub::AstarteDoubleArray& AstarteData::_internal_double_array() const {
  return astarte_data_case() == kDoubleArray ? *_impl_.astarte_data_.double_array_ : reinterpret_cast<::astarteplatform::msghub::AstarteDoubleArray&>(::astarteplatform::msghub::_AstarteDoubleArray_default_instance_);
}
inline const ::astarteplatform::msghub::AstarteDoubleArray& AstarteData::double_array() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:astarteplatform.msghub.AstarteData.double_array)
  return _internal_double_array();
}
inline ::astarteplatform::msghub::AstarteDoubleArray* AstarteData::unsafe_arena_release_double_array() {
  // @@protoc_insertion_point(field_unsafe_arena_release:astarteplatform.msghub.AstarteData.double_array)
  if (astarte_data_case() == kDoubleArray) {
    clear_has_astarte_data();
    auto* temp = _impl_.astarte_data_.double_array_;
    _impl_.astarte_data_.double_array_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void AstarteData::unsafe_arena_set_allocated_double_array(::astarteplatform::msghub::AstarteDoubleArray* value) {
  // We rely on the oneof clear method to free the earlier contents
  // of this oneof. We can directly use the pointer we're given to
  // set the new value.
  clear_astarte_data();
  if (value) {
    set_has_double_array();
    _impl_.astarte_data_.double_array_ = value;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:astarteplatform.msghub.AstarteData.double_array)
}
inline ::astarteplatform::msghub::AstarteDoubleArray* AstarteData::_internal_mutable_double_array() {
  if (astarte_data_case() != kDoubleArray) {
    clear_astarte_data();
    set_has_double_array();
    _impl_.astarte_data_.double_array_ =
        ::google::protobuf::Message::DefaultConstruct<::astarteplatform::msghub::AstarteDoubleArray>(GetArena());
  }
  return _impl_.astarte_data_.double_array_;
}
inline ::astarteplatform::msghub::AstarteDoubleArray* AstarteData::mutable_double_array() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::astarteplatform::msghub::AstarteDoubleArray* _msg = _internal_mutable_double_array();
  // @@protoc_insertion_point(field_mutable:astarteplatform.msghub.AstarteData.double_array)
  return _msg;
}

// .astarteplatform.msghub.AstarteIntegerArray integer_array = 9;
inline bool AstarteData::has_integer_array() const {
  return astarte_data_case() == kIntegerArray;
}
inline bool AstarteData::_internal_has_integer_array() const {
  return astarte_data_case() == kIntegerArray;
}
inline void AstarteData::set_has_integer_array() {
  _impl_._oneof_case_[0] = kIntegerArray;
}
inline void AstarteData::clear_integer_array() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (astarte_data_case() == kIntegerArray) {
    if (GetArena() == nullptr) {
      delete _impl_.astarte_data_.integer_array_;
    } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
      ::google::protobuf::internal::MaybePoisonAfterClear(_impl_.astarte_data_.integer_array_);
    }
    clear_has_astarte_data();
  }
}
inline ::astarteplatform::msghub::AstarteIntegerArray* AstarteData::release_integer_array() {
  // @@protoc_insertion_point(field_release:astarteplatform.msghub.AstarteData.integer_array)
  if (astarte_data_case() == kIntegerArray) {
    clear_has_astarte_data();
    auto* temp = _impl_.astarte_data_.integer_array_;
    if (GetArena() != nullptr) {
      temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
    }
    _impl_.astarte_data_.integer_array_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::astarteplatform::msghub::AstarteIntegerArray& AstarteData::_internal_integer_array() const {
  return astarte_data_case() == kIntegerArray ? *_impl_.astarte_data_.integer_array_ : reinterpret_cast<::astarteplatform::msghub::AstarteIntegerArray&>(::astarteplatform::msghub::_AstarteIntegerArray_default_instance_);
}
inline const ::astarteplatform::msghub::AstarteIntegerArray& AstarteData::integer_array() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:astarteplatform.msghub.AstarteData.integer_array)
  return _internal_integer_array();
}
inline ::astarteplatform::msghub::AstarteIntegerArray* AstarteData::unsafe_arena_release_integer_array() {
  // @@protoc_insertion_point(field_unsafe_arena_release:astarteplatform.msghub.AstarteData.integer_array)
  if (astarte_data_case() == kIntegerArray) {
    clear_has_astarte_data();
    auto* temp = _impl_.astarte_data_.integer_array_;
    _impl_.astarte_data_.integer_array_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void AstarteData::unsafe_arena_set_allocated_integer_array(::astarteplatform::msghub::AstarteIntegerArray* value) {
  // We rely on the oneof clear method to free the earlier contents
  // of this oneof. We can directly use the pointer we're given to
  // set the new value.
  clear_astarte_data();
  if (value) {
    set_has_integer_array();
    _impl_.astarte_data_.integer_array_ = value;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:astarteplatform.msghub.AstarteData.integer_array)
}
inline ::astarteplatform::msghub::AstarteIntegerArray* AstarteData::_internal_mutable_integer_array() {
  if (astarte_data_case() != kIntegerArray) {
    clear_astarte_data();
    set_has_integer_array();
    _impl_.astarte_data_.integer_array_ =
        ::google::protobuf::Message::DefaultConstruct<::astarteplatform::msghub::AstarteIntegerArray>(GetArena());
  }
  return _impl_.astarte_data_.integer_array_;
}
inline ::astarteplatform::msghub::AstarteIntegerArray* AstarteData::mutable_integer_array() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::astarteplatform::msghub::AstarteIntegerArray* _msg = _internal_mutable_integer_array();
  // @@protoc_insertion_point(field_mutable:astarteplatform.msghub.AstarteData.integer_array)
  return _msg;
}

// .astarteplatform.msghub.AstarteBooleanArray boolean_array = 10;
inline bool AstarteData::has_boolean_array() const {
  return astarte_data_case() == kBooleanArray;
}
inline bool AstarteData::_internal_has_boolean_array() const {
  return astarte_data_case() == kBooleanArray;
}
inline void AstarteData::set_has_boolean_array() {
  _impl_._oneof_case_[0] = kBooleanArray;
}
inline void AstarteData::clear_boolean_array() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (astarte_data_case() == kBooleanArray) {
    if (GetArena() == nullptr) {
      delete _impl_.astarte_data_.boolean_array_;
    } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
      ::google::protobuf::internal::MaybePoisonAfterClear(_impl_.astarte_data_.boolean_array_);
    }
    clear_has_astarte_data();
  }
}
inline ::astarteplatform::msghub::AstarteBooleanArray* AstarteData::release_boolean_array() {
  // @@protoc_insertion_point(field_release:astarteplatform.msghub.AstarteData.boolean_array)
  if (astarte_data_case() == kBooleanArray) {
    clear_has_astarte_data();
    auto* temp = _impl_.astarte_data_.boolean_array_;
    if (GetArena() != nullptr) {
      temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
    }
    _impl_.astarte_data_.boolean_array_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::astarteplatform::msghub::AstarteBooleanArray& AstarteData::_internal_boolean_array() const {
  return astarte_data_case() == kBooleanArray ? *_impl_.astarte_data_.boolean_array_ : reinterpret_cast<::astarteplatform::msghub::AstarteBooleanArray&>(::astarteplatform::msghub::_AstarteBooleanArray_default_instance_);
}
inline const ::astarteplatform::msghub::AstarteBooleanArray& AstarteData::boolean_array() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:astarteplatform.msghub.AstarteData.boolean_array)
  return _internal_boolean_array();
}
inline ::astarteplatform::msghub::AstarteBooleanArray* AstarteData::unsafe_arena_release_boolean_array() {
  // @@protoc_insertion_point(field_unsafe_arena_release:astarteplatform.msghub.AstarteData.boolean_array)
  if (astarte_data_case() == kBooleanArray) {
    clear_has_astarte_data();
    auto* temp = _impl_.astarte_data_.boolean_array_;
    _impl_.astarte_data_.boolean_array_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void AstarteData::unsafe_arena_set_allocated_boolean_array(::astarteplatform::msghub::AstarteBooleanArray* value) {
  // We rely on the oneof clear method to free the earlier contents
  // of this oneof. We can directly use the pointer we're given to
  // set the new value.
  clear_astarte_data();
  if (value) {
    set_has_boolean_array();
    _impl_.astarte_data_.boolean_array_ = value;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:astarteplatform.msghub.AstarteData.boolean_array)
}
inline ::astarteplatform::msghub::AstarteBooleanArray* AstarteData::_internal_mutable_boolean_array() {
  if (astarte_data_case() != kBooleanArray) {
    clear_astarte_data();
    set_has_boolean_array();
    _impl_.astarte_data_.boolean_array_ =
        ::google::protobuf::Message::DefaultConstruct<::astarteplatform::msghub::AstarteBooleanArray>(GetArena());
  }
  return _impl_.astarte_data_.boolean_array_;
}
inline ::astarteplatform::msghub::AstarteBooleanArray* AstarteData::mutable_boolean_array() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::astarteplatform::msghub::AstarteBooleanArray* _msg = _internal_mutable_boolean_array();
  // @@protoc_insertion_point(field_mutable:astarteplatform.msghub.AstarteData.boolean_array)
  return _msg;
}

// .astarteplatform.msghub.AstarteLongIntegerArray long_integer_array = 11;
inline bool AstarteData::has_long_integer_array() const {
  return astarte_data_case() == kLongIntegerArray;
}
inline bool AstarteData::_internal_has_long_integer_array() const {
  return astarte_data_case() == kLongIntegerArray;
}
inline void AstarteData::set_has_long_integer_array() {
  _impl_._oneof_case_[0] = kLongIntegerArray;
}
inline void AstarteData::clear_long_integer_array() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (astarte_data_case() == kLongIntegerArray) {
    if (GetArena() == nullptr) {
      delete _impl_.astarte_data_.long_integer_array_;
    } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
      ::google::protobuf::internal::MaybePoisonAfterClear(_impl_.astarte_data_.long_integer_array_);
    }
    clear_has_astarte_data();
  }
}
inline ::astarteplatform::msghub::AstarteLongIntegerArray* AstarteData::release_long_integer_array() {
  // @@protoc_insertion_point(field_release:astarteplatform.msghub.AstarteData.long_integer_array)
  if (astarte_data_case() == kLongIntegerArray) {
    clear_has_astarte_data();
    auto* temp = _impl_.astarte_data_.long_integer_array_;
    if (GetArena() != nullptr) {
      temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
    }
    _impl_.astarte_data_.long_integer_array_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::astarteplatform::msghub::AstarteLongIntegerArray& AstarteData::_internal_long_integer_array() const {
  return astarte_data_case() == kLongIntegerArray ? *_impl_.astarte_data_.long_integer_array_ : reinterpret_cast<::astarteplatform::msghub::AstarteLongIntegerArray&>(::astarteplatform::msghub::_AstarteLongIntegerArray_default_instance_);
}
inline const ::astarteplatform::msghub::AstarteLongIntegerArray& AstarteData::long_integer_array() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:astarteplatform.msghub.AstarteData.long_integer_array)
  return _internal_long_integer_array();
}
inline ::astarteplatform::msghub::AstarteLongIntegerArray* AstarteData::unsafe_arena_release_long_integer_array() {
  // @@protoc_insertion_point(field_unsafe_arena_release:astarteplatform.msghub.AstarteData.long_integer_array)
  if (astarte_data_case() == kLongIntegerArray) {
    clear_has_astarte_data();
    auto* temp = _impl_.astarte_data_.long_integer_array_;
    _impl_.astarte_data_.long_integer_array_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void AstarteData::unsafe_arena_set_allocated_long_integer_array(::astarteplatform::msghub::AstarteLongIntegerArray* value) {
  // We rely on the oneof clear method to free the earlier contents
  // of this oneof. We can directly use the pointer we're given to
  // set the new value.
  clear_astarte_data();
  if (value) {
    set_has_long_integer_array();
    _impl_.astarte_data_.long_integer_array_ = value;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:astarteplatform.msghub.AstarteData.long_integer_array)
}
inline ::astarteplatform::msghub::AstarteLongIntegerArray* AstarteData::_internal_mutable_long_integer_array() {
  if (astarte_data_case() != kLongIntegerArray) {
    clear_astarte_data();
    set_has_long_integer_array();
    _impl_.astarte_data_.long_integer_array_ =
        ::google::protobuf::Message::DefaultConstruct<::astarteplatform::msghub::AstarteLongIntegerArray>(GetArena());
  }
  return _impl_.astarte_data_.long_integer_array_;
}
inline ::astarteplatform::msghub::AstarteLongIntegerArray* AstarteData::mutable_long_integer_array() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::astarteplatform::msghub::AstarteLongIntegerArray* _msg = _internal_mutable_long_integer_array();
  // @@protoc_insertion_point(field_mutable:astarteplatform.msghub.AstarteData.long_integer_array)
  return _msg;
}

// .astarteplatform.msghub.AstarteStringArray string_array = 12;
inline bool AstarteData::has_string_array() const {
  return astarte_data_case() == kStringArray;
}
inline bool AstarteData::_internal_has_string_array() const {
  return astarte_data_case() == kStringArray;
}
inline void AstarteData::set_has_string_array() {
  _impl_._oneof_case_[0] = kStringArray;
}
inline void AstarteData::clear_string_array() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (astarte_data_case() == kStringArray) {
    if (GetArena() == nullptr) {
      delete _impl_.astarte_data_.string_array_;
    } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
      ::google::protobuf::internal::MaybePoisonAfterClear(_impl_.astarte_data_.string_array_);
    }
    clear_has_astarte_data();
  }
}
inline ::astarteplatform::msghub::AstarteStringArray* AstarteData::release_string_array() {
  // @@protoc_insertion_point(field_release:astarteplatform.msghub.AstarteData.string_array)
  if (astarte_data_case() == kStringArray) {
    clear_has_astarte_data();
    auto* temp = _impl_.astarte_data_.string_array_;
    if (GetArena() != nullptr) {
      temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
    }
    _impl_.astarte_data_.string_array_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::astarteplatform::msghub::AstarteStringArray& AstarteData::_internal_string_array() const {
  return astarte_data_case() == kStringArray ? *_impl_.astarte_data_.string_array_ : reinterpret_cast<::astarteplatform::msghub::AstarteStringArray&>(::astarteplatform::msghub::_AstarteStringArray_default_instance_);
}
inline const ::astarteplatform::msghub::AstarteStringArray& AstarteData::string_array() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:astarteplatform.msghub.AstarteData.string_array)
  return _internal_string_array();
}
inline ::astarteplatform::msghub::AstarteStringArray* AstarteData::unsafe_arena_release_string_array() {
  // @@protoc_insertion_point(field_unsafe_arena_release:astarteplatform.msghub.AstarteData.string_array)
  if (astarte_data_case() == kStringArray) {
    clear_has_astarte_data();
    auto* temp = _impl_.astarte_data_.string_array_;
    _impl_.astarte_data_.string_array_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void AstarteData::unsafe_arena_set_allocated_string_array(::astarteplatform::msghub::AstarteStringArray* value) {
  // We rely on the oneof clear method to free the earlier contents
  // of this oneof. We can directly use the pointer we're given to
  // set the new value.
  clear_astarte_data();
  if (value) {
    set_has_string_array();
    _impl_.astarte_data_.string_array_ = value;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:astarteplatform.msghub.AstarteData.string_array)
}
inline ::astarteplatform::msghub::AstarteStringArray* AstarteData::_internal_mutable_string_array() {
  if (astarte_data_case() != kStringArray) {
    clear_astarte_data();
    set_has_string_array();
    _impl_.astarte_data_.string_array_ =
        ::google::protobuf::Message::DefaultConstruct<::astarteplatform::msghub::AstarteStringArray>(GetArena());
  }
  return _impl_.astarte_data_.string_array_;
}
inline ::astarteplatform::msghub::AstarteStringArray* AstarteData::mutable_string_array() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::astarteplatform::msghub::AstarteStringArray* _msg = _internal_mutable_string_array();
  // @@protoc_insertion_point(field_mutable:astarteplatform.msghub.AstarteData.string_array)
  return _msg;
}

// .astarteplatform.msghub.AstarteBinaryBlobArray binary_blob_array = 13;
inline bool AstarteData::has_binary_blob_array() const {
  return astarte_data_case() == kBinaryBlobArray;
}
inline bool AstarteData::_internal_has_binary_blob_array() const {
  return astarte_data_case() == kBinaryBlobArray;
}
inline void AstarteData::set_has_binary_blob_array() {
  _impl_._oneof_case_[0] = kBinaryBlobArray;
}
inline void AstarteData::clear_binary_blob_array() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (astarte_data_case() == kBinaryBlobArray) {
    if (GetArena() == nullptr) {
      delete _impl_.astarte_data_.binary_blob_array_;
    } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
      ::google::protobuf::internal::MaybePoisonAfterClear(_impl_.astarte_data_.binary_blob_array_);
    }
    clear_has_astarte_data();
  }
}
inline ::astarteplatform::msghub::AstarteBinaryBlobArray* AstarteData::release_binary_blob_array() {
  // @@protoc_insertion_point(field_release:astarteplatform.msghub.AstarteData.binary_blob_array)
  if (astarte_data_case() == kBinaryBlobArray) {
    clear_has_astarte_data();
    auto* temp = _impl_.astarte_data_.binary_blob_array_;
    if (GetArena() != nullptr) {
      temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
    }
    _impl_.astarte_data_.binary_blob_array_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::astarteplatform::msghub::AstarteBinaryBlobArray& AstarteData::_internal_binary_blob_array() const {
  return astarte_data_case() == kBinaryBlobArray ? *_impl_.astarte_data_.binary_blob_array_ : reinterpret_cast<::astarteplatform::msghub::AstarteBinaryBlobArray&>(::astarteplatform::msghub::_AstarteBinaryBlobArray_default_instance_);
}
inline const ::astarteplatform::msghub::AstarteBinaryBlobArray& AstarteData::binary_blob_array() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:astarteplatform.msghub.AstarteData.binary_blob_array)
  return _internal_binary_blob_array();
}
inline ::astarteplatform::msghub::AstarteBinaryBlobArray* AstarteData::unsafe_arena_release_binary_blob_array() {
  // @@protoc_insertion_point(field_unsafe_arena_release:astarteplatform.msghub.AstarteData.binary_blob_array)
  if (astarte_data_case() == kBinaryBlobArray) {
    clear_has_astarte_data();
    auto* temp = _impl_.astarte_data_.binary_blob_array_;
    _impl_.astarte_data_.binary_blob_array_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void AstarteData::unsafe_arena_set_allocated_binary_blob_array(::astarteplatform::msghub::AstarteBinaryBlobArray* value) {
  // We rely on the oneof clear method to free the earlier contents
  // of this oneof. We can directly use the pointer we're given to
  // set the new value.
  clear_astarte_data();
  if (value) {
    set_has_binary_blob_array();
    _impl_.astarte_data_.binary_blob_array_ = value;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:astarteplatform.msghub.AstarteData.binary_blob_array)
}
inline ::astarteplatform::msghub::AstarteBinaryBlobArray* AstarteData::_internal_mutable_binary_blob_array() {
  if (astarte_data_case() != kBinaryBlobArray) {
    clear_astarte_data();
    set_has_binary_blob_array();
    _impl_.astarte_data_.binary_blob_array_ =
        ::google::protobuf::Message::DefaultConstruct<::astarteplatform::msghub::AstarteBinaryBlobArray>(GetArena());
  }
  return _impl_.astarte_data_.binary_blob_array_;
}
inline ::astarteplatform::msghub::AstarteBinaryBlobArray* AstarteData::mutable_binary_blob_array() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::astarteplatform::msghub::AstarteBinaryBlobArray* _msg = _internal_mutable_binary_blob_array();
  // @@protoc_insertion_point(field_mutable:astarteplatform.msghub.AstarteData.binary_blob_array)
  return _msg;
}

// .astarteplatform.msghub.AstarteDateTimeArray date_time_array = 14;
inline bool AstarteData::has_date_time_array() const {
  return astarte_data_case() == kDateTimeArray;
}
inline bool AstarteData::_internal_has_date_time_array() const {
  return astarte_data_case() == kDateTimeArray;
}
inline void AstarteData::set_has_date_time_array() {
  _impl_._oneof_case_[0] = kDateTimeArray;
}
inline void AstarteData::clear_date_time_array() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (astarte_data_case() == kDateTimeArray) {
    if (GetArena() == nullptr) {
      delete _impl_.astarte_data_.date_time_array_;
    } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
      ::google::protobuf::internal::MaybePoisonAfterClear(_impl_.astarte_data_.date_time_array_);
    }
    clear_has_astarte_data();
  }
}
inline ::astarteplatform::msghub::AstarteDateTimeArray* AstarteData::release_date_time_array() {
  // @@protoc_insertion_point(field_release:astarteplatform.msghub.AstarteData.date_time_array)
  if (astarte_data_case() == kDateTimeArray) {
    clear_has_astarte_data();
    auto* temp = _impl_.astarte_data_.date_time_array_;
    if (GetArena() != nullptr) {
      temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
    }
    _impl_.astarte_data_.date_time_array_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::astarteplatform::msghub::AstarteDateTimeArray& AstarteData::_internal_date_time_array() const {
  return astarte_data_case() == kDateTimeArray ? *_impl_.astarte_data_.date_time_array_ : reinterpret_cast<::astarteplatform::msghub::AstarteDateTimeArray&>(::astarteplatform::msghub::_AstarteDateTimeArray_default_instance_);
}
inline const ::astarteplatform::msghub::AstarteDateTimeArray& AstarteData::date_time_array() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:astarteplatform.msghub.AstarteData.date_time_array)
  return _internal_date_time_array();
}
inline ::astarteplatform::msghub::AstarteDateTimeArray* AstarteData::unsafe_arena_release_date_time_array() {
  // @@protoc_insertion_point(field_unsafe_arena_release:astarteplatform.msghub.AstarteData.date_time_array)
  if (astarte_data_case() == kDateTimeArray) {
    clear_has_astarte_data();
    auto* temp = _impl_.astarte_data_.date_time_array_;
    _impl_.astarte_data_.date_time_array_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void AstarteData::unsafe_arena_set_allocated_date_time_array(::astarteplatform::msghub::AstarteDateTimeArray* value) {
  // We rely on the oneof clear method to free the earlier contents
  // of this oneof. We can directly use the pointer we're given to
  // set the new value.
  clear_astarte_data();
  if (value) {
    set_has_date_time_array();
    _impl_.astarte_data_.date_time_array_ = value;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:astarteplatform.msghub.AstarteData.date_time_array)
}
inline ::astarteplatform::msghub::AstarteDateTimeArray* AstarteData::_internal_mutable_date_time_array() {
  if (astarte_data_case() != kDateTimeArray) {
    clear_astarte_data();
    set_has_date_time_array();
    _impl_.astarte_data_.date_time_array_ =
        ::google::protobuf::Message::DefaultConstruct<::astarteplatform::msghub::AstarteDateTimeArray>(GetArena());
  }
  return _impl_.astarte_data_.date_time_array_;
}
inline ::astarteplatform::msghub::AstarteDateTimeArray* AstarteData::mutable_date_time_array() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::astarteplatform::msghub::AstarteDateTimeArray* _msg = _internal_mutable_date_time_array();
  // @@protoc_insertion_point(field_mutable:astarteplatform.msghub.AstarteData.date_time_array)
  return _msg;
}

inline bool AstarteData::has_astarte_data() const {
  return astarte_data_case() != ASTARTE_DATA_NOT_SET;
}
inline void AstarteData::clear_has_astarte_data() {
  _impl_._oneof_case_[0] = ASTARTE_DATA_NOT_SET;
}
inline AstarteData::AstarteDataCase AstarteData::astarte_data_case() const {
  return AstarteData::AstarteDataCase(_impl_._oneof_case_[0]);
}
// -------------------------------------------------------------------

// AstarteDatastreamIndividual

// .astarteplatform.msghub.AstarteData data = 1;
inline bool AstarteDatastreamIndividual::has_data() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.data_ != nullptr);
  return value;
}
inline void AstarteDatastreamIndividual::clear_data() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.data_ != nullptr) _impl_.data_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::astarteplatform::msghub::AstarteData& AstarteDatastreamIndividual::_internal_data() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::astarteplatform::msghub::AstarteData* p = _impl_.data_;
  return p != nullptr ? *p : reinterpret_cast<const ::astarteplatform::msghub::AstarteData&>(::astarteplatform::msghub::_AstarteData_default_instance_);
}
inline const ::astarteplatform::msghub::AstarteData& AstarteDatastreamIndividual::data() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:astarteplatform.msghub.AstarteDatastreamIndividual.data)
  return _internal_data();
}
inline void AstarteDatastreamIndividual::unsafe_arena_set_allocated_data(::astarteplatform::msghub::AstarteData* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.data_);
  }
  _impl_.data_ = reinterpret_cast<::astarteplatform::msghub::AstarteData*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:astarteplatform.msghub.AstarteDatastreamIndividual.data)
}
inline ::astarteplatform::msghub::AstarteData* AstarteDatastreamIndividual::release_data() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::astarteplatform::msghub::AstarteData* released = _impl_.data_;
  _impl_.data_ = nullptr;
  if (::google::protobuf::internal::DebugHardenForceCopyInRelease()) {
    auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    if (GetArena() == nullptr) {
      delete old;
    }
  } else {
    if (GetArena() != nullptr) {
      released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    }
  }
  return released;
}
inline ::astarteplatform::msghub::AstarteData* AstarteDatastreamIndividual::unsafe_arena_release_data() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:astarteplatform.msghub.AstarteDatastreamIndividual.data)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::astarteplatform::msghub::AstarteData* temp = _impl_.data_;
  _impl_.data_ = nullptr;
  return temp;
}
inline ::astarteplatform::msghub::AstarteData* AstarteDatastreamIndividual::_internal_mutable_data() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.data_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::astarteplatform::msghub::AstarteData>(GetArena());
    _impl_.data_ = reinterpret_cast<::astarteplatform::msghub::AstarteData*>(p);
  }
  return _impl_.data_;
}
inline ::astarteplatform::msghub::AstarteData* AstarteDatastreamIndividual::mutable_data() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000001u;
  ::astarteplatform::msghub::AstarteData* _msg = _internal_mutable_data();
  // @@protoc_insertion_point(field_mutable:astarteplatform.msghub.AstarteDatastreamIndividual.data)
  return _msg;
}
inline void AstarteDatastreamIndividual::set_allocated_data(::astarteplatform::msghub::AstarteData* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete (_impl_.data_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = (value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.data_ = reinterpret_cast<::astarteplatform::msghub::AstarteData*>(value);
  // @@protoc_insertion_point(field_set_allocated:astarteplatform.msghub.AstarteDatastreamIndividual.data)
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// AstarteDatastreamObject

// map<string, .astarteplatform.msghub.AstarteData> data = 1;
inline int AstarteDatastreamObject::_internal_data_size() const {
  return _internal_data().size();
}
inline int AstarteDatastreamObject::data_size() const {
  return _internal_data_size();
}
inline void AstarteDatastreamObject::clear_data() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.data_.Clear();
}
inline const ::google::protobuf::Map<std::string, ::astarteplatform::msghub::AstarteData>& AstarteDatastreamObject::_internal_data() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.data_.GetMap();
}
inline const ::google::protobuf::Map<std::string, ::astarteplatform::msghub::AstarteData>& AstarteDatastreamObject::data() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_map:astarteplatform.msghub.AstarteDatastreamObject.data)
  return _internal_data();
}
inline ::google::protobuf::Map<std::string, ::astarteplatform::msghub::AstarteData>* AstarteDatastreamObject::_internal_mutable_data() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.data_.MutableMap();
}
inline ::google::protobuf::Map<std::string, ::astarteplatform::msghub::AstarteData>* AstarteDatastreamObject::mutable_data() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_map:astarteplatform.msghub.AstarteDatastreamObject.data)
  return _internal_mutable_data();
}

// -------------------------------------------------------------------

// AstartePropertyIndividual

// optional .astarteplatform.msghub.AstarteData data = 1;
inline bool AstartePropertyIndividual::has_data() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.data_ != nullptr);
  return value;
}
inline void AstartePropertyIndividual::clear_data() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.data_ != nullptr) _impl_.data_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::astarteplatform::msghub::AstarteData& AstartePropertyIndividual::_internal_data() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::astarteplatform::msghub::AstarteData* p = _impl_.data_;
  return p != nullptr ? *p : reinterpret_cast<const ::astarteplatform::msghub::AstarteData&>(::astarteplatform::msghub::_AstarteData_default_instance_);
}
inline const ::astarteplatform::msghub::AstarteData& AstartePropertyIndividual::data() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:astarteplatform.msghub.AstartePropertyIndividual.data)
  return _internal_data();
}
inline void AstartePropertyIndividual::unsafe_arena_set_allocated_data(::astarteplatform::msghub::AstarteData* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.data_);
  }
  _impl_.data_ = reinterpret_cast<::astarteplatform::msghub::AstarteData*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:astarteplatform.msghub.AstartePropertyIndividual.data)
}
inline ::astarteplatform::msghub::AstarteData* AstartePropertyIndividual::release_data() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::astarteplatform::msghub::AstarteData* released = _impl_.data_;
  _impl_.data_ = nullptr;
  if (::google::protobuf::internal::DebugHardenForceCopyInRelease()) {
    auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    if (GetArena() == nullptr) {
      delete old;
    }
  } else {
    if (GetArena() != nullptr) {
      released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    }
  }
  return released;
}
inline ::astarteplatform::msghub::AstarteData* AstartePropertyIndividual::unsafe_arena_release_data() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:astarteplatform.msghub.AstartePropertyIndividual.data)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::astarteplatform::msghub::AstarteData* temp = _impl_.data_;
  _impl_.data_ = nullptr;
  return temp;
}
inline ::astarteplatform::msghub::AstarteData* AstartePropertyIndividual::_internal_mutable_data() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.data_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::astarteplatform::msghub::AstarteData>(GetArena());
    _impl_.data_ = reinterpret_cast<::astarteplatform::msghub::AstarteData*>(p);
  }
  return _impl_.data_;
}
inline ::astarteplatform::msghub::AstarteData* AstartePropertyIndividual::mutable_data() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000001u;
  ::astarteplatform::msghub::AstarteData* _msg = _internal_mutable_data();
  // @@protoc_insertion_point(field_mutable:astarteplatform.msghub.AstartePropertyIndividual.data)
  return _msg;
}
inline void AstartePropertyIndividual::set_allocated_data(::astarteplatform::msghub::AstarteData* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete (_impl_.data_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = (value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.data_ = reinterpret_cast<::astarteplatform::msghub::AstarteData*>(value);
  // @@protoc_insertion_point(field_set_allocated:astarteplatform.msghub.AstartePropertyIndividual.data)
}

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)
}  // namespace msghub
}  // namespace astarteplatform


// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // astarteplatform_2fmsghub_2fastarte_5fdata_2eproto_2epb_2eh
