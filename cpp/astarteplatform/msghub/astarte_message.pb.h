// Generated by the protocol buffer compiler.  DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// source: astarteplatform/msghub/astarte_message.proto
// Protobuf C++ Version: 5.29.0

#ifndef astarteplatform_2fmsghub_2fastarte_5fmessage_2eproto_2epb_2eh
#define astarteplatform_2fmsghub_2fastarte_5fmessage_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>
#include <utility>

#include "google/protobuf/runtime_version.h"
#if PROTOBUF_VERSION != 5029000
#error "Protobuf C++ gencode is built with an incompatible version of"
#error "Protobuf C++ headers/runtime. See"
#error "https://protobuf.dev/support/cross-version-runtime-guarantee/#cpp"
#endif
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_tctable_decl.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/message.h"
#include "google/protobuf/message_lite.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/unknown_field_set.h"
#include "google/protobuf/timestamp.pb.h"
#include "astarteplatform/msghub/astarte_data.pb.h"
#include "astarteplatform/msghub/message_hub_error.pb.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_astarteplatform_2fmsghub_2fastarte_5fmessage_2eproto

namespace google {
namespace protobuf {
namespace internal {
template <typename T>
::absl::string_view GetAnyMessageName();
}  // namespace internal
}  // namespace protobuf
}  // namespace google

// Internal implementation detail -- do not use these members.
struct TableStruct_astarteplatform_2fmsghub_2fastarte_5fmessage_2eproto {
  static const ::uint32_t offsets[];
};
extern const ::google::protobuf::internal::DescriptorTable
    descriptor_table_astarteplatform_2fmsghub_2fastarte_5fmessage_2eproto;
namespace astarteplatform {
namespace msghub {
class AstarteMessage;
struct AstarteMessageDefaultTypeInternal;
extern AstarteMessageDefaultTypeInternal _AstarteMessage_default_instance_;
class MessageHubEvent;
struct MessageHubEventDefaultTypeInternal;
extern MessageHubEventDefaultTypeInternal _MessageHubEvent_default_instance_;
}  // namespace msghub
}  // namespace astarteplatform
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google

namespace astarteplatform {
namespace msghub {

// ===================================================================


// -------------------------------------------------------------------

class AstarteMessage final
    : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:astarteplatform.msghub.AstarteMessage) */ {
 public:
  inline AstarteMessage() : AstarteMessage(nullptr) {}
  ~AstarteMessage() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(AstarteMessage* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(AstarteMessage));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR AstarteMessage(
      ::google::protobuf::internal::ConstantInitialized);

  inline AstarteMessage(const AstarteMessage& from) : AstarteMessage(nullptr, from) {}
  inline AstarteMessage(AstarteMessage&& from) noexcept
      : AstarteMessage(nullptr, std::move(from)) {}
  inline AstarteMessage& operator=(const AstarteMessage& from) {
    CopyFrom(from);
    return *this;
  }
  inline AstarteMessage& operator=(AstarteMessage&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const AstarteMessage& default_instance() {
    return *internal_default_instance();
  }
  enum PayloadCase {
    kDatastreamIndividual = 3,
    kDatastreamObject = 4,
    kPropertyIndividual = 5,
    PAYLOAD_NOT_SET = 0,
  };
  static inline const AstarteMessage* internal_default_instance() {
    return reinterpret_cast<const AstarteMessage*>(
        &_AstarteMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 1;
  friend void swap(AstarteMessage& a, AstarteMessage& b) { a.Swap(&b); }
  inline void Swap(AstarteMessage* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AstarteMessage* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  AstarteMessage* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<AstarteMessage>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const AstarteMessage& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const AstarteMessage& from) { AstarteMessage::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(AstarteMessage* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "astarteplatform.msghub.AstarteMessage"; }

 protected:
  explicit AstarteMessage(::google::protobuf::Arena* arena);
  AstarteMessage(::google::protobuf::Arena* arena, const AstarteMessage& from);
  AstarteMessage(::google::protobuf::Arena* arena, AstarteMessage&& from) noexcept
      : AstarteMessage(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kInterfaceNameFieldNumber = 1,
    kPathFieldNumber = 2,
    kDatastreamIndividualFieldNumber = 3,
    kDatastreamObjectFieldNumber = 4,
    kPropertyIndividualFieldNumber = 5,
  };
  // string interface_name = 1;
  void clear_interface_name() ;
  const std::string& interface_name() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_interface_name(Arg_&& arg, Args_... args);
  std::string* mutable_interface_name();
  PROTOBUF_NODISCARD std::string* release_interface_name();
  void set_allocated_interface_name(std::string* value);

  private:
  const std::string& _internal_interface_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_interface_name(
      const std::string& value);
  std::string* _internal_mutable_interface_name();

  public:
  // string path = 2;
  void clear_path() ;
  const std::string& path() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_path(Arg_&& arg, Args_... args);
  std::string* mutable_path();
  PROTOBUF_NODISCARD std::string* release_path();
  void set_allocated_path(std::string* value);

  private:
  const std::string& _internal_path() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_path(
      const std::string& value);
  std::string* _internal_mutable_path();

  public:
  // .astarteplatform.msghub.AstarteDatastreamIndividual datastream_individual = 3;
  bool has_datastream_individual() const;
  private:
  bool _internal_has_datastream_individual() const;

  public:
  void clear_datastream_individual() ;
  const ::astarteplatform::msghub::AstarteDatastreamIndividual& datastream_individual() const;
  PROTOBUF_NODISCARD ::astarteplatform::msghub::AstarteDatastreamIndividual* release_datastream_individual();
  ::astarteplatform::msghub::AstarteDatastreamIndividual* mutable_datastream_individual();
  void set_allocated_datastream_individual(::astarteplatform::msghub::AstarteDatastreamIndividual* value);
  void unsafe_arena_set_allocated_datastream_individual(::astarteplatform::msghub::AstarteDatastreamIndividual* value);
  ::astarteplatform::msghub::AstarteDatastreamIndividual* unsafe_arena_release_datastream_individual();

  private:
  const ::astarteplatform::msghub::AstarteDatastreamIndividual& _internal_datastream_individual() const;
  ::astarteplatform::msghub::AstarteDatastreamIndividual* _internal_mutable_datastream_individual();

  public:
  // .astarteplatform.msghub.AstarteDatastreamObject datastream_object = 4;
  bool has_datastream_object() const;
  private:
  bool _internal_has_datastream_object() const;

  public:
  void clear_datastream_object() ;
  const ::astarteplatform::msghub::AstarteDatastreamObject& datastream_object() const;
  PROTOBUF_NODISCARD ::astarteplatform::msghub::AstarteDatastreamObject* release_datastream_object();
  ::astarteplatform::msghub::AstarteDatastreamObject* mutable_datastream_object();
  void set_allocated_datastream_object(::astarteplatform::msghub::AstarteDatastreamObject* value);
  void unsafe_arena_set_allocated_datastream_object(::astarteplatform::msghub::AstarteDatastreamObject* value);
  ::astarteplatform::msghub::AstarteDatastreamObject* unsafe_arena_release_datastream_object();

  private:
  const ::astarteplatform::msghub::AstarteDatastreamObject& _internal_datastream_object() const;
  ::astarteplatform::msghub::AstarteDatastreamObject* _internal_mutable_datastream_object();

  public:
  // .astarteplatform.msghub.AstartePropertyIndividual property_individual = 5;
  bool has_property_individual() const;
  private:
  bool _internal_has_property_individual() const;

  public:
  void clear_property_individual() ;
  const ::astarteplatform::msghub::AstartePropertyIndividual& property_individual() const;
  PROTOBUF_NODISCARD ::astarteplatform::msghub::AstartePropertyIndividual* release_property_individual();
  ::astarteplatform::msghub::AstartePropertyIndividual* mutable_property_individual();
  void set_allocated_property_individual(::astarteplatform::msghub::AstartePropertyIndividual* value);
  void unsafe_arena_set_allocated_property_individual(::astarteplatform::msghub::AstartePropertyIndividual* value);
  ::astarteplatform::msghub::AstartePropertyIndividual* unsafe_arena_release_property_individual();

  private:
  const ::astarteplatform::msghub::AstartePropertyIndividual& _internal_property_individual() const;
  ::astarteplatform::msghub::AstartePropertyIndividual* _internal_mutable_property_individual();

  public:
  void clear_payload();
  PayloadCase payload_case() const;
  // @@protoc_insertion_point(class_scope:astarteplatform.msghub.AstarteMessage)
 private:
  class _Internal;
  void set_has_datastream_individual();
  void set_has_datastream_object();
  void set_has_property_individual();
  inline bool has_payload() const;
  inline void clear_has_payload();
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 5, 3,
      64, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const AstarteMessage& from_msg);
    ::google::protobuf::internal::ArenaStringPtr interface_name_;
    ::google::protobuf::internal::ArenaStringPtr path_;
    union PayloadUnion {
      constexpr PayloadUnion() : _constinit_{} {}
      ::google::protobuf::internal::ConstantInitialized _constinit_;
      ::astarteplatform::msghub::AstarteDatastreamIndividual* datastream_individual_;
      ::astarteplatform::msghub::AstarteDatastreamObject* datastream_object_;
      ::astarteplatform::msghub::AstartePropertyIndividual* property_individual_;
    } payload_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    ::uint32_t _oneof_case_[1];
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_astarteplatform_2fmsghub_2fastarte_5fmessage_2eproto;
};
// -------------------------------------------------------------------

class MessageHubEvent final
    : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:astarteplatform.msghub.MessageHubEvent) */ {
 public:
  inline MessageHubEvent() : MessageHubEvent(nullptr) {}
  ~MessageHubEvent() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(MessageHubEvent* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(MessageHubEvent));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR MessageHubEvent(
      ::google::protobuf::internal::ConstantInitialized);

  inline MessageHubEvent(const MessageHubEvent& from) : MessageHubEvent(nullptr, from) {}
  inline MessageHubEvent(MessageHubEvent&& from) noexcept
      : MessageHubEvent(nullptr, std::move(from)) {}
  inline MessageHubEvent& operator=(const MessageHubEvent& from) {
    CopyFrom(from);
    return *this;
  }
  inline MessageHubEvent& operator=(MessageHubEvent&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const MessageHubEvent& default_instance() {
    return *internal_default_instance();
  }
  enum EventCase {
    kMessage = 1,
    kError = 2,
    EVENT_NOT_SET = 0,
  };
  static inline const MessageHubEvent* internal_default_instance() {
    return reinterpret_cast<const MessageHubEvent*>(
        &_MessageHubEvent_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 0;
  friend void swap(MessageHubEvent& a, MessageHubEvent& b) { a.Swap(&b); }
  inline void Swap(MessageHubEvent* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MessageHubEvent* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  MessageHubEvent* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<MessageHubEvent>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const MessageHubEvent& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const MessageHubEvent& from) { MessageHubEvent::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(MessageHubEvent* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "astarteplatform.msghub.MessageHubEvent"; }

 protected:
  explicit MessageHubEvent(::google::protobuf::Arena* arena);
  MessageHubEvent(::google::protobuf::Arena* arena, const MessageHubEvent& from);
  MessageHubEvent(::google::protobuf::Arena* arena, MessageHubEvent&& from) noexcept
      : MessageHubEvent(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kMessageFieldNumber = 1,
    kErrorFieldNumber = 2,
  };
  // .astarteplatform.msghub.AstarteMessage message = 1;
  bool has_message() const;
  private:
  bool _internal_has_message() const;

  public:
  void clear_message() ;
  const ::astarteplatform::msghub::AstarteMessage& message() const;
  PROTOBUF_NODISCARD ::astarteplatform::msghub::AstarteMessage* release_message();
  ::astarteplatform::msghub::AstarteMessage* mutable_message();
  void set_allocated_message(::astarteplatform::msghub::AstarteMessage* value);
  void unsafe_arena_set_allocated_message(::astarteplatform::msghub::AstarteMessage* value);
  ::astarteplatform::msghub::AstarteMessage* unsafe_arena_release_message();

  private:
  const ::astarteplatform::msghub::AstarteMessage& _internal_message() const;
  ::astarteplatform::msghub::AstarteMessage* _internal_mutable_message();

  public:
  // .astarteplatform.msghub.MessageHubError error = 2;
  bool has_error() const;
  private:
  bool _internal_has_error() const;

  public:
  void clear_error() ;
  const ::astarteplatform::msghub::MessageHubError& error() const;
  PROTOBUF_NODISCARD ::astarteplatform::msghub::MessageHubError* release_error();
  ::astarteplatform::msghub::MessageHubError* mutable_error();
  void set_allocated_error(::astarteplatform::msghub::MessageHubError* value);
  void unsafe_arena_set_allocated_error(::astarteplatform::msghub::MessageHubError* value);
  ::astarteplatform::msghub::MessageHubError* unsafe_arena_release_error();

  private:
  const ::astarteplatform::msghub::MessageHubError& _internal_error() const;
  ::astarteplatform::msghub::MessageHubError* _internal_mutable_error();

  public:
  void clear_event();
  EventCase event_case() const;
  // @@protoc_insertion_point(class_scope:astarteplatform.msghub.MessageHubEvent)
 private:
  class _Internal;
  void set_has_message();
  void set_has_error();
  inline bool has_event() const;
  inline void clear_has_event();
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 2, 2,
      0, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const MessageHubEvent& from_msg);
    union EventUnion {
      constexpr EventUnion() : _constinit_{} {}
      ::google::protobuf::internal::ConstantInitialized _constinit_;
      ::astarteplatform::msghub::AstarteMessage* message_;
      ::astarteplatform::msghub::MessageHubError* error_;
    } event_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    ::uint32_t _oneof_case_[1];
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_astarteplatform_2fmsghub_2fastarte_5fmessage_2eproto;
};

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// MessageHubEvent

// .astarteplatform.msghub.AstarteMessage message = 1;
inline bool MessageHubEvent::has_message() const {
  return event_case() == kMessage;
}
inline bool MessageHubEvent::_internal_has_message() const {
  return event_case() == kMessage;
}
inline void MessageHubEvent::set_has_message() {
  _impl_._oneof_case_[0] = kMessage;
}
inline void MessageHubEvent::clear_message() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (event_case() == kMessage) {
    if (GetArena() == nullptr) {
      delete _impl_.event_.message_;
    } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
      ::google::protobuf::internal::MaybePoisonAfterClear(_impl_.event_.message_);
    }
    clear_has_event();
  }
}
inline ::astarteplatform::msghub::AstarteMessage* MessageHubEvent::release_message() {
  // @@protoc_insertion_point(field_release:astarteplatform.msghub.MessageHubEvent.message)
  if (event_case() == kMessage) {
    clear_has_event();
    auto* temp = _impl_.event_.message_;
    if (GetArena() != nullptr) {
      temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
    }
    _impl_.event_.message_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::astarteplatform::msghub::AstarteMessage& MessageHubEvent::_internal_message() const {
  return event_case() == kMessage ? *_impl_.event_.message_ : reinterpret_cast<::astarteplatform::msghub::AstarteMessage&>(::astarteplatform::msghub::_AstarteMessage_default_instance_);
}
inline const ::astarteplatform::msghub::AstarteMessage& MessageHubEvent::message() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:astarteplatform.msghub.MessageHubEvent.message)
  return _internal_message();
}
inline ::astarteplatform::msghub::AstarteMessage* MessageHubEvent::unsafe_arena_release_message() {
  // @@protoc_insertion_point(field_unsafe_arena_release:astarteplatform.msghub.MessageHubEvent.message)
  if (event_case() == kMessage) {
    clear_has_event();
    auto* temp = _impl_.event_.message_;
    _impl_.event_.message_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void MessageHubEvent::unsafe_arena_set_allocated_message(::astarteplatform::msghub::AstarteMessage* value) {
  // We rely on the oneof clear method to free the earlier contents
  // of this oneof. We can directly use the pointer we're given to
  // set the new value.
  clear_event();
  if (value) {
    set_has_message();
    _impl_.event_.message_ = value;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:astarteplatform.msghub.MessageHubEvent.message)
}
inline ::astarteplatform::msghub::AstarteMessage* MessageHubEvent::_internal_mutable_message() {
  if (event_case() != kMessage) {
    clear_event();
    set_has_message();
    _impl_.event_.message_ =
        ::google::protobuf::Message::DefaultConstruct<::astarteplatform::msghub::AstarteMessage>(GetArena());
  }
  return _impl_.event_.message_;
}
inline ::astarteplatform::msghub::AstarteMessage* MessageHubEvent::mutable_message() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::astarteplatform::msghub::AstarteMessage* _msg = _internal_mutable_message();
  // @@protoc_insertion_point(field_mutable:astarteplatform.msghub.MessageHubEvent.message)
  return _msg;
}

// .astarteplatform.msghub.MessageHubError error = 2;
inline bool MessageHubEvent::has_error() const {
  return event_case() == kError;
}
inline bool MessageHubEvent::_internal_has_error() const {
  return event_case() == kError;
}
inline void MessageHubEvent::set_has_error() {
  _impl_._oneof_case_[0] = kError;
}
inline ::astarteplatform::msghub::MessageHubError* MessageHubEvent::release_error() {
  // @@protoc_insertion_point(field_release:astarteplatform.msghub.MessageHubEvent.error)
  if (event_case() == kError) {
    clear_has_event();
    auto* temp = _impl_.event_.error_;
    if (GetArena() != nullptr) {
      temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
    }
    _impl_.event_.error_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::astarteplatform::msghub::MessageHubError& MessageHubEvent::_internal_error() const {
  return event_case() == kError ? *_impl_.event_.error_ : reinterpret_cast<::astarteplatform::msghub::MessageHubError&>(::astarteplatform::msghub::_MessageHubError_default_instance_);
}
inline const ::astarteplatform::msghub::MessageHubError& MessageHubEvent::error() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:astarteplatform.msghub.MessageHubEvent.error)
  return _internal_error();
}
inline ::astarteplatform::msghub::MessageHubError* MessageHubEvent::unsafe_arena_release_error() {
  // @@protoc_insertion_point(field_unsafe_arena_release:astarteplatform.msghub.MessageHubEvent.error)
  if (event_case() == kError) {
    clear_has_event();
    auto* temp = _impl_.event_.error_;
    _impl_.event_.error_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void MessageHubEvent::unsafe_arena_set_allocated_error(::astarteplatform::msghub::MessageHubError* value) {
  // We rely on the oneof clear method to free the earlier contents
  // of this oneof. We can directly use the pointer we're given to
  // set the new value.
  clear_event();
  if (value) {
    set_has_error();
    _impl_.event_.error_ = value;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:astarteplatform.msghub.MessageHubEvent.error)
}
inline ::astarteplatform::msghub::MessageHubError* MessageHubEvent::_internal_mutable_error() {
  if (event_case() != kError) {
    clear_event();
    set_has_error();
    _impl_.event_.error_ =
        ::google::protobuf::Message::DefaultConstruct<::astarteplatform::msghub::MessageHubError>(GetArena());
  }
  return _impl_.event_.error_;
}
inline ::astarteplatform::msghub::MessageHubError* MessageHubEvent::mutable_error() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::astarteplatform::msghub::MessageHubError* _msg = _internal_mutable_error();
  // @@protoc_insertion_point(field_mutable:astarteplatform.msghub.MessageHubEvent.error)
  return _msg;
}

inline bool MessageHubEvent::has_event() const {
  return event_case() != EVENT_NOT_SET;
}
inline void MessageHubEvent::clear_has_event() {
  _impl_._oneof_case_[0] = EVENT_NOT_SET;
}
inline MessageHubEvent::EventCase MessageHubEvent::event_case() const {
  return MessageHubEvent::EventCase(_impl_._oneof_case_[0]);
}
// -------------------------------------------------------------------

// AstarteMessage

// string interface_name = 1;
inline void AstarteMessage::clear_interface_name() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.interface_name_.ClearToEmpty();
}
inline const std::string& AstarteMessage::interface_name() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:astarteplatform.msghub.AstarteMessage.interface_name)
  return _internal_interface_name();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void AstarteMessage::set_interface_name(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.interface_name_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:astarteplatform.msghub.AstarteMessage.interface_name)
}
inline std::string* AstarteMessage::mutable_interface_name() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_interface_name();
  // @@protoc_insertion_point(field_mutable:astarteplatform.msghub.AstarteMessage.interface_name)
  return _s;
}
inline const std::string& AstarteMessage::_internal_interface_name() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.interface_name_.Get();
}
inline void AstarteMessage::_internal_set_interface_name(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.interface_name_.Set(value, GetArena());
}
inline std::string* AstarteMessage::_internal_mutable_interface_name() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.interface_name_.Mutable( GetArena());
}
inline std::string* AstarteMessage::release_interface_name() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:astarteplatform.msghub.AstarteMessage.interface_name)
  return _impl_.interface_name_.Release();
}
inline void AstarteMessage::set_allocated_interface_name(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.interface_name_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.interface_name_.IsDefault()) {
    _impl_.interface_name_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:astarteplatform.msghub.AstarteMessage.interface_name)
}

// string path = 2;
inline void AstarteMessage::clear_path() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.path_.ClearToEmpty();
}
inline const std::string& AstarteMessage::path() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:astarteplatform.msghub.AstarteMessage.path)
  return _internal_path();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void AstarteMessage::set_path(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.path_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:astarteplatform.msghub.AstarteMessage.path)
}
inline std::string* AstarteMessage::mutable_path() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_path();
  // @@protoc_insertion_point(field_mutable:astarteplatform.msghub.AstarteMessage.path)
  return _s;
}
inline const std::string& AstarteMessage::_internal_path() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.path_.Get();
}
inline void AstarteMessage::_internal_set_path(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.path_.Set(value, GetArena());
}
inline std::string* AstarteMessage::_internal_mutable_path() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.path_.Mutable( GetArena());
}
inline std::string* AstarteMessage::release_path() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:astarteplatform.msghub.AstarteMessage.path)
  return _impl_.path_.Release();
}
inline void AstarteMessage::set_allocated_path(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.path_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.path_.IsDefault()) {
    _impl_.path_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:astarteplatform.msghub.AstarteMessage.path)
}

// .astarteplatform.msghub.AstarteDatastreamIndividual datastream_individual = 3;
inline bool AstarteMessage::has_datastream_individual() const {
  return payload_case() == kDatastreamIndividual;
}
inline bool AstarteMessage::_internal_has_datastream_individual() const {
  return payload_case() == kDatastreamIndividual;
}
inline void AstarteMessage::set_has_datastream_individual() {
  _impl_._oneof_case_[0] = kDatastreamIndividual;
}
inline ::astarteplatform::msghub::AstarteDatastreamIndividual* AstarteMessage::release_datastream_individual() {
  // @@protoc_insertion_point(field_release:astarteplatform.msghub.AstarteMessage.datastream_individual)
  if (payload_case() == kDatastreamIndividual) {
    clear_has_payload();
    auto* temp = _impl_.payload_.datastream_individual_;
    if (GetArena() != nullptr) {
      temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
    }
    _impl_.payload_.datastream_individual_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::astarteplatform::msghub::AstarteDatastreamIndividual& AstarteMessage::_internal_datastream_individual() const {
  return payload_case() == kDatastreamIndividual ? *_impl_.payload_.datastream_individual_ : reinterpret_cast<::astarteplatform::msghub::AstarteDatastreamIndividual&>(::astarteplatform::msghub::_AstarteDatastreamIndividual_default_instance_);
}
inline const ::astarteplatform::msghub::AstarteDatastreamIndividual& AstarteMessage::datastream_individual() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:astarteplatform.msghub.AstarteMessage.datastream_individual)
  return _internal_datastream_individual();
}
inline ::astarteplatform::msghub::AstarteDatastreamIndividual* AstarteMessage::unsafe_arena_release_datastream_individual() {
  // @@protoc_insertion_point(field_unsafe_arena_release:astarteplatform.msghub.AstarteMessage.datastream_individual)
  if (payload_case() == kDatastreamIndividual) {
    clear_has_payload();
    auto* temp = _impl_.payload_.datastream_individual_;
    _impl_.payload_.datastream_individual_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void AstarteMessage::unsafe_arena_set_allocated_datastream_individual(::astarteplatform::msghub::AstarteDatastreamIndividual* value) {
  // We rely on the oneof clear method to free the earlier contents
  // of this oneof. We can directly use the pointer we're given to
  // set the new value.
  clear_payload();
  if (value) {
    set_has_datastream_individual();
    _impl_.payload_.datastream_individual_ = value;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:astarteplatform.msghub.AstarteMessage.datastream_individual)
}
inline ::astarteplatform::msghub::AstarteDatastreamIndividual* AstarteMessage::_internal_mutable_datastream_individual() {
  if (payload_case() != kDatastreamIndividual) {
    clear_payload();
    set_has_datastream_individual();
    _impl_.payload_.datastream_individual_ =
        ::google::protobuf::Message::DefaultConstruct<::astarteplatform::msghub::AstarteDatastreamIndividual>(GetArena());
  }
  return _impl_.payload_.datastream_individual_;
}
inline ::astarteplatform::msghub::AstarteDatastreamIndividual* AstarteMessage::mutable_datastream_individual() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::astarteplatform::msghub::AstarteDatastreamIndividual* _msg = _internal_mutable_datastream_individual();
  // @@protoc_insertion_point(field_mutable:astarteplatform.msghub.AstarteMessage.datastream_individual)
  return _msg;
}

// .astarteplatform.msghub.AstarteDatastreamObject datastream_object = 4;
inline bool AstarteMessage::has_datastream_object() const {
  return payload_case() == kDatastreamObject;
}
inline bool AstarteMessage::_internal_has_datastream_object() const {
  return payload_case() == kDatastreamObject;
}
inline void AstarteMessage::set_has_datastream_object() {
  _impl_._oneof_case_[0] = kDatastreamObject;
}
inline ::astarteplatform::msghub::AstarteDatastreamObject* AstarteMessage::release_datastream_object() {
  // @@protoc_insertion_point(field_release:astarteplatform.msghub.AstarteMessage.datastream_object)
  if (payload_case() == kDatastreamObject) {
    clear_has_payload();
    auto* temp = _impl_.payload_.datastream_object_;
    if (GetArena() != nullptr) {
      temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
    }
    _impl_.payload_.datastream_object_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::astarteplatform::msghub::AstarteDatastreamObject& AstarteMessage::_internal_datastream_object() const {
  return payload_case() == kDatastreamObject ? *_impl_.payload_.datastream_object_ : reinterpret_cast<::astarteplatform::msghub::AstarteDatastreamObject&>(::astarteplatform::msghub::_AstarteDatastreamObject_default_instance_);
}
inline const ::astarteplatform::msghub::AstarteDatastreamObject& AstarteMessage::datastream_object() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:astarteplatform.msghub.AstarteMessage.datastream_object)
  return _internal_datastream_object();
}
inline ::astarteplatform::msghub::AstarteDatastreamObject* AstarteMessage::unsafe_arena_release_datastream_object() {
  // @@protoc_insertion_point(field_unsafe_arena_release:astarteplatform.msghub.AstarteMessage.datastream_object)
  if (payload_case() == kDatastreamObject) {
    clear_has_payload();
    auto* temp = _impl_.payload_.datastream_object_;
    _impl_.payload_.datastream_object_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void AstarteMessage::unsafe_arena_set_allocated_datastream_object(::astarteplatform::msghub::AstarteDatastreamObject* value) {
  // We rely on the oneof clear method to free the earlier contents
  // of this oneof. We can directly use the pointer we're given to
  // set the new value.
  clear_payload();
  if (value) {
    set_has_datastream_object();
    _impl_.payload_.datastream_object_ = value;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:astarteplatform.msghub.AstarteMessage.datastream_object)
}
inline ::astarteplatform::msghub::AstarteDatastreamObject* AstarteMessage::_internal_mutable_datastream_object() {
  if (payload_case() != kDatastreamObject) {
    clear_payload();
    set_has_datastream_object();
    _impl_.payload_.datastream_object_ =
        ::google::protobuf::Message::DefaultConstruct<::astarteplatform::msghub::AstarteDatastreamObject>(GetArena());
  }
  return _impl_.payload_.datastream_object_;
}
inline ::astarteplatform::msghub::AstarteDatastreamObject* AstarteMessage::mutable_datastream_object() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::astarteplatform::msghub::AstarteDatastreamObject* _msg = _internal_mutable_datastream_object();
  // @@protoc_insertion_point(field_mutable:astarteplatform.msghub.AstarteMessage.datastream_object)
  return _msg;
}

// .astarteplatform.msghub.AstartePropertyIndividual property_individual = 5;
inline bool AstarteMessage::has_property_individual() const {
  return payload_case() == kPropertyIndividual;
}
inline bool AstarteMessage::_internal_has_property_individual() const {
  return payload_case() == kPropertyIndividual;
}
inline void AstarteMessage::set_has_property_individual() {
  _impl_._oneof_case_[0] = kPropertyIndividual;
}
inline ::astarteplatform::msghub::AstartePropertyIndividual* AstarteMessage::release_property_individual() {
  // @@protoc_insertion_point(field_release:astarteplatform.msghub.AstarteMessage.property_individual)
  if (payload_case() == kPropertyIndividual) {
    clear_has_payload();
    auto* temp = _impl_.payload_.property_individual_;
    if (GetArena() != nullptr) {
      temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
    }
    _impl_.payload_.property_individual_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::astarteplatform::msghub::AstartePropertyIndividual& AstarteMessage::_internal_property_individual() const {
  return payload_case() == kPropertyIndividual ? *_impl_.payload_.property_individual_ : reinterpret_cast<::astarteplatform::msghub::AstartePropertyIndividual&>(::astarteplatform::msghub::_AstartePropertyIndividual_default_instance_);
}
inline const ::astarteplatform::msghub::AstartePropertyIndividual& AstarteMessage::property_individual() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:astarteplatform.msghub.AstarteMessage.property_individual)
  return _internal_property_individual();
}
inline ::astarteplatform::msghub::AstartePropertyIndividual* AstarteMessage::unsafe_arena_release_property_individual() {
  // @@protoc_insertion_point(field_unsafe_arena_release:astarteplatform.msghub.AstarteMessage.property_individual)
  if (payload_case() == kPropertyIndividual) {
    clear_has_payload();
    auto* temp = _impl_.payload_.property_individual_;
    _impl_.payload_.property_individual_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void AstarteMessage::unsafe_arena_set_allocated_property_individual(::astarteplatform::msghub::AstartePropertyIndividual* value) {
  // We rely on the oneof clear method to free the earlier contents
  // of this oneof. We can directly use the pointer we're given to
  // set the new value.
  clear_payload();
  if (value) {
    set_has_property_individual();
    _impl_.payload_.property_individual_ = value;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:astarteplatform.msghub.AstarteMessage.property_individual)
}
inline ::astarteplatform::msghub::AstartePropertyIndividual* AstarteMessage::_internal_mutable_property_individual() {
  if (payload_case() != kPropertyIndividual) {
    clear_payload();
    set_has_property_individual();
    _impl_.payload_.property_individual_ =
        ::google::protobuf::Message::DefaultConstruct<::astarteplatform::msghub::AstartePropertyIndividual>(GetArena());
  }
  return _impl_.payload_.property_individual_;
}
inline ::astarteplatform::msghub::AstartePropertyIndividual* AstarteMessage::mutable_property_individual() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::astarteplatform::msghub::AstartePropertyIndividual* _msg = _internal_mutable_property_individual();
  // @@protoc_insertion_point(field_mutable:astarteplatform.msghub.AstarteMessage.property_individual)
  return _msg;
}

inline bool AstarteMessage::has_payload() const {
  return payload_case() != PAYLOAD_NOT_SET;
}
inline void AstarteMessage::clear_has_payload() {
  _impl_._oneof_case_[0] = PAYLOAD_NOT_SET;
}
inline AstarteMessage::PayloadCase AstarteMessage::payload_case() const {
  return AstarteMessage::PayloadCase(_impl_._oneof_case_[0]);
}
#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)
}  // namespace msghub
}  // namespace astarteplatform


// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // astarteplatform_2fmsghub_2fastarte_5fmessage_2eproto_2epb_2eh
