// Generated by the protocol buffer compiler.  DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// source: astarteplatform/msghub/astarte_message.proto
// Protobuf C++ Version: 5.27.2

#ifndef GOOGLE_PROTOBUF_INCLUDED_astarteplatform_2fmsghub_2fastarte_5fmessage_2eproto_2epb_2eh
#define GOOGLE_PROTOBUF_INCLUDED_astarteplatform_2fmsghub_2fastarte_5fmessage_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>
#include <utility>

#include "google/protobuf/runtime_version.h"
#if PROTOBUF_VERSION != 5027002
#error "Protobuf C++ gencode is built with an incompatible version of"
#error "Protobuf C++ headers/runtime. See"
#error "https://protobuf.dev/support/cross-version-runtime-guarantee/#cpp"
#endif
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_bases.h"
#include "google/protobuf/generated_message_tctable_decl.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/message.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/unknown_field_set.h"
#include "google/protobuf/timestamp.pb.h"
#include "astarteplatform/msghub/astarte_type.pb.h"
#include "astarteplatform/msghub/message_hub_error.pb.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_astarteplatform_2fmsghub_2fastarte_5fmessage_2eproto

namespace google {
namespace protobuf {
namespace internal {
class AnyMetadata;
}  // namespace internal
}  // namespace protobuf
}  // namespace google

// Internal implementation detail -- do not use these members.
struct TableStruct_astarteplatform_2fmsghub_2fastarte_5fmessage_2eproto {
  static const ::uint32_t offsets[];
};
extern const ::google::protobuf::internal::DescriptorTable
    descriptor_table_astarteplatform_2fmsghub_2fastarte_5fmessage_2eproto;
namespace astarteplatform {
namespace msghub {
class AstarteMessage;
struct AstarteMessageDefaultTypeInternal;
extern AstarteMessageDefaultTypeInternal _AstarteMessage_default_instance_;
class AstarteUnset;
struct AstarteUnsetDefaultTypeInternal;
extern AstarteUnsetDefaultTypeInternal _AstarteUnset_default_instance_;
class MessageHubEvent;
struct MessageHubEventDefaultTypeInternal;
extern MessageHubEventDefaultTypeInternal _MessageHubEvent_default_instance_;
}  // namespace msghub
}  // namespace astarteplatform
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google

namespace astarteplatform {
namespace msghub {

// ===================================================================


// -------------------------------------------------------------------

class AstarteUnset final : public ::google::protobuf::internal::ZeroFieldsBase
/* @@protoc_insertion_point(class_definition:astarteplatform.msghub.AstarteUnset) */ {
 public:
  inline AstarteUnset() : AstarteUnset(nullptr) {}
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR AstarteUnset(
      ::google::protobuf::internal::ConstantInitialized);

  inline AstarteUnset(const AstarteUnset& from) : AstarteUnset(nullptr, from) {}
  inline AstarteUnset(AstarteUnset&& from) noexcept
      : AstarteUnset(nullptr, std::move(from)) {}
  inline AstarteUnset& operator=(const AstarteUnset& from) {
    CopyFrom(from);
    return *this;
  }
  inline AstarteUnset& operator=(AstarteUnset&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const AstarteUnset& default_instance() {
    return *internal_default_instance();
  }
  static inline const AstarteUnset* internal_default_instance() {
    return reinterpret_cast<const AstarteUnset*>(
        &_AstarteUnset_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 2;
  friend void swap(AstarteUnset& a, AstarteUnset& b) { a.Swap(&b); }
  inline void Swap(AstarteUnset* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AstarteUnset* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  AstarteUnset* New(::google::protobuf::Arena* arena = nullptr) const final {
    return ::google::protobuf::internal::ZeroFieldsBase::DefaultConstruct<AstarteUnset>(arena);
  }
  using ::google::protobuf::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const AstarteUnset& from) {
    ::google::protobuf::internal::ZeroFieldsBase::CopyImpl(*this, from);
  }
  using ::google::protobuf::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const AstarteUnset& from) {
    ::google::protobuf::internal::ZeroFieldsBase::MergeImpl(*this, from);
  }

  public:
  bool IsInitialized() const {
    return true;
  }
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "astarteplatform.msghub.AstarteUnset"; }

 protected:
  explicit AstarteUnset(::google::protobuf::Arena* arena);
  AstarteUnset(::google::protobuf::Arena* arena, const AstarteUnset& from);
  AstarteUnset(::google::protobuf::Arena* arena, AstarteUnset&& from) noexcept
      : AstarteUnset(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ZeroFieldsBase::ClassData* GetClassData() const final;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  // @@protoc_insertion_point(class_scope:astarteplatform.msghub.AstarteUnset)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 0, 0,
      0, 2>
      _table_;

  static constexpr const void* _raw_default_instance_ =
      &_AstarteUnset_default_instance_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const AstarteUnset& from_msg);
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  friend struct ::TableStruct_astarteplatform_2fmsghub_2fastarte_5fmessage_2eproto;
};
// -------------------------------------------------------------------

class AstarteMessage final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:astarteplatform.msghub.AstarteMessage) */ {
 public:
  inline AstarteMessage() : AstarteMessage(nullptr) {}
  ~AstarteMessage() override;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR AstarteMessage(
      ::google::protobuf::internal::ConstantInitialized);

  inline AstarteMessage(const AstarteMessage& from) : AstarteMessage(nullptr, from) {}
  inline AstarteMessage(AstarteMessage&& from) noexcept
      : AstarteMessage(nullptr, std::move(from)) {}
  inline AstarteMessage& operator=(const AstarteMessage& from) {
    CopyFrom(from);
    return *this;
  }
  inline AstarteMessage& operator=(AstarteMessage&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const AstarteMessage& default_instance() {
    return *internal_default_instance();
  }
  enum PayloadCase {
    kAstarteData = 3,
    kAstarteUnset = 4,
    PAYLOAD_NOT_SET = 0,
  };
  static inline const AstarteMessage* internal_default_instance() {
    return reinterpret_cast<const AstarteMessage*>(
        &_AstarteMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 1;
  friend void swap(AstarteMessage& a, AstarteMessage& b) { a.Swap(&b); }
  inline void Swap(AstarteMessage* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AstarteMessage* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  AstarteMessage* New(::google::protobuf::Arena* arena = nullptr) const final {
    return ::google::protobuf::Message::DefaultConstruct<AstarteMessage>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const AstarteMessage& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const AstarteMessage& from) { AstarteMessage::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(AstarteMessage* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "astarteplatform.msghub.AstarteMessage"; }

 protected:
  explicit AstarteMessage(::google::protobuf::Arena* arena);
  AstarteMessage(::google::protobuf::Arena* arena, const AstarteMessage& from);
  AstarteMessage(::google::protobuf::Arena* arena, AstarteMessage&& from) noexcept
      : AstarteMessage(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::Message::ClassData* GetClassData() const final;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kInterfaceNameFieldNumber = 1,
    kPathFieldNumber = 2,
    kTimestampFieldNumber = 5,
    kAstarteDataFieldNumber = 3,
    kAstarteUnsetFieldNumber = 4,
  };
  // string interface_name = 1;
  void clear_interface_name() ;
  const std::string& interface_name() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_interface_name(Arg_&& arg, Args_... args);
  std::string* mutable_interface_name();
  PROTOBUF_NODISCARD std::string* release_interface_name();
  void set_allocated_interface_name(std::string* value);

  private:
  const std::string& _internal_interface_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_interface_name(
      const std::string& value);
  std::string* _internal_mutable_interface_name();

  public:
  // string path = 2;
  void clear_path() ;
  const std::string& path() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_path(Arg_&& arg, Args_... args);
  std::string* mutable_path();
  PROTOBUF_NODISCARD std::string* release_path();
  void set_allocated_path(std::string* value);

  private:
  const std::string& _internal_path() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_path(
      const std::string& value);
  std::string* _internal_mutable_path();

  public:
  // .google.protobuf.Timestamp timestamp = 5;
  bool has_timestamp() const;
  void clear_timestamp() ;
  const ::google::protobuf::Timestamp& timestamp() const;
  PROTOBUF_NODISCARD ::google::protobuf::Timestamp* release_timestamp();
  ::google::protobuf::Timestamp* mutable_timestamp();
  void set_allocated_timestamp(::google::protobuf::Timestamp* value);
  void unsafe_arena_set_allocated_timestamp(::google::protobuf::Timestamp* value);
  ::google::protobuf::Timestamp* unsafe_arena_release_timestamp();

  private:
  const ::google::protobuf::Timestamp& _internal_timestamp() const;
  ::google::protobuf::Timestamp* _internal_mutable_timestamp();

  public:
  // .astarteplatform.msghub.AstarteDataType astarte_data = 3;
  bool has_astarte_data() const;
  private:
  bool _internal_has_astarte_data() const;

  public:
  void clear_astarte_data() ;
  const ::astarteplatform::msghub::AstarteDataType& astarte_data() const;
  PROTOBUF_NODISCARD ::astarteplatform::msghub::AstarteDataType* release_astarte_data();
  ::astarteplatform::msghub::AstarteDataType* mutable_astarte_data();
  void set_allocated_astarte_data(::astarteplatform::msghub::AstarteDataType* value);
  void unsafe_arena_set_allocated_astarte_data(::astarteplatform::msghub::AstarteDataType* value);
  ::astarteplatform::msghub::AstarteDataType* unsafe_arena_release_astarte_data();

  private:
  const ::astarteplatform::msghub::AstarteDataType& _internal_astarte_data() const;
  ::astarteplatform::msghub::AstarteDataType* _internal_mutable_astarte_data();

  public:
  // .astarteplatform.msghub.AstarteUnset astarte_unset = 4;
  bool has_astarte_unset() const;
  private:
  bool _internal_has_astarte_unset() const;

  public:
  void clear_astarte_unset() ;
  const ::astarteplatform::msghub::AstarteUnset& astarte_unset() const;
  PROTOBUF_NODISCARD ::astarteplatform::msghub::AstarteUnset* release_astarte_unset();
  ::astarteplatform::msghub::AstarteUnset* mutable_astarte_unset();
  void set_allocated_astarte_unset(::astarteplatform::msghub::AstarteUnset* value);
  void unsafe_arena_set_allocated_astarte_unset(::astarteplatform::msghub::AstarteUnset* value);
  ::astarteplatform::msghub::AstarteUnset* unsafe_arena_release_astarte_unset();

  private:
  const ::astarteplatform::msghub::AstarteUnset& _internal_astarte_unset() const;
  ::astarteplatform::msghub::AstarteUnset* _internal_mutable_astarte_unset();

  public:
  void clear_payload();
  PayloadCase payload_case() const;
  // @@protoc_insertion_point(class_scope:astarteplatform.msghub.AstarteMessage)
 private:
  class _Internal;
  void set_has_astarte_data();
  void set_has_astarte_unset();
  inline bool has_payload() const;
  inline void clear_has_payload();
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      3, 5, 3,
      64, 2>
      _table_;

  static constexpr const void* _raw_default_instance_ =
      &_AstarteMessage_default_instance_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const AstarteMessage& from_msg);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::internal::ArenaStringPtr interface_name_;
    ::google::protobuf::internal::ArenaStringPtr path_;
    ::google::protobuf::Timestamp* timestamp_;
    union PayloadUnion {
      constexpr PayloadUnion() : _constinit_{} {}
      ::google::protobuf::internal::ConstantInitialized _constinit_;
      ::astarteplatform::msghub::AstarteDataType* astarte_data_;
      ::astarteplatform::msghub::AstarteUnset* astarte_unset_;
    } payload_;
    ::uint32_t _oneof_case_[1];
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_astarteplatform_2fmsghub_2fastarte_5fmessage_2eproto;
};
// -------------------------------------------------------------------

class MessageHubEvent final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:astarteplatform.msghub.MessageHubEvent) */ {
 public:
  inline MessageHubEvent() : MessageHubEvent(nullptr) {}
  ~MessageHubEvent() override;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR MessageHubEvent(
      ::google::protobuf::internal::ConstantInitialized);

  inline MessageHubEvent(const MessageHubEvent& from) : MessageHubEvent(nullptr, from) {}
  inline MessageHubEvent(MessageHubEvent&& from) noexcept
      : MessageHubEvent(nullptr, std::move(from)) {}
  inline MessageHubEvent& operator=(const MessageHubEvent& from) {
    CopyFrom(from);
    return *this;
  }
  inline MessageHubEvent& operator=(MessageHubEvent&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const MessageHubEvent& default_instance() {
    return *internal_default_instance();
  }
  enum EventCase {
    kMessage = 1,
    kError = 2,
    EVENT_NOT_SET = 0,
  };
  static inline const MessageHubEvent* internal_default_instance() {
    return reinterpret_cast<const MessageHubEvent*>(
        &_MessageHubEvent_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 0;
  friend void swap(MessageHubEvent& a, MessageHubEvent& b) { a.Swap(&b); }
  inline void Swap(MessageHubEvent* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MessageHubEvent* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  MessageHubEvent* New(::google::protobuf::Arena* arena = nullptr) const final {
    return ::google::protobuf::Message::DefaultConstruct<MessageHubEvent>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const MessageHubEvent& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const MessageHubEvent& from) { MessageHubEvent::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(MessageHubEvent* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "astarteplatform.msghub.MessageHubEvent"; }

 protected:
  explicit MessageHubEvent(::google::protobuf::Arena* arena);
  MessageHubEvent(::google::protobuf::Arena* arena, const MessageHubEvent& from);
  MessageHubEvent(::google::protobuf::Arena* arena, MessageHubEvent&& from) noexcept
      : MessageHubEvent(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::Message::ClassData* GetClassData() const final;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kMessageFieldNumber = 1,
    kErrorFieldNumber = 2,
  };
  // .astarteplatform.msghub.AstarteMessage message = 1;
  bool has_message() const;
  private:
  bool _internal_has_message() const;

  public:
  void clear_message() ;
  const ::astarteplatform::msghub::AstarteMessage& message() const;
  PROTOBUF_NODISCARD ::astarteplatform::msghub::AstarteMessage* release_message();
  ::astarteplatform::msghub::AstarteMessage* mutable_message();
  void set_allocated_message(::astarteplatform::msghub::AstarteMessage* value);
  void unsafe_arena_set_allocated_message(::astarteplatform::msghub::AstarteMessage* value);
  ::astarteplatform::msghub::AstarteMessage* unsafe_arena_release_message();

  private:
  const ::astarteplatform::msghub::AstarteMessage& _internal_message() const;
  ::astarteplatform::msghub::AstarteMessage* _internal_mutable_message();

  public:
  // .astarteplatform.msghub.MessageHubError error = 2;
  bool has_error() const;
  private:
  bool _internal_has_error() const;

  public:
  void clear_error() ;
  const ::astarteplatform::msghub::MessageHubError& error() const;
  PROTOBUF_NODISCARD ::astarteplatform::msghub::MessageHubError* release_error();
  ::astarteplatform::msghub::MessageHubError* mutable_error();
  void set_allocated_error(::astarteplatform::msghub::MessageHubError* value);
  void unsafe_arena_set_allocated_error(::astarteplatform::msghub::MessageHubError* value);
  ::astarteplatform::msghub::MessageHubError* unsafe_arena_release_error();

  private:
  const ::astarteplatform::msghub::MessageHubError& _internal_error() const;
  ::astarteplatform::msghub::MessageHubError* _internal_mutable_error();

  public:
  void clear_event();
  EventCase event_case() const;
  // @@protoc_insertion_point(class_scope:astarteplatform.msghub.MessageHubEvent)
 private:
  class _Internal;
  void set_has_message();
  void set_has_error();
  inline bool has_event() const;
  inline void clear_has_event();
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 2, 2,
      0, 2>
      _table_;

  static constexpr const void* _raw_default_instance_ =
      &_MessageHubEvent_default_instance_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const MessageHubEvent& from_msg);
    union EventUnion {
      constexpr EventUnion() : _constinit_{} {}
      ::google::protobuf::internal::ConstantInitialized _constinit_;
      ::astarteplatform::msghub::AstarteMessage* message_;
      ::astarteplatform::msghub::MessageHubError* error_;
    } event_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::uint32_t _oneof_case_[1];
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_astarteplatform_2fmsghub_2fastarte_5fmessage_2eproto;
};

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// MessageHubEvent

// .astarteplatform.msghub.AstarteMessage message = 1;
inline bool MessageHubEvent::has_message() const {
  return event_case() == kMessage;
}
inline bool MessageHubEvent::_internal_has_message() const {
  return event_case() == kMessage;
}
inline void MessageHubEvent::set_has_message() {
  _impl_._oneof_case_[0] = kMessage;
}
inline void MessageHubEvent::clear_message() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (event_case() == kMessage) {
    if (GetArena() == nullptr) {
      delete _impl_.event_.message_;
    } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
      ::google::protobuf::internal::MaybePoisonAfterClear(_impl_.event_.message_);
    }
    clear_has_event();
  }
}
inline ::astarteplatform::msghub::AstarteMessage* MessageHubEvent::release_message() {
  // @@protoc_insertion_point(field_release:astarteplatform.msghub.MessageHubEvent.message)
  if (event_case() == kMessage) {
    clear_has_event();
    auto* temp = _impl_.event_.message_;
    if (GetArena() != nullptr) {
      temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
    }
    _impl_.event_.message_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::astarteplatform::msghub::AstarteMessage& MessageHubEvent::_internal_message() const {
  return event_case() == kMessage ? *_impl_.event_.message_ : reinterpret_cast<::astarteplatform::msghub::AstarteMessage&>(::astarteplatform::msghub::_AstarteMessage_default_instance_);
}
inline const ::astarteplatform::msghub::AstarteMessage& MessageHubEvent::message() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:astarteplatform.msghub.MessageHubEvent.message)
  return _internal_message();
}
inline ::astarteplatform::msghub::AstarteMessage* MessageHubEvent::unsafe_arena_release_message() {
  // @@protoc_insertion_point(field_unsafe_arena_release:astarteplatform.msghub.MessageHubEvent.message)
  if (event_case() == kMessage) {
    clear_has_event();
    auto* temp = _impl_.event_.message_;
    _impl_.event_.message_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void MessageHubEvent::unsafe_arena_set_allocated_message(::astarteplatform::msghub::AstarteMessage* value) {
  // We rely on the oneof clear method to free the earlier contents
  // of this oneof. We can directly use the pointer we're given to
  // set the new value.
  clear_event();
  if (value) {
    set_has_message();
    _impl_.event_.message_ = value;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:astarteplatform.msghub.MessageHubEvent.message)
}
inline ::astarteplatform::msghub::AstarteMessage* MessageHubEvent::_internal_mutable_message() {
  if (event_case() != kMessage) {
    clear_event();
    set_has_message();
    _impl_.event_.message_ =
        ::google::protobuf::Message::DefaultConstruct<::astarteplatform::msghub::AstarteMessage>(GetArena());
  }
  return _impl_.event_.message_;
}
inline ::astarteplatform::msghub::AstarteMessage* MessageHubEvent::mutable_message() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::astarteplatform::msghub::AstarteMessage* _msg = _internal_mutable_message();
  // @@protoc_insertion_point(field_mutable:astarteplatform.msghub.MessageHubEvent.message)
  return _msg;
}

// .astarteplatform.msghub.MessageHubError error = 2;
inline bool MessageHubEvent::has_error() const {
  return event_case() == kError;
}
inline bool MessageHubEvent::_internal_has_error() const {
  return event_case() == kError;
}
inline void MessageHubEvent::set_has_error() {
  _impl_._oneof_case_[0] = kError;
}
inline ::astarteplatform::msghub::MessageHubError* MessageHubEvent::release_error() {
  // @@protoc_insertion_point(field_release:astarteplatform.msghub.MessageHubEvent.error)
  if (event_case() == kError) {
    clear_has_event();
    auto* temp = _impl_.event_.error_;
    if (GetArena() != nullptr) {
      temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
    }
    _impl_.event_.error_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::astarteplatform::msghub::MessageHubError& MessageHubEvent::_internal_error() const {
  return event_case() == kError ? *_impl_.event_.error_ : reinterpret_cast<::astarteplatform::msghub::MessageHubError&>(::astarteplatform::msghub::_MessageHubError_default_instance_);
}
inline const ::astarteplatform::msghub::MessageHubError& MessageHubEvent::error() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:astarteplatform.msghub.MessageHubEvent.error)
  return _internal_error();
}
inline ::astarteplatform::msghub::MessageHubError* MessageHubEvent::unsafe_arena_release_error() {
  // @@protoc_insertion_point(field_unsafe_arena_release:astarteplatform.msghub.MessageHubEvent.error)
  if (event_case() == kError) {
    clear_has_event();
    auto* temp = _impl_.event_.error_;
    _impl_.event_.error_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void MessageHubEvent::unsafe_arena_set_allocated_error(::astarteplatform::msghub::MessageHubError* value) {
  // We rely on the oneof clear method to free the earlier contents
  // of this oneof. We can directly use the pointer we're given to
  // set the new value.
  clear_event();
  if (value) {
    set_has_error();
    _impl_.event_.error_ = value;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:astarteplatform.msghub.MessageHubEvent.error)
}
inline ::astarteplatform::msghub::MessageHubError* MessageHubEvent::_internal_mutable_error() {
  if (event_case() != kError) {
    clear_event();
    set_has_error();
    _impl_.event_.error_ =
        ::google::protobuf::Message::DefaultConstruct<::astarteplatform::msghub::MessageHubError>(GetArena());
  }
  return _impl_.event_.error_;
}
inline ::astarteplatform::msghub::MessageHubError* MessageHubEvent::mutable_error() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::astarteplatform::msghub::MessageHubError* _msg = _internal_mutable_error();
  // @@protoc_insertion_point(field_mutable:astarteplatform.msghub.MessageHubEvent.error)
  return _msg;
}

inline bool MessageHubEvent::has_event() const {
  return event_case() != EVENT_NOT_SET;
}
inline void MessageHubEvent::clear_has_event() {
  _impl_._oneof_case_[0] = EVENT_NOT_SET;
}
inline MessageHubEvent::EventCase MessageHubEvent::event_case() const {
  return MessageHubEvent::EventCase(_impl_._oneof_case_[0]);
}
// -------------------------------------------------------------------

// AstarteMessage

// string interface_name = 1;
inline void AstarteMessage::clear_interface_name() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.interface_name_.ClearToEmpty();
}
inline const std::string& AstarteMessage::interface_name() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:astarteplatform.msghub.AstarteMessage.interface_name)
  return _internal_interface_name();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void AstarteMessage::set_interface_name(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.interface_name_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:astarteplatform.msghub.AstarteMessage.interface_name)
}
inline std::string* AstarteMessage::mutable_interface_name() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_interface_name();
  // @@protoc_insertion_point(field_mutable:astarteplatform.msghub.AstarteMessage.interface_name)
  return _s;
}
inline const std::string& AstarteMessage::_internal_interface_name() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.interface_name_.Get();
}
inline void AstarteMessage::_internal_set_interface_name(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.interface_name_.Set(value, GetArena());
}
inline std::string* AstarteMessage::_internal_mutable_interface_name() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.interface_name_.Mutable( GetArena());
}
inline std::string* AstarteMessage::release_interface_name() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:astarteplatform.msghub.AstarteMessage.interface_name)
  return _impl_.interface_name_.Release();
}
inline void AstarteMessage::set_allocated_interface_name(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.interface_name_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.interface_name_.IsDefault()) {
          _impl_.interface_name_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:astarteplatform.msghub.AstarteMessage.interface_name)
}

// string path = 2;
inline void AstarteMessage::clear_path() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.path_.ClearToEmpty();
}
inline const std::string& AstarteMessage::path() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:astarteplatform.msghub.AstarteMessage.path)
  return _internal_path();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void AstarteMessage::set_path(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.path_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:astarteplatform.msghub.AstarteMessage.path)
}
inline std::string* AstarteMessage::mutable_path() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_path();
  // @@protoc_insertion_point(field_mutable:astarteplatform.msghub.AstarteMessage.path)
  return _s;
}
inline const std::string& AstarteMessage::_internal_path() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.path_.Get();
}
inline void AstarteMessage::_internal_set_path(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.path_.Set(value, GetArena());
}
inline std::string* AstarteMessage::_internal_mutable_path() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.path_.Mutable( GetArena());
}
inline std::string* AstarteMessage::release_path() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:astarteplatform.msghub.AstarteMessage.path)
  return _impl_.path_.Release();
}
inline void AstarteMessage::set_allocated_path(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.path_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.path_.IsDefault()) {
          _impl_.path_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:astarteplatform.msghub.AstarteMessage.path)
}

// .astarteplatform.msghub.AstarteDataType astarte_data = 3;
inline bool AstarteMessage::has_astarte_data() const {
  return payload_case() == kAstarteData;
}
inline bool AstarteMessage::_internal_has_astarte_data() const {
  return payload_case() == kAstarteData;
}
inline void AstarteMessage::set_has_astarte_data() {
  _impl_._oneof_case_[0] = kAstarteData;
}
inline ::astarteplatform::msghub::AstarteDataType* AstarteMessage::release_astarte_data() {
  // @@protoc_insertion_point(field_release:astarteplatform.msghub.AstarteMessage.astarte_data)
  if (payload_case() == kAstarteData) {
    clear_has_payload();
    auto* temp = _impl_.payload_.astarte_data_;
    if (GetArena() != nullptr) {
      temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
    }
    _impl_.payload_.astarte_data_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::astarteplatform::msghub::AstarteDataType& AstarteMessage::_internal_astarte_data() const {
  return payload_case() == kAstarteData ? *_impl_.payload_.astarte_data_ : reinterpret_cast<::astarteplatform::msghub::AstarteDataType&>(::astarteplatform::msghub::_AstarteDataType_default_instance_);
}
inline const ::astarteplatform::msghub::AstarteDataType& AstarteMessage::astarte_data() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:astarteplatform.msghub.AstarteMessage.astarte_data)
  return _internal_astarte_data();
}
inline ::astarteplatform::msghub::AstarteDataType* AstarteMessage::unsafe_arena_release_astarte_data() {
  // @@protoc_insertion_point(field_unsafe_arena_release:astarteplatform.msghub.AstarteMessage.astarte_data)
  if (payload_case() == kAstarteData) {
    clear_has_payload();
    auto* temp = _impl_.payload_.astarte_data_;
    _impl_.payload_.astarte_data_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void AstarteMessage::unsafe_arena_set_allocated_astarte_data(::astarteplatform::msghub::AstarteDataType* value) {
  // We rely on the oneof clear method to free the earlier contents
  // of this oneof. We can directly use the pointer we're given to
  // set the new value.
  clear_payload();
  if (value) {
    set_has_astarte_data();
    _impl_.payload_.astarte_data_ = value;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:astarteplatform.msghub.AstarteMessage.astarte_data)
}
inline ::astarteplatform::msghub::AstarteDataType* AstarteMessage::_internal_mutable_astarte_data() {
  if (payload_case() != kAstarteData) {
    clear_payload();
    set_has_astarte_data();
    _impl_.payload_.astarte_data_ =
        ::google::protobuf::Message::DefaultConstruct<::astarteplatform::msghub::AstarteDataType>(GetArena());
  }
  return _impl_.payload_.astarte_data_;
}
inline ::astarteplatform::msghub::AstarteDataType* AstarteMessage::mutable_astarte_data() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::astarteplatform::msghub::AstarteDataType* _msg = _internal_mutable_astarte_data();
  // @@protoc_insertion_point(field_mutable:astarteplatform.msghub.AstarteMessage.astarte_data)
  return _msg;
}

// .astarteplatform.msghub.AstarteUnset astarte_unset = 4;
inline bool AstarteMessage::has_astarte_unset() const {
  return payload_case() == kAstarteUnset;
}
inline bool AstarteMessage::_internal_has_astarte_unset() const {
  return payload_case() == kAstarteUnset;
}
inline void AstarteMessage::set_has_astarte_unset() {
  _impl_._oneof_case_[0] = kAstarteUnset;
}
inline void AstarteMessage::clear_astarte_unset() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (payload_case() == kAstarteUnset) {
    if (GetArena() == nullptr) {
      delete _impl_.payload_.astarte_unset_;
    } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
      ::google::protobuf::internal::MaybePoisonAfterClear(_impl_.payload_.astarte_unset_);
    }
    clear_has_payload();
  }
}
inline ::astarteplatform::msghub::AstarteUnset* AstarteMessage::release_astarte_unset() {
  // @@protoc_insertion_point(field_release:astarteplatform.msghub.AstarteMessage.astarte_unset)
  if (payload_case() == kAstarteUnset) {
    clear_has_payload();
    auto* temp = _impl_.payload_.astarte_unset_;
    if (GetArena() != nullptr) {
      temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
    }
    _impl_.payload_.astarte_unset_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::astarteplatform::msghub::AstarteUnset& AstarteMessage::_internal_astarte_unset() const {
  return payload_case() == kAstarteUnset ? *_impl_.payload_.astarte_unset_ : reinterpret_cast<::astarteplatform::msghub::AstarteUnset&>(::astarteplatform::msghub::_AstarteUnset_default_instance_);
}
inline const ::astarteplatform::msghub::AstarteUnset& AstarteMessage::astarte_unset() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:astarteplatform.msghub.AstarteMessage.astarte_unset)
  return _internal_astarte_unset();
}
inline ::astarteplatform::msghub::AstarteUnset* AstarteMessage::unsafe_arena_release_astarte_unset() {
  // @@protoc_insertion_point(field_unsafe_arena_release:astarteplatform.msghub.AstarteMessage.astarte_unset)
  if (payload_case() == kAstarteUnset) {
    clear_has_payload();
    auto* temp = _impl_.payload_.astarte_unset_;
    _impl_.payload_.astarte_unset_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void AstarteMessage::unsafe_arena_set_allocated_astarte_unset(::astarteplatform::msghub::AstarteUnset* value) {
  // We rely on the oneof clear method to free the earlier contents
  // of this oneof. We can directly use the pointer we're given to
  // set the new value.
  clear_payload();
  if (value) {
    set_has_astarte_unset();
    _impl_.payload_.astarte_unset_ = value;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:astarteplatform.msghub.AstarteMessage.astarte_unset)
}
inline ::astarteplatform::msghub::AstarteUnset* AstarteMessage::_internal_mutable_astarte_unset() {
  if (payload_case() != kAstarteUnset) {
    clear_payload();
    set_has_astarte_unset();
    _impl_.payload_.astarte_unset_ =
        ::google::protobuf::Message::DefaultConstruct<::astarteplatform::msghub::AstarteUnset>(GetArena());
  }
  return _impl_.payload_.astarte_unset_;
}
inline ::astarteplatform::msghub::AstarteUnset* AstarteMessage::mutable_astarte_unset() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::astarteplatform::msghub::AstarteUnset* _msg = _internal_mutable_astarte_unset();
  // @@protoc_insertion_point(field_mutable:astarteplatform.msghub.AstarteMessage.astarte_unset)
  return _msg;
}

// .google.protobuf.Timestamp timestamp = 5;
inline bool AstarteMessage::has_timestamp() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.timestamp_ != nullptr);
  return value;
}
inline const ::google::protobuf::Timestamp& AstarteMessage::_internal_timestamp() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::google::protobuf::Timestamp* p = _impl_.timestamp_;
  return p != nullptr ? *p : reinterpret_cast<const ::google::protobuf::Timestamp&>(::google::protobuf::_Timestamp_default_instance_);
}
inline const ::google::protobuf::Timestamp& AstarteMessage::timestamp() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:astarteplatform.msghub.AstarteMessage.timestamp)
  return _internal_timestamp();
}
inline void AstarteMessage::unsafe_arena_set_allocated_timestamp(::google::protobuf::Timestamp* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.timestamp_);
  }
  _impl_.timestamp_ = reinterpret_cast<::google::protobuf::Timestamp*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:astarteplatform.msghub.AstarteMessage.timestamp)
}
inline ::google::protobuf::Timestamp* AstarteMessage::release_timestamp() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::google::protobuf::Timestamp* released = _impl_.timestamp_;
  _impl_.timestamp_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::google::protobuf::Timestamp* AstarteMessage::unsafe_arena_release_timestamp() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:astarteplatform.msghub.AstarteMessage.timestamp)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::google::protobuf::Timestamp* temp = _impl_.timestamp_;
  _impl_.timestamp_ = nullptr;
  return temp;
}
inline ::google::protobuf::Timestamp* AstarteMessage::_internal_mutable_timestamp() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.timestamp_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::google::protobuf::Timestamp>(GetArena());
    _impl_.timestamp_ = reinterpret_cast<::google::protobuf::Timestamp*>(p);
  }
  return _impl_.timestamp_;
}
inline ::google::protobuf::Timestamp* AstarteMessage::mutable_timestamp() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000001u;
  ::google::protobuf::Timestamp* _msg = _internal_mutable_timestamp();
  // @@protoc_insertion_point(field_mutable:astarteplatform.msghub.AstarteMessage.timestamp)
  return _msg;
}
inline void AstarteMessage::set_allocated_timestamp(::google::protobuf::Timestamp* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.timestamp_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.timestamp_ = reinterpret_cast<::google::protobuf::Timestamp*>(value);
  // @@protoc_insertion_point(field_set_allocated:astarteplatform.msghub.AstarteMessage.timestamp)
}

inline bool AstarteMessage::has_payload() const {
  return payload_case() != PAYLOAD_NOT_SET;
}
inline void AstarteMessage::clear_has_payload() {
  _impl_._oneof_case_[0] = PAYLOAD_NOT_SET;
}
inline AstarteMessage::PayloadCase AstarteMessage::payload_case() const {
  return AstarteMessage::PayloadCase(_impl_._oneof_case_[0]);
}
// -------------------------------------------------------------------

// AstarteUnset

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)
}  // namespace msghub
}  // namespace astarteplatform


// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // GOOGLE_PROTOBUF_INCLUDED_astarteplatform_2fmsghub_2fastarte_5fmessage_2eproto_2epb_2eh
