/*
 * This file is part of Astarte.
 *
 * Copyright 2024 SECO Mind Srl
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * SPDX-License-Identifier: Apache-2.0
 */


syntax = "proto3";

package astarteplatform.msghub;

import "astarteplatform/msghub/astarte_data.proto";
import "astarteplatform/msghub/interface.proto";

/* A message representing the property value associated to a certain interface and path.
 * Required for the `GetProperty` method that could need to return an unset property.
 */
message PropertyData {
  optional AstarteData data = 1; // Astarte data or unset.
}

/* A message containing all the properties values and information associated to a given astarte interface. */
message Property {
  string interface_name = 1;  // Interface name.
  string path = 2;            // Property path.
  int32 version_major = 3;    // Interface major version.
  Ownership ownership = 4;    // Interface ownership.
  AstarteData data = 5;       // Astarte data.
}

/* This message is the response to the GetProperties rpc method. */
message StoredProperties {
  repeated Property properties = 1; // list of interface property data.
}

/* This message is the request to the GetAllProperties rpc.
 * If the ownership is not specified, all the interfaces are retrieved, both device and server owned.
 * Otherwise, only the interfaces with the specified interfaces are retrieved.
 */
message PropertyFilter {
  optional Ownership ownership = 1; // Optional field representing the ownership of the interface to retrieve.
}

/* This message is the request for a single property identified by interface name and path. */
message PropertyIdentifier {
  string interface_name = 1; // Interface name.
  string path = 2;           // Property path.
}
